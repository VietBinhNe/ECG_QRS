
QRS_ECG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005db0  08005db0  00006db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db8  08005db8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005dc0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  2000005c  08005e1c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  08005e1c  00007ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f970  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252d  00000000  00000000  000169fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00018f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b19  00000000  00000000  00019d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d0  00000000  00000000  0001a899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124a7  00000000  00000000  00033069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a6e4  00000000  00000000  00045510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfbf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  000dfc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e3e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cb8 	.word	0x08005cb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005cb8 	.word	0x08005cb8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <cb_init>:
 */
static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte);

/* Function definitions ----------------------------------------------- */
uint32_t cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
    if (cb == NULL || buf == NULL || size >= CB_MAX_SIZE)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <cb_init+0x20>
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <cb_init+0x20>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bfa:	d302      	bcc.n	8000c02 <cb_init+0x26>
        return CB_ERROR;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	e012      	b.n	8000c28 <cb_init+0x4c>

    cb->data = buf;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	601a      	str	r2, [r3, #0]
    cb->size = size;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]
    cb->writer = 0;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
    cb->reader = 0;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    cb->overflow = 0;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
    cb->active = 1;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2201      	movs	r2, #1
 8000c24:	751a      	strb	r2, [r3, #20]

    return CB_SUCCESS;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <cb_read>:

    return CB_SUCCESS;
}

uint32_t cb_read(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
    int data_count = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00a      	beq.n	8000c64 <cb_read+0x30>
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <cb_read+0x30>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	7d1b      	ldrb	r3, [r3, #20]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f083 0301 	eor.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <cb_read+0x36>
        return CB_ERROR;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	e025      	b.n	8000cb6 <cb_read+0x82>

    cb->active = 0;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	751a      	strb	r2, [r3, #20]
    data_count = cb_data_count(cb);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f872 	bl	8000d5a <cb_data_count>
 8000c76:	4603      	mov	r3, r0
 8000c78:	617b      	str	r3, [r7, #20]
    if (data_count >= nbytes)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d802      	bhi.n	8000c88 <cb_read+0x54>
        num_avail_bytes = nbytes;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	e001      	b.n	8000c8c <cb_read+0x58>
    else
        num_avail_bytes = data_count;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < num_avail_bytes; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	e009      	b.n	8000ca6 <cb_read+0x72>
        cb_read_byte(cb, (uint8_t *)buf + i);
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 f8e6 	bl	8000e6c <cb_read_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dbf1      	blt.n	8000c92 <cb_read+0x5e>

    cb->active = 1;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000cb4:	69fb      	ldr	r3, [r7, #28]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <cb_write>:

uint32_t cb_write(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b088      	sub	sp, #32
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
    int space_count = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00a      	beq.n	8000cee <cb_write+0x30>
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <cb_write+0x30>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	7d1b      	ldrb	r3, [r3, #20]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f083 0301 	eor.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <cb_write+0x36>
        return CB_ERROR;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e02e      	b.n	8000d52 <cb_write+0x94>

    cb->active = 0;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	751a      	strb	r2, [r3, #20]
    space_count = cb_space_count(cb);
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f000 f856 	bl	8000dac <cb_space_count>
 8000d00:	4603      	mov	r3, r0
 8000d02:	617b      	str	r3, [r7, #20]
    if (space_count >= nbytes)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d805      	bhi.n	8000d18 <cb_write+0x5a>
    {
        num_avail_bytes = nbytes;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	61fb      	str	r3, [r7, #28]
        cb->overflow = 0;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	e006      	b.n	8000d26 <cb_write+0x68>
    }
    else
    {
        num_avail_bytes = space_count;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	61fb      	str	r3, [r7, #28]
        cb->overflow = nbytes - space_count;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	1ad2      	subs	r2, r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	611a      	str	r2, [r3, #16]
    }

    for (int i = 0; i < num_avail_bytes; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	e00a      	b.n	8000d42 <cb_write+0x84>
        cb_write_byte(cb, *((uint8_t *)buf + i));
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f86e 	bl	8000e18 <cb_write_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbf0      	blt.n	8000d2c <cb_write+0x6e>

    cb->active = 1;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000d50:	69fb      	ldr	r3, [r7, #28]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <cb_data_count>:

uint32_t cb_data_count(cbuffer_t *cb)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <cb_data_count+0x18>
        return CB_ERROR;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	e016      	b.n	8000da0 <cb_data_count+0x46>

    if (cb->writer >= cb->reader)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d306      	bcc.n	8000d8c <cb_data_count+0x32>
        res = cb->writer - cb->reader;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e008      	b.n	8000d9e <cb_data_count+0x44>
    else
        res = cb->size - cb->reader + cb->writer;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	1ad2      	subs	r2, r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]

    return res;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <cb_space_count>:

uint32_t cb_space_count(cbuffer_t *cb)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <cb_space_count+0x18>
        return CB_ERROR;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e023      	b.n	8000e0c <cb_space_count+0x60>

    if (cb->reader > cb->writer)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d907      	bls.n	8000de0 <cb_space_count+0x34>
        res = cb->reader - cb->writer - 1;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e014      	b.n	8000e0a <cb_space_count+0x5e>
    else if (cb->reader < cb->writer)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d20a      	bcs.n	8000e02 <cb_space_count+0x56>
        res = cb->size - cb->writer + cb->reader - 1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e003      	b.n	8000e0a <cb_space_count+0x5e>
    else
        res = cb->size - 1;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]

    return res;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <cb_write_byte>:

/* Private definitions ----------------------------------------------- */
static uint32_t cb_write_byte(cbuffer_t *cb, uint8_t byte)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
    uint32_t next = cb->writer + 1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
    if (next == cb->size)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d101      	bne.n	8000e3a <cb_write_byte+0x22>
        next = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]

    if (next == cb->reader)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d102      	bne.n	8000e4a <cb_write_byte+0x32>
        return CB_ERROR;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	e00a      	b.n	8000e60 <cb_write_byte+0x48>

    *(cb->data + cb->writer) = byte;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4413      	add	r3, r2
 8000e54:	78fa      	ldrb	r2, [r7, #3]
 8000e56:	701a      	strb	r2, [r3, #0]
    cb->writer = next;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	609a      	str	r2, [r3, #8]
    return CB_SUCCESS;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <cb_read_byte>:

static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    uint32_t next = cb->reader + 1;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
    if (cb->reader == cb->writer)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d102      	bne.n	8000e90 <cb_read_byte+0x24>
        return CB_ERROR;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e012      	b.n	8000eb6 <cb_read_byte+0x4a>

    if (next == cb->size)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d101      	bne.n	8000e9e <cb_read_byte+0x32>
        next = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]

    *byte = *(cb->data + cb->reader);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	701a      	strb	r2, [r3, #0]
    cb->reader = next;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	60da      	str	r2, [r3, #12]
    return CB_SUCCESS;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <MovingAverageFilter_Init>:
/* Private function prototypes ---------------------------------------- */
/* None */

/* Function definitions ----------------------------------------------- */
void MovingAverageFilter_Init(MovingAverageFilter* filter)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e007      	b.n	8000ee0 <MovingAverageFilter_Init+0x1e>
        filter->buffer[i] = 0;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d9f4      	bls.n	8000ed0 <MovingAverageFilter_Init+0xe>
    }
    filter->index = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	719a      	strb	r2, [r3, #6]
    filter->is_full = 0;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	71da      	strb	r2, [r3, #7]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b0ac      	sub	sp, #176	@ 0xb0
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f001 fa17 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f8f3 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 fa43 	bl	8001398 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f12:	f000 fa21 	bl	8001358 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f16:	f000 f955 	bl	80011c4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f1a:	f000 f9f3 	bl	8001304 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f1e:	f000 f9a3 	bl	8001268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MovingAverageFilter_Init(&adc_filter);
 8000f22:	4863      	ldr	r0, [pc, #396]	@ (80010b0 <main+0x1b0>)
 8000f24:	f7ff ffcd 	bl	8000ec2 <MovingAverageFilter_Init>
  cb_init(&adc_buffer, adc_buffer_data, sizeof(adc_buffer_data));
 8000f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f2c:	4961      	ldr	r1, [pc, #388]	@ (80010b4 <main+0x1b4>)
 8000f2e:	4862      	ldr	r0, [pc, #392]	@ (80010b8 <main+0x1b8>)
 8000f30:	f7ff fe54 	bl	8000bdc <cb_init>
  QRSDetector_Init(&qrs_detector);
 8000f34:	4861      	ldr	r0, [pc, #388]	@ (80010bc <main+0x1bc>)
 8000f36:	f000 fa5d 	bl	80013f4 <QRSDetector_Init>
  memset(qrs_flags, 0, sizeof(qrs_flags));
 8000f3a:	2240      	movs	r2, #64	@ 0x40
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4860      	ldr	r0, [pc, #384]	@ (80010c0 <main+0x1c0>)
 8000f40:	f004 fa3a 	bl	80053b8 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f44:	485f      	ldr	r0, [pc, #380]	@ (80010c4 <main+0x1c4>)
 8000f46:	f003 fa17 	bl	8004378 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	495e      	ldr	r1, [pc, #376]	@ (80010c8 <main+0x1c8>)
 8000f4e:	485f      	ldr	r0, [pc, #380]	@ (80010cc <main+0x1cc>)
 8000f50:	f001 fb66 	bl	8002620 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1); // dma knows when the conversion done
 8000f54:	485d      	ldr	r0, [pc, #372]	@ (80010cc <main+0x1cc>)
 8000f56:	f001 faa5 	bl	80024a4 <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(send_flag == 1)
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80010d0 <main+0x1d0>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d1fb      	bne.n	8000f5a <main+0x5a>
	  {
		  send_flag = 0;
 8000f62:	4b5b      	ldr	r3, [pc, #364]	@ (80010d0 <main+0x1d0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
		  memset(sendBuffer, 0, sizeof(sendBuffer));
 8000f68:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4859      	ldr	r0, [pc, #356]	@ (80010d4 <main+0x1d4>)
 8000f70:	f004 fa22 	bl	80053b8 <memset>
		  uint8_t temp_buffer[128]; // 64 sample x 2 byte
		  uint32_t bytes_read = cb_read(&adc_buffer, temp_buffer, 128);
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	4619      	mov	r1, r3
 8000f7a:	484f      	ldr	r0, [pc, #316]	@ (80010b8 <main+0x1b8>)
 8000f7c:	f7ff fe5a 	bl	8000c34 <cb_read>
 8000f80:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
			if(bytes_read == 128)
 8000f84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000f88:	2b80      	cmp	r3, #128	@ 0x80
 8000f8a:	d175      	bne.n	8001078 <main+0x178>
			{
				for (int i = 0; i < 64; i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000f92:	e026      	b.n	8000fe2 <main+0xe2>
				      {
				        uint16_t value = (temp_buffer[i * 2] << 8) | temp_buffer[i * 2 + 1];
 8000f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	33b0      	adds	r3, #176	@ 0xb0
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	3301      	adds	r3, #1
 8000fae:	33b0      	adds	r3, #176	@ 0xb0
 8000fb0:	443b      	add	r3, r7
 8000fb2:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
				        sprintf(&sendBuffer[strlen(sendBuffer)], "%u,", value);
 8000fc0:	4844      	ldr	r0, [pc, #272]	@ (80010d4 <main+0x1d4>)
 8000fc2:	f7ff f90d 	bl	80001e0 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a42      	ldr	r2, [pc, #264]	@ (80010d4 <main+0x1d4>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8000fd0:	4941      	ldr	r1, [pc, #260]	@ (80010d8 <main+0x1d8>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 f9d0 	bl	8005378 <siprintf>
				for (int i = 0; i < 64; i++)
 8000fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fe6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fe8:	ddd4      	ble.n	8000f94 <main+0x94>
				      }
				      // Send QRS Flag (64 bit: 0 / 1)
				      for (int i = 0; i < 64; i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ff0:	e021      	b.n	8001036 <main+0x136>
				      {
				        sprintf(&sendBuffer[strlen(sendBuffer)], "%u", qrs_flags[i]);
 8000ff2:	4838      	ldr	r0, [pc, #224]	@ (80010d4 <main+0x1d4>)
 8000ff4:	f7ff f8f4 	bl	80001e0 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a36      	ldr	r2, [pc, #216]	@ (80010d4 <main+0x1d4>)
 8000ffc:	1898      	adds	r0, r3, r2
 8000ffe:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <main+0x1c0>)
 8001000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4934      	ldr	r1, [pc, #208]	@ (80010dc <main+0x1dc>)
 800100c:	f004 f9b4 	bl	8005378 <siprintf>
				        if (i < 63) {
 8001010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001014:	2b3e      	cmp	r3, #62	@ 0x3e
 8001016:	dc09      	bgt.n	800102c <main+0x12c>
				          sprintf(&sendBuffer[strlen(sendBuffer)], ",");
 8001018:	482e      	ldr	r0, [pc, #184]	@ (80010d4 <main+0x1d4>)
 800101a:	f7ff f8e1 	bl	80001e0 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	4a2c      	ldr	r2, [pc, #176]	@ (80010d4 <main+0x1d4>)
 8001022:	4413      	add	r3, r2
 8001024:	492e      	ldr	r1, [pc, #184]	@ (80010e0 <main+0x1e0>)
 8001026:	4618      	mov	r0, r3
 8001028:	f004 f9a6 	bl	8005378 <siprintf>
				      for (int i = 0; i < 64; i++)
 800102c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001030:	3301      	adds	r3, #1
 8001032:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800103a:	2b3f      	cmp	r3, #63	@ 0x3f
 800103c:	ddd9      	ble.n	8000ff2 <main+0xf2>
				        }
				      }
				      sprintf(&sendBuffer[strlen(sendBuffer)], "\n");
 800103e:	4825      	ldr	r0, [pc, #148]	@ (80010d4 <main+0x1d4>)
 8001040:	f7ff f8ce 	bl	80001e0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	4a23      	ldr	r2, [pc, #140]	@ (80010d4 <main+0x1d4>)
 8001048:	4413      	add	r3, r2
 800104a:	4926      	ldr	r1, [pc, #152]	@ (80010e4 <main+0x1e4>)
 800104c:	4618      	mov	r0, r3
 800104e:	f004 f993 	bl	8005378 <siprintf>
				      HAL_UART_Transmit(&huart2, (uint8_t*)sendBuffer, strlen(sendBuffer), 200);
 8001052:	4820      	ldr	r0, [pc, #128]	@ (80010d4 <main+0x1d4>)
 8001054:	f7ff f8c4 	bl	80001e0 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	b29a      	uxth	r2, r3
 800105c:	23c8      	movs	r3, #200	@ 0xc8
 800105e:	491d      	ldr	r1, [pc, #116]	@ (80010d4 <main+0x1d4>)
 8001060:	4821      	ldr	r0, [pc, #132]	@ (80010e8 <main+0x1e8>)
 8001062:	f003 fdcd 	bl	8004c00 <HAL_UART_Transmit>

				      memset(qrs_flags, 0, sizeof(qrs_flags));
 8001066:	2240      	movs	r2, #64	@ 0x40
 8001068:	2100      	movs	r1, #0
 800106a:	4815      	ldr	r0, [pc, #84]	@ (80010c0 <main+0x1c0>)
 800106c:	f004 f9a4 	bl	80053b8 <memset>
				      qrs_flag_index = 0;
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <main+0x1ec>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e770      	b.n	8000f5a <main+0x5a>
			}
			else
			{
				char error_msg[] = "Error reading from buffer\n";
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <main+0x1f0>)
 800107a:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001088:	c403      	stmia	r4!, {r0, r1}
 800108a:	8022      	strh	r2, [r4, #0]
 800108c:	3402      	adds	r4, #2
 800108e:	0c13      	lsrs	r3, r2, #16
 8001090:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 200);
 8001092:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f8a2 	bl	80001e0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 80010a4:	23c8      	movs	r3, #200	@ 0xc8
 80010a6:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <main+0x1e8>)
 80010a8:	f003 fdaa 	bl	8004c00 <HAL_UART_Transmit>
	  if(send_flag == 1)
 80010ac:	e755      	b.n	8000f5a <main+0x5a>
 80010ae:	bf00      	nop
 80010b0:	20000454 	.word	0x20000454
 80010b4:	20000474 	.word	0x20000474
 80010b8:	2000045c 	.word	0x2000045c
 80010bc:	20000674 	.word	0x20000674
 80010c0:	20000078 	.word	0x20000078
 80010c4:	20000164 	.word	0x20000164
 80010c8:	20000450 	.word	0x20000450
 80010cc:	200000bc 	.word	0x200000bc
 80010d0:	2000044c 	.word	0x2000044c
 80010d4:	200001f4 	.word	0x200001f4
 80010d8:	08005cd0 	.word	0x08005cd0
 80010dc:	08005cd4 	.word	0x08005cd4
 80010e0:	08005cd8 	.word	0x08005cd8
 80010e4:	08005cdc 	.word	0x08005cdc
 80010e8:	200001ac 	.word	0x200001ac
 80010ec:	200000b8 	.word	0x200000b8
 80010f0:	08005ce0 	.word	0x08005ce0

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	@ 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	@ 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f004 f958 	bl	80053b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <SystemClock_Config+0xc8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a26      	ldr	r2, [pc, #152]	@ (80011bc <SystemClock_Config+0xc8>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	@ 0x40
 8001128:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <SystemClock_Config+0xc8>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <SystemClock_Config+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a20      	ldr	r2, [pc, #128]	@ (80011c0 <SystemClock_Config+0xcc>)
 800113e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <SystemClock_Config+0xcc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	2310      	movs	r3, #16
 800115a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115c:	2302      	movs	r3, #2
 800115e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001164:	2308      	movs	r3, #8
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fc15 	bl	80039a8 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001184:	f000 f930 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2103      	movs	r1, #3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fe77 	bl	8003e98 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b0:	f000 f91a 	bl	80013e8 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	@ 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_ADC1_Init+0x98>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <MX_ADC1_Init+0x9c>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_ADC1_Init+0x98>)
 80011de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_ADC1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_ADC1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_ADC1_Init+0x98>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_ADC1_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_ADC1_Init+0x98>)
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <MX_ADC1_Init+0xa0>)
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_ADC1_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_ADC1_Init+0x98>)
 8001212:	2201      	movs	r2, #1
 8001214:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_ADC1_Init+0x98>)
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_ADC1_Init+0x98>)
 8001220:	2201      	movs	r2, #1
 8001222:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001224:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_ADC1_Init+0x98>)
 8001226:	f001 f8f9 	bl	800241c <HAL_ADC_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001230:	f000 f8da 	bl	80013e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800123c:	2307      	movs	r3, #7
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_ADC1_Init+0x98>)
 8001246:	f001 faf9 	bl	800283c <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001250:	f000 f8ca 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000bc 	.word	0x200000bc
 8001260:	40012000 	.word	0x40012000
 8001264:	0f000001 	.word	0x0f000001

08001268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1249;
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM2_Init+0x98>)
 800128e:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM2_Init+0x98>)
 800129c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012b0:	f003 f812 	bl	80042d8 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ba:	f000 f895 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012cc:	f003 f9a6 	bl	800461c <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012d6:	f000 f887 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012e8:	f003 fbb8 	bl	8004a5c <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012f2:	f000 f879 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000164 	.word	0x20000164

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_USART2_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800133c:	f003 fc10 	bl	8004b60 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 f84f 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001ac 	.word	0x200001ac
 8001354:	40004400 	.word	0x40004400

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_DMA_Init+0x3c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <MX_DMA_Init+0x3c>)
 8001368:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_DMA_Init+0x3c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2038      	movs	r0, #56	@ 0x38
 8001380:	f001 fde7 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001384:	2038      	movs	r0, #56	@ 0x38
 8001386:	f001 fe00 	bl	8002f8a <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <MX_GPIO_Init+0x4c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a0f      	ldr	r2, [pc, #60]	@ (80013e4 <MX_GPIO_Init+0x4c>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <MX_GPIO_Init+0x4c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_GPIO_Init+0x4c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <MX_GPIO_Init+0x4c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_GPIO_Init+0x4c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <Error_Handler+0x8>

080013f4 <QRSDetector_Init>:
static void update_rr_intervals(QRSDetector* detector, uint32_t rr);
static int32_t calculate_slope(QRSDetector* detector);

/* Function definitions ----------------------------------------------- */
void QRSDetector_Init(QRSDetector* detector)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 64; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e00d      	b.n	800141e <QRSDetector_Init+0x2a>
        detector->baseline_buffer[i] = 0;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2100      	movs	r1, #0
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        detector->highpass_buffer[i] = 0;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3254      	adds	r2, #84	@ 0x54
 8001412:	2100      	movs	r1, #0
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 64; i++) {
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b3f      	cmp	r3, #63	@ 0x3f
 8001422:	d9ee      	bls.n	8001402 <QRSDetector_Init+0xe>
    }
    for (uint8_t i = 0; i < 20; i++) {
 8001424:	2300      	movs	r3, #0
 8001426:	73bb      	strb	r3, [r7, #14]
 8001428:	e008      	b.n	800143c <QRSDetector_Init+0x48>
        detector->lowpass_buffer[i] = 0;
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3240      	adds	r2, #64	@ 0x40
 8001430:	2100      	movs	r1, #0
 8001432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 20; i++) {
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	3301      	adds	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	2b13      	cmp	r3, #19
 8001440:	d9f3      	bls.n	800142a <QRSDetector_Init+0x36>
    }
    for (uint8_t i = 0; i < 5; i++) {
 8001442:	2300      	movs	r3, #0
 8001444:	737b      	strb	r3, [r7, #13]
 8001446:	e00f      	b.n	8001468 <QRSDetector_Init+0x74>
        detector->early_smooth_buffer[i] = 0;
 8001448:	7b7a      	ldrb	r2, [r7, #13]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3294      	adds	r2, #148	@ 0x94
 800144e:	2100      	movs	r1, #0
 8001450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        detector->deriv_buffer[i] = 0;
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	3398      	adds	r3, #152	@ 0x98
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < 5; i++) {
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	3301      	adds	r3, #1
 8001466:	737b      	strb	r3, [r7, #13]
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d9ec      	bls.n	8001448 <QRSDetector_Init+0x54>
    }
    for (uint8_t i = 0; i < 4; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	733b      	strb	r3, [r7, #12]
 8001472:	e008      	b.n	8001486 <QRSDetector_Init+0x92>
        detector->smooth_buffer[i] = 0;
 8001474:	7b3a      	ldrb	r2, [r7, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	329e      	adds	r2, #158	@ 0x9e
 800147a:	2100      	movs	r1, #0
 800147c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 4; i++) {
 8001480:	7b3b      	ldrb	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	733b      	strb	r3, [r7, #12]
 8001486:	7b3b      	ldrb	r3, [r7, #12]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d9f3      	bls.n	8001474 <QRSDetector_Init+0x80>
    }
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	72fb      	strb	r3, [r7, #11]
 8001490:	e008      	b.n	80014a4 <QRSDetector_Init+0xb0>
        detector->integ_buffer[i] = 0;
 8001492:	7afa      	ldrb	r2, [r7, #11]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	32a2      	adds	r2, #162	@ 0xa2
 8001498:	2100      	movs	r1, #0
 800149a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	3301      	adds	r3, #1
 80014a2:	72fb      	strb	r3, [r7, #11]
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	2b09      	cmp	r3, #9
 80014a8:	d9f3      	bls.n	8001492 <QRSDetector_Init+0x9e>
    }

    detector->integ_index = 0;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0
    detector->signal_level = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    detector->noise_level = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    detector->threshold_i1 = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    detector->threshold_i2 = 0;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
    detector->last_peak_time = 0;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
    detector->sample_count = 0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
    detector->learning_phase = 1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

    for (uint8_t i = 0; i < 8; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	72bb      	strb	r3, [r7, #10]
 80014ee:	e008      	b.n	8001502 <QRSDetector_Init+0x10e>
        detector->rr_intervals[i] = 0;
 80014f0:	7aba      	ldrb	r2, [r7, #10]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	32b4      	adds	r2, #180	@ 0xb4
 80014f6:	2100      	movs	r1, #0
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 80014fc:	7abb      	ldrb	r3, [r7, #10]
 80014fe:	3301      	adds	r3, #1
 8001500:	72bb      	strb	r3, [r7, #10]
 8001502:	7abb      	ldrb	r3, [r7, #10]
 8001504:	2b07      	cmp	r3, #7
 8001506:	d9f3      	bls.n	80014f0 <QRSDetector_Init+0xfc>
    }
    detector->rr_index = 0;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 22f0 	strb.w	r2, [r3, #752]	@ 0x2f0
    detector->rr_average1 = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
    detector->rr_average2 = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
    detector->rr_count = 0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc

    detector->last_qrs_slope = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	0000      	movs	r0, r0
	...

08001540 <QRSDetector_Process>:

uint8_t QRSDetector_Process(QRSDetector* detector, uint16_t new_sample)
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b0b2      	sub	sp, #200	@ 0xc8
 8001544:	af06      	add	r7, sp, #24
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
    // Step 1: Remove baseline wander
    int32_t baseline_removed = baseline_removal(detector, new_sample);
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f9b7 	bl	80018c4 <baseline_removal>
 8001556:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    // Step 2: Bandpass filter
    int32_t bandpass = bandpass_filter(detector, baseline_removed);
 800155a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f9ec 	bl	800193c <bandpass_filter>
 8001564:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

    // Step 3: Early smoothing
    int32_t early_smoothed = early_smooth(detector, bandpass);
 8001568:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fa67 	bl	8001a40 <early_smooth>
 8001572:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    // Step 4: Derivative
    int32_t deriv = derivative(detector, early_smoothed);
 8001576:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 faa0 	bl	8001ac0 <derivative>
 8001580:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    // Step 5: Squaring
    int32_t squared = squaring(deriv);
 8001584:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001588:	f000 facc 	bl	8001b24 <squaring>
 800158c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    // Step 6: Smoothing
    int32_t smoothed = smooth_signal(detector, squared);
 8001590:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fad2 	bl	8001b3e <smooth_signal>
 800159a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    // Step 7: Moving window integration
    int32_t integrated = moving_window_integration(detector, smoothed);
 800159e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fb06 	bl	8001bb4 <moving_window_integration>
 80015a8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    // Debug: Send intermediate values for monitoring
    char debug_msg[120];
    sprintf(debug_msg, "BL:%ld,BP:%ld,ESmooth:%ld,Deriv:%ld,Sq:%ld,Smooth:%ld,Integ:%ld\n",
 80015ac:	f107 0008 	add.w	r0, r7, #8
 80015b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015b4:	9304      	str	r3, [sp, #16]
 80015b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015ba:	9303      	str	r3, [sp, #12]
 80015bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80015d6:	49b8      	ldr	r1, [pc, #736]	@ (80018b8 <QRSDetector_Process+0x378>)
 80015d8:	f003 fece 	bl	8005378 <siprintf>
            baseline_removed, bandpass, early_smoothed, deriv, squared, smoothed, integrated);
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 200);
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe fdfd 	bl	80001e0 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f107 0108 	add.w	r1, r7, #8
 80015ee:	23c8      	movs	r3, #200	@ 0xc8
 80015f0:	48b2      	ldr	r0, [pc, #712]	@ (80018bc <QRSDetector_Process+0x37c>)
 80015f2:	f003 fb05 	bl	8004c00 <HAL_UART_Transmit>

    // Step 8: Learning phase (first 2 seconds)
    if (detector->learning_phase) {
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8094 	beq.w	800172a <QRSDetector_Process+0x1ea>
        detector->sample_count++;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
        if (detector->sample_count < QRS_LEARNING_SAMPLES) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001616:	2b7f      	cmp	r3, #127	@ 0x7f
 8001618:	d816      	bhi.n	8001648 <QRSDetector_Process+0x108>
            if (integrated > detector->signal_level) detector->signal_level = integrated;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8001620:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001624:	429a      	cmp	r2, r3
 8001626:	dd04      	ble.n	8001632 <QRSDetector_Process+0xf2>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800162e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
            detector->noise_level += integrated;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8d3 22b8 	ldr.w	r2, [r3, #696]	@ 0x2b8
 8001638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800163c:	441a      	add	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
            return 0;
 8001644:	2300      	movs	r3, #0
 8001646:	e124      	b.n	8001892 <QRSDetector_Process+0x352>
        } else {
            detector->noise_level /= QRS_LEARNING_SAMPLES;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800164e:	2b00      	cmp	r3, #0
 8001650:	da00      	bge.n	8001654 <QRSDetector_Process+0x114>
 8001652:	337f      	adds	r3, #127	@ 0x7f
 8001654:	11db      	asrs	r3, r3, #7
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
            detector->signal_level /= 2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8001664:	0fda      	lsrs	r2, r3, #31
 8001666:	4413      	add	r3, r2
 8001668:	105b      	asrs	r3, r3, #1
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
            detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f885 	bl	8000788 <__aeabi_i2d>
 800167e:	4604      	mov	r4, r0
 8001680:	460d      	mov	r5, r1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 22b4 	ldr.w	r2, [r3, #692]	@ 0x2b4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f879 	bl	8000788 <__aeabi_i2d>
 8001696:	a382      	add	r3, pc, #520	@ (adr r3, 80018a0 <QRSDetector_Process+0x360>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe fdf8 	bl	8000290 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe ff22 	bl	80004f0 <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff f8d2 	bl	800085c <__aeabi_d2iz>
 80016b8:	4602      	mov	r2, r0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
            detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f85e 	bl	8000788 <__aeabi_i2d>
 80016cc:	a376      	add	r3, pc, #472	@ (adr r3, 80018a8 <QRSDetector_Process+0x368>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe fddd 	bl	8000290 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f8bd 	bl	800085c <__aeabi_d2iz>
 80016e2:	4602      	mov	r2, r0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
            detector->learning_phase = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
            detector->sample_count = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

            // Debug: Send thresholds after learning phase
            sprintf(debug_msg, "ThreshI1:%ld,ThreshI2:%ld\n", detector->threshold_i1, detector->threshold_i2);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8d3 22bc 	ldr.w	r2, [r3, #700]	@ 0x2bc
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001706:	f107 0008 	add.w	r0, r7, #8
 800170a:	496d      	ldr	r1, [pc, #436]	@ (80018c0 <QRSDetector_Process+0x380>)
 800170c:	f003 fe34 	bl	8005378 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 200);
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fd63 	bl	80001e0 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	b29a      	uxth	r2, r3
 800171e:	f107 0108 	add.w	r1, r7, #8
 8001722:	23c8      	movs	r3, #200	@ 0xc8
 8001724:	4865      	ldr	r0, [pc, #404]	@ (80018bc <QRSDetector_Process+0x37c>)
 8001726:	f003 fa6b 	bl	8004c00 <HAL_UART_Transmit>
        }
    }

    // Step 9: Peak detection
    uint8_t is_qrs = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    if (integrated > detector->threshold_i1) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001736:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800173a:	429a      	cmp	r2, r3
 800173c:	dd55      	ble.n	80017ea <QRSDetector_Process+0x2aa>
        uint32_t time_since_last = detector->sample_count - detector->last_peak_time;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

        // Check refractory period
        if (time_since_last < QRS_REFRACTORY_PERIOD) {
 8001750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001754:	2b0b      	cmp	r3, #11
 8001756:	d807      	bhi.n	8001768 <QRSDetector_Process+0x228>
            update_thresholds(detector, integrated, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fa6e 	bl	8001c40 <update_thresholds>
            return 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e094      	b.n	8001892 <QRSDetector_Process+0x352>
        }

        // T-wave discrimination
        if (time_since_last < QRS_TWAVE_PERIOD && detector->last_qrs_slope > 0) {
 8001768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800176c:	2b16      	cmp	r3, #22
 800176e:	d81c      	bhi.n	80017aa <QRSDetector_Process+0x26a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8001776:	2b00      	cmp	r3, #0
 8001778:	dd17      	ble.n	80017aa <QRSDetector_Process+0x26a>
            int32_t current_slope = calculate_slope(detector);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fbbc 	bl	8001ef8 <calculate_slope>
 8001780:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
            if (current_slope < detector->last_qrs_slope / 2) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800178a:	0fda      	lsrs	r2, r3, #31
 800178c:	4413      	add	r3, r2
 800178e:	105b      	asrs	r3, r3, #1
 8001790:	461a      	mov	r2, r3
 8001792:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001796:	4293      	cmp	r3, r2
 8001798:	da07      	bge.n	80017aa <QRSDetector_Process+0x26a>
                update_thresholds(detector, integrated, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fa4d 	bl	8001c40 <update_thresholds>
                return 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e073      	b.n	8001892 <QRSDetector_Process+0x352>
            }
        }

        // Valid QRS peak
        is_qrs = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
        detector->last_qrs_slope = calculate_slope(detector);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fba1 	bl	8001ef8 <calculate_slope>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
        update_thresholds(detector, integrated, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fa3b 	bl	8001c40 <update_thresholds>
        uint32_t rr = time_since_last;
 80017ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        update_rr_intervals(detector, rr);
 80017d2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fada 	bl	8001d90 <update_rr_intervals>
        detector->last_peak_time = detector->sample_count;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 80017e8:	e04a      	b.n	8001880 <QRSDetector_Process+0x340>
    } else if (detector->rr_average1 > 0 &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d045      	beq.n	8001880 <QRSDetector_Process+0x340>
               (detector->sample_count - detector->last_peak_time) > (uint32_t)(QRS_SEARCHBACK_FACTOR * detector->rr_average1)) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8001800:	1ad4      	subs	r4, r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe ffad 	bl	8000768 <__aeabi_ui2d>
 800180e:	a328      	add	r3, pc, #160	@ (adr r3, 80018b0 <QRSDetector_Process+0x370>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd3c 	bl	8000290 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f844 	bl	80008ac <__aeabi_d2uiz>
 8001824:	4603      	mov	r3, r0
    } else if (detector->rr_average1 > 0 &&
 8001826:	429c      	cmp	r4, r3
 8001828:	d92a      	bls.n	8001880 <QRSDetector_Process+0x340>
        if (integrated > detector->threshold_i2) {
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001830:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001834:	429a      	cmp	r2, r3
 8001836:	dd23      	ble.n	8001880 <QRSDetector_Process+0x340>
            is_qrs = 1;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
            detector->last_qrs_slope = calculate_slope(detector);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fb5a 	bl	8001ef8 <calculate_slope>
 8001844:	4602      	mov	r2, r0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            update_thresholds(detector, integrated, 1);
 800184c:	2201      	movs	r2, #1
 800184e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f9f4 	bl	8001c40 <update_thresholds>
            uint32_t rr = detector->sample_count - detector->last_peak_time;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            update_rr_intervals(detector, rr);
 800186a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fa8e 	bl	8001d90 <update_rr_intervals>
            detector->last_peak_time = detector->sample_count;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 22c8 	ldr.w	r2, [r3, #712]	@ 0x2c8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
        }
    }

    detector->sample_count++;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
    return is_qrs;
 800188e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8001892:	4618      	mov	r0, r3
 8001894:	37b0      	adds	r7, #176	@ 0xb0
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	eb851eb8 	.word	0xeb851eb8
 80018a4:	3f9eb851 	.word	0x3f9eb851
 80018a8:	33333333 	.word	0x33333333
 80018ac:	3fd33333 	.word	0x3fd33333
 80018b0:	28f5c28f 	.word	0x28f5c28f
 80018b4:	3ffa8f5c 	.word	0x3ffa8f5c
 80018b8:	08005cfc 	.word	0x08005cfc
 80018bc:	200001ac 	.word	0x200001ac
 80018c0:	08005d40 	.word	0x08005d40

080018c4 <baseline_removal>:

/* Private definitions ----------------------------------------------- */
static int32_t baseline_removal(QRSDetector* detector, int32_t new_sample)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    // High-pass filter for baseline removal (cutoff ~0.3 Hz)
    for (uint8_t i = 63; i > 0; i--) {
 80018ce:	233f      	movs	r3, #63	@ 0x3f
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e00b      	b.n	80018ec <baseline_removal+0x28>
        detector->baseline_buffer[i] = detector->baseline_buffer[i - 1];
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	1e59      	subs	r1, r3, #1
 80018d8:	7dfa      	ldrb	r2, [r7, #23]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 63; i > 0; i--) {
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	75fb      	strb	r3, [r7, #23]
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <baseline_removal+0x10>
    }
    detector->baseline_buffer[0] = new_sample;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	601a      	str	r2, [r3, #0]

    int32_t baseline = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 64; i++) {
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e009      	b.n	8001916 <baseline_removal+0x52>
        baseline += detector->baseline_buffer[i];
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 64; i++) {
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	3301      	adds	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b3f      	cmp	r3, #63	@ 0x3f
 800191a:	d9f2      	bls.n	8001902 <baseline_removal+0x3e>
    }
    baseline /= 64;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da00      	bge.n	8001924 <baseline_removal+0x60>
 8001922:	333f      	adds	r3, #63	@ 0x3f
 8001924:	119b      	asrs	r3, r3, #6
 8001926:	613b      	str	r3, [r7, #16]

    return new_sample - baseline;
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
}
 800192e:	4618      	mov	r0, r3
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <bandpass_filter>:

static int32_t bandpass_filter(QRSDetector* detector, int32_t new_sample)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    // Low-pass filter (cutoff ~12 Hz)
    for (uint8_t i = 19; i > 0; i--) {
 8001946:	2313      	movs	r3, #19
 8001948:	77fb      	strb	r3, [r7, #31]
 800194a:	e00d      	b.n	8001968 <bandpass_filter+0x2c>
        detector->lowpass_buffer[i] = detector->lowpass_buffer[i - 1];
 800194c:	7ffb      	ldrb	r3, [r7, #31]
 800194e:	1e59      	subs	r1, r3, #1
 8001950:	7ffa      	ldrb	r2, [r7, #31]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3140      	adds	r1, #64	@ 0x40
 8001956:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3240      	adds	r2, #64	@ 0x40
 800195e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 19; i > 0; i--) {
 8001962:	7ffb      	ldrb	r3, [r7, #31]
 8001964:	3b01      	subs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]
 8001968:	7ffb      	ldrb	r3, [r7, #31]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <bandpass_filter+0x10>
    }
    detector->lowpass_buffer[0] = new_sample;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

    int32_t lowpass = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < 20; i++) {
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]
 800197e:	e00a      	b.n	8001996 <bandpass_filter+0x5a>
        lowpass += detector->lowpass_buffer[i];
 8001980:	7dfa      	ldrb	r2, [r7, #23]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3240      	adds	r2, #64	@ 0x40
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4413      	add	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < 20; i++) {
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	3301      	adds	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b13      	cmp	r3, #19
 800199a:	d9f1      	bls.n	8001980 <bandpass_filter+0x44>
    }
    lowpass /= 20;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	4a26      	ldr	r2, [pc, #152]	@ (8001a38 <bandpass_filter+0xfc>)
 80019a0:	fb82 1203 	smull	r1, r2, r2, r3
 80019a4:	10d2      	asrs	r2, r2, #3
 80019a6:	17db      	asrs	r3, r3, #31
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	61bb      	str	r3, [r7, #24]

    // High-pass filter (cutoff ~0.5 Hz)
    for (uint8_t i = 63; i > 0; i--) {
 80019ac:	233f      	movs	r3, #63	@ 0x3f
 80019ae:	75bb      	strb	r3, [r7, #22]
 80019b0:	e00d      	b.n	80019ce <bandpass_filter+0x92>
        detector->highpass_buffer[i] = detector->highpass_buffer[i - 1];
 80019b2:	7dbb      	ldrb	r3, [r7, #22]
 80019b4:	1e59      	subs	r1, r3, #1
 80019b6:	7dba      	ldrb	r2, [r7, #22]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3154      	adds	r1, #84	@ 0x54
 80019bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3254      	adds	r2, #84	@ 0x54
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 63; i > 0; i--) {
 80019c8:	7dbb      	ldrb	r3, [r7, #22]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	75bb      	strb	r3, [r7, #22]
 80019ce:	7dbb      	ldrb	r3, [r7, #22]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <bandpass_filter+0x76>
    }
    detector->highpass_buffer[0] = lowpass;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

    int32_t highpass = detector->highpass_buffer[0] - detector->highpass_buffer[63] / 64;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da00      	bge.n	80019ee <bandpass_filter+0xb2>
 80019ec:	333f      	adds	r3, #63	@ 0x3f
 80019ee:	119b      	asrs	r3, r3, #6
 80019f0:	425b      	negs	r3, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 63; i++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	e00a      	b.n	8001a12 <bandpass_filter+0xd6>
        highpass += detector->highpass_buffer[i];
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3254      	adds	r2, #84	@ 0x54
 8001a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4413      	add	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 63; i++) {
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a16:	d9f1      	bls.n	80019fc <bandpass_filter+0xc0>
    }
    highpass = highpass / 63;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <bandpass_filter+0x100>)
 8001a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a20:	441a      	add	r2, r3
 8001a22:	1152      	asrs	r2, r2, #5
 8001a24:	17db      	asrs	r3, r3, #31
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	613b      	str	r3, [r7, #16]

    return highpass;
 8001a2a:	693b      	ldr	r3, [r7, #16]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3724      	adds	r7, #36	@ 0x24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	66666667 	.word	0x66666667
 8001a3c:	82082083 	.word	0x82082083

08001a40 <early_smooth>:

static int32_t early_smooth(QRSDetector* detector, int32_t filtered)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    // Early smoothing to reduce noise before derivative
    for (uint8_t i = 4; i > 0; i--) {
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	75fb      	strb	r3, [r7, #23]
 8001a4e:	e00d      	b.n	8001a6c <early_smooth+0x2c>
        detector->early_smooth_buffer[i] = detector->early_smooth_buffer[i - 1];
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	1e59      	subs	r1, r3, #1
 8001a54:	7dfa      	ldrb	r2, [r7, #23]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3194      	adds	r1, #148	@ 0x94
 8001a5a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3294      	adds	r2, #148	@ 0x94
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 4; i > 0; i--) {
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	75fb      	strb	r3, [r7, #23]
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ee      	bne.n	8001a50 <early_smooth+0x10>
    }
    detector->early_smooth_buffer[0] = filtered;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250

    int32_t smoothed = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 5; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e00a      	b.n	8001a9a <early_smooth+0x5a>
        smoothed += detector->early_smooth_buffer[i];
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3294      	adds	r2, #148	@ 0x94
 8001a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4413      	add	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 5; i++) {
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	3301      	adds	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d9f1      	bls.n	8001a84 <early_smooth+0x44>
    }
    return smoothed / 5;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <early_smooth+0x7c>)
 8001aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa8:	1052      	asrs	r2, r2, #1
 8001aaa:	17db      	asrs	r3, r3, #31
 8001aac:	1ad3      	subs	r3, r2, r3
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	66666667 	.word	0x66666667

08001ac0 <derivative>:

static int32_t derivative(QRSDetector* detector, int32_t smoothed)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 4; i > 0; i--) {
 8001aca:	2304      	movs	r3, #4
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e010      	b.n	8001af2 <derivative+0x32>
        detector->deriv_buffer[i] = detector->deriv_buffer[i - 1];
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	7bf8      	ldrb	r0, [r7, #15]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	3398      	adds	r3, #152	@ 0x98
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	f100 0398 	add.w	r3, r0, #152	@ 0x98
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 4; i > 0; i--) {
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1eb      	bne.n	8001ad0 <derivative+0x10>
    }
    detector->deriv_buffer[0] = smoothed;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    // Simplified derivative to reduce noise amplification
    int32_t deriv = (detector->deriv_buffer[0] - detector->deriv_buffer[2]) / 2;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	0fda      	lsrs	r2, r3, #31
 8001b10:	4413      	add	r3, r2
 8001b12:	105b      	asrs	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
    return deriv;
 8001b16:	68bb      	ldr	r3, [r7, #8]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <squaring>:

static int32_t squaring(int32_t deriv)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    return deriv * deriv;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	fb03 f303 	mul.w	r3, r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <smooth_signal>:

static int32_t smooth_signal(QRSDetector* detector, int32_t squared)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b087      	sub	sp, #28
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
    // Moving average filter to smooth the squared signal
    for (uint8_t i = 3; i > 0; i--) {
 8001b48:	2303      	movs	r3, #3
 8001b4a:	75fb      	strb	r3, [r7, #23]
 8001b4c:	e00d      	b.n	8001b6a <smooth_signal+0x2c>
        detector->smooth_buffer[i] = detector->smooth_buffer[i - 1];
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	1e59      	subs	r1, r3, #1
 8001b52:	7dfa      	ldrb	r2, [r7, #23]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	319e      	adds	r1, #158	@ 0x9e
 8001b58:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	329e      	adds	r2, #158	@ 0x9e
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 3; i > 0; i--) {
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ee      	bne.n	8001b4e <smooth_signal+0x10>
    }
    detector->smooth_buffer[0] = squared;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278

    int32_t smoothed = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 4; i++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e00a      	b.n	8001b98 <smooth_signal+0x5a>
        smoothed += detector->smooth_buffer[i];
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	329e      	adds	r2, #158	@ 0x9e
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 4; i++) {
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3301      	adds	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d9f1      	bls.n	8001b82 <smooth_signal+0x44>
    }
    return smoothed / 4;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da00      	bge.n	8001ba6 <smooth_signal+0x68>
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	109b      	asrs	r3, r3, #2
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <moving_window_integration>:

static int32_t moving_window_integration(QRSDetector* detector, int32_t smoothed)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
    detector->integ_buffer[detector->integ_index] = smoothed;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 32b0 	ldrb.w	r3, [r3, #688]	@ 0x2b0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	32a2      	adds	r2, #162	@ 0xa2
 8001bca:	6839      	ldr	r1, [r7, #0]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    detector->integ_index = (detector->integ_index + 1) % QRS_WINDOW_SIZE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 32b0 	ldrb.w	r3, [r3, #688]	@ 0x2b0
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <moving_window_integration+0x84>)
 8001bda:	fb83 1302 	smull	r1, r3, r3, r2
 8001bde:	1099      	asrs	r1, r3, #2
 8001be0:	17d3      	asrs	r3, r2, #31
 8001be2:	1ac9      	subs	r1, r1, r3
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	1ad1      	subs	r1, r2, r3
 8001bee:	b2ca      	uxtb	r2, r1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0

    int32_t sum = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	72fb      	strb	r3, [r7, #11]
 8001bfe:	e00a      	b.n	8001c16 <moving_window_integration+0x62>
        sum += detector->integ_buffer[i];
 8001c00:	7afa      	ldrb	r2, [r7, #11]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	32a2      	adds	r2, #162	@ 0xa2
 8001c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	3301      	adds	r3, #1
 8001c14:	72fb      	strb	r3, [r7, #11]
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d9f1      	bls.n	8001c00 <moving_window_integration+0x4c>
    }
    return sum / QRS_WINDOW_SIZE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a06      	ldr	r2, [pc, #24]	@ (8001c38 <moving_window_integration+0x84>)
 8001c20:	fb82 1203 	smull	r1, r2, r2, r3
 8001c24:	1092      	asrs	r2, r2, #2
 8001c26:	17db      	asrs	r3, r3, #31
 8001c28:	1ad3      	subs	r3, r2, r3
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	66666667 	.word	0x66666667
 8001c3c:	00000000 	.word	0x00000000

08001c40 <update_thresholds>:

static void update_thresholds(QRSDetector* detector, int32_t peak, uint8_t is_qrs)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	71fb      	strb	r3, [r7, #7]
    if (is_qrs) {
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d028      	beq.n	8001ca6 <update_thresholds+0x66>
        detector->signal_level = 0.125 * peak + 0.875 * detector->signal_level;
 8001c54:	68b8      	ldr	r0, [r7, #8]
 8001c56:	f7fe fd97 	bl	8000788 <__aeabi_i2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001c62:	f7fe fb15 	bl	8000290 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fd87 	bl	8000788 <__aeabi_i2d>
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b42      	ldr	r3, [pc, #264]	@ (8001d88 <update_thresholds+0x148>)
 8001c80:	f7fe fb06 	bl	8000290 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f7fe fc30 	bl	80004f0 <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe fde0 	bl	800085c <__aeabi_d2iz>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
 8001ca4:	e027      	b.n	8001cf6 <update_thresholds+0xb6>
    } else {
        detector->noise_level = 0.125 * peak + 0.875 * detector->noise_level;
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f7fe fd6e 	bl	8000788 <__aeabi_i2d>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001cb4:	f7fe faec 	bl	8000290 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fd5e 	bl	8000788 <__aeabi_i2d>
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <update_thresholds+0x148>)
 8001cd2:	f7fe fadd 	bl	8000290 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	f7fe fc07 	bl	80004f0 <__adddf3>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe fdb7 	bl	800085c <__aeabi_d2iz>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    }

    detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fd43 	bl	8000788 <__aeabi_i2d>
 8001d02:	4604      	mov	r4, r0
 8001d04:	460d      	mov	r5, r1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f8d3 22b4 	ldr.w	r2, [r3, #692]	@ 0x2b4
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fd37 	bl	8000788 <__aeabi_i2d>
 8001d1a:	a317      	add	r3, pc, #92	@ (adr r3, 8001d78 <update_thresholds+0x138>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fab6 	bl	8000290 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe fbe0 	bl	80004f0 <__adddf3>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe fd90 	bl	800085c <__aeabi_d2iz>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fd1c 	bl	8000788 <__aeabi_i2d>
 8001d50:	a30b      	add	r3, pc, #44	@ (adr r3, 8001d80 <update_thresholds+0x140>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fa9b 	bl	8000290 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fd7b 	bl	800085c <__aeabi_d2iz>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdb0      	pop	{r4, r5, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	eb851eb8 	.word	0xeb851eb8
 8001d7c:	3f9eb851 	.word	0x3f9eb851
 8001d80:	33333333 	.word	0x33333333
 8001d84:	3fd33333 	.word	0x3fd33333
 8001d88:	3fec0000 	.word	0x3fec0000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <update_rr_intervals>:

static void update_rr_intervals(QRSDetector* detector, uint32_t rr)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    detector->rr_intervals[detector->rr_index] = rr;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	32b4      	adds	r2, #180	@ 0xb4
 8001da6:	6839      	ldr	r1, [r7, #0]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    detector->rr_index = (detector->rr_index + 1) % 8;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 32f0 	ldrb.w	r3, [r3, #752]	@ 0x2f0
 8001db2:	3301      	adds	r3, #1
 8001db4:	425a      	negs	r2, r3
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	f002 0207 	and.w	r2, r2, #7
 8001dbe:	bf58      	it	pl
 8001dc0:	4253      	negpl	r3, r2
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f883 22f0 	strb.w	r2, [r3, #752]	@ 0x2f0
    if (detector->rr_count < 8) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	d807      	bhi.n	8001de4 <update_rr_intervals+0x54>
        detector->rr_count++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
    }

    uint32_t sum1 = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	74fb      	strb	r3, [r7, #19]
 8001dec:	e00a      	b.n	8001e04 <update_rr_intervals+0x74>
        sum1 += detector->rr_intervals[i];
 8001dee:	7cfa      	ldrb	r2, [r7, #19]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	32b4      	adds	r2, #180	@ 0xb4
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	3301      	adds	r3, #1
 8001e02:	74fb      	strb	r3, [r7, #19]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8001e0a:	7cfa      	ldrb	r2, [r7, #19]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3ee      	bcc.n	8001dee <update_rr_intervals+0x5e>
    }
    detector->rr_average1 = sum1 / detector->rr_count;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8001e16:	461a      	mov	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4

    uint32_t sum2 = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
    uint8_t count2 = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	72bb      	strb	r3, [r7, #10]
 8001e30:	e03f      	b.n	8001eb2 <update_rr_intervals+0x122>
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 8001e32:	7aba      	ldrb	r2, [r7, #10]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	32b4      	adds	r2, #180	@ 0xb4
 8001e38:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fc90 	bl	8000768 <__aeabi_ui2d>
 8001e48:	a327      	add	r3, pc, #156	@ (adr r3, 8001ee8 <update_rr_intervals+0x158>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fa1f 	bl	8000290 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fd27 	bl	80008ac <__aeabi_d2uiz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	429c      	cmp	r4, r3
 8001e62:	d323      	bcc.n	8001eac <update_rr_intervals+0x11c>
            detector->rr_intervals[i] <= (uint32_t)(QRS_RR_LIMIT_HIGH * detector->rr_average1)) {
 8001e64:	7aba      	ldrb	r2, [r7, #10]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	32b4      	adds	r2, #180	@ 0xb4
 8001e6a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fc77 	bl	8000768 <__aeabi_ui2d>
 8001e7a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001ef0 <update_rr_intervals+0x160>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fa06 	bl	8000290 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fd0e 	bl	80008ac <__aeabi_d2uiz>
 8001e90:	4603      	mov	r3, r0
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 8001e92:	429c      	cmp	r4, r3
 8001e94:	d80a      	bhi.n	8001eac <update_rr_intervals+0x11c>
            sum2 += detector->rr_intervals[i];
 8001e96:	7aba      	ldrb	r2, [r7, #10]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	32b4      	adds	r2, #180	@ 0xb4
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
            count2++;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001eac:	7abb      	ldrb	r3, [r7, #10]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	72bb      	strb	r3, [r7, #10]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8001eb8:	7aba      	ldrb	r2, [r7, #10]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d3b9      	bcc.n	8001e32 <update_rr_intervals+0xa2>
        }
    }
    detector->rr_average2 = (count2 > 0) ? (sum2 / count2) : detector->rr_average1;
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <update_rr_intervals+0x13e>
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	e002      	b.n	8001ed4 <update_rr_intervals+0x144>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	d70a3d71 	.word	0xd70a3d71
 8001eec:	3fed70a3 	.word	0x3fed70a3
 8001ef0:	28f5c28f 	.word	0x28f5c28f
 8001ef4:	3ff28f5c 	.word	0x3ff28f5c

08001ef8 <calculate_slope>:

static int32_t calculate_slope(QRSDetector* detector)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    int32_t slope = detector->deriv_buffer[0] - detector->deriv_buffer[2];
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	60fb      	str	r3, [r7, #12]
    return (slope > 0) ? slope : -slope;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bfb8      	it	lt
 8001f16:	425b      	neglt	r3, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a0f      	ldr	r2, [pc, #60]	@ (8001f70 <HAL_MspInit+0x4c>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a08      	ldr	r2, [pc, #32]	@ (8001f70 <HAL_MspInit+0x4c>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f62:	2007      	movs	r0, #7
 8001f64:	f000 ffea 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <HAL_ADC_MspInit+0xdc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d157      	bne.n	8002046 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002054 <HAL_ADC_MspInit+0xe0>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002054 <HAL_ADC_MspInit+0xe0>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <HAL_ADC_MspInit+0xe0>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_ADC_MspInit+0xe0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a26      	ldr	r2, [pc, #152]	@ (8002054 <HAL_ADC_MspInit+0xe0>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_ADC_MspInit+0xe0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	481d      	ldr	r0, [pc, #116]	@ (8002058 <HAL_ADC_MspInit+0xe4>)
 8001fe2:	f001 fb5d 	bl	80036a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <HAL_ADC_MspInit+0xec>)
 8001fea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8002000:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002004:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8002008:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800200c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800200e:	4b13      	ldr	r3, [pc, #76]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8002010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002014:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8002018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800201c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800201e:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002024:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800202a:	480c      	ldr	r0, [pc, #48]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 800202c:	f000 ffc8 	bl	8002fc0 <HAL_DMA_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002036:	f7ff f9d7 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a07      	ldr	r2, [pc, #28]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 800203e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002040:	4a06      	ldr	r2, [pc, #24]	@ (800205c <HAL_ADC_MspInit+0xe8>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40012000 	.word	0x40012000
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000
 800205c:	20000104 	.word	0x20000104
 8002060:	40026410 	.word	0x40026410

08002064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002074:	d115      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <HAL_TIM_Base_MspInit+0x48>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a0b      	ldr	r2, [pc, #44]	@ (80020ac <HAL_TIM_Base_MspInit+0x48>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_TIM_Base_MspInit+0x48>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	201c      	movs	r0, #28
 8002098:	f000 ff5b 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800209c:	201c      	movs	r0, #28
 800209e:	f000 ff74 	bl	8002f8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	@ 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	@ (8002134 <HAL_UART_MspInit+0x84>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d12b      	bne.n	800212a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <HAL_UART_MspInit+0x88>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <HAL_UART_MspInit+0x88>)
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_UART_MspInit+0x88>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_UART_MspInit+0x88>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4a10      	ldr	r2, [pc, #64]	@ (8002138 <HAL_UART_MspInit+0x88>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_UART_MspInit+0x88>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800210a:	230c      	movs	r3, #12
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211a:	2307      	movs	r3, #7
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	@ (800213c <HAL_UART_MspInit+0x8c>)
 8002126:	f001 fabb 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	@ 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40004400 	.word	0x40004400
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000

08002140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <NMI_Handler+0x4>

08002148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214c:	bf00      	nop
 800214e:	e7fd      	b.n	800214c <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <MemManage_Handler+0x4>

08002158 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <BusFault_Handler+0x4>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <UsageFault_Handler+0x4>

08002168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002196:	f000 f921 	bl	80023dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  // Sử dụng trực tiếp giá trị ADC thô (b�? qua bộ l�?c trung bình trượt)
  uint16_t raw_value = (uint16_t)ADC_value;
 80021a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <TIM2_IRQHandler+0x84>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	80fb      	strh	r3, [r7, #6]

  // Phát hiện QRS
  uint8_t is_qrs = QRSDetector_Process(&qrs_detector, raw_value);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4619      	mov	r1, r3
 80021b0:	481d      	ldr	r0, [pc, #116]	@ (8002228 <TIM2_IRQHandler+0x88>)
 80021b2:	f7ff f9c5 	bl	8001540 <QRSDetector_Process>
 80021b6:	4603      	mov	r3, r0
 80021b8:	717b      	strb	r3, [r7, #5]

  // Lưu c�? QRS vào mảng
  if (qrs_flag_index < 64) {
 80021ba:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <TIM2_IRQHandler+0x8c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c0:	d80b      	bhi.n	80021da <TIM2_IRQHandler+0x3a>
    qrs_flags[qrs_flag_index] = is_qrs;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <TIM2_IRQHandler+0x8c>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <TIM2_IRQHandler+0x90>)
 80021ca:	797b      	ldrb	r3, [r7, #5]
 80021cc:	5453      	strb	r3, [r2, r1]
    qrs_flag_index++;
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <TIM2_IRQHandler+0x8c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <TIM2_IRQHandler+0x8c>)
 80021d8:	701a      	strb	r2, [r3, #0]
  }

  // Ghi giá trị ADC thô vào Circular Buffer (giá trị 16-bit, chia thành 2 byte)
  uint8_t high_byte = (raw_value >> 8) & 0xFF; // Byte cao
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	b29b      	uxth	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	713b      	strb	r3, [r7, #4]
  uint8_t low_byte = raw_value & 0xFF;         // Byte thấp
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	70fb      	strb	r3, [r7, #3]
  cb_write(&adc_buffer, &high_byte, 1);
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2201      	movs	r2, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	4810      	ldr	r0, [pc, #64]	@ (8002234 <TIM2_IRQHandler+0x94>)
 80021f2:	f7fe fd64 	bl	8000cbe <cb_write>
  cb_write(&adc_buffer, &low_byte, 1);
 80021f6:	1cfb      	adds	r3, r7, #3
 80021f8:	2201      	movs	r2, #1
 80021fa:	4619      	mov	r1, r3
 80021fc:	480d      	ldr	r0, [pc, #52]	@ (8002234 <TIM2_IRQHandler+0x94>)
 80021fe:	f7fe fd5e 	bl	8000cbe <cb_write>

  // Kiểm tra số lượng dữ liệu trong bộ đệm
  if (cb_data_count(&adc_buffer) >= 128) // 128 byte = 64 mẫu (mỗi mẫu 2 byte)
 8002202:	480c      	ldr	r0, [pc, #48]	@ (8002234 <TIM2_IRQHandler+0x94>)
 8002204:	f7fe fda9 	bl	8000d5a <cb_data_count>
 8002208:	4603      	mov	r3, r0
 800220a:	2b7f      	cmp	r3, #127	@ 0x7f
 800220c:	d902      	bls.n	8002214 <TIM2_IRQHandler+0x74>
  {
    send_flag = 1; // �?ặt c�? để gửi dữ liệu trong main
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <TIM2_IRQHandler+0x98>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002214:	4809      	ldr	r0, [pc, #36]	@ (800223c <TIM2_IRQHandler+0x9c>)
 8002216:	f002 f911 	bl	800443c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000450 	.word	0x20000450
 8002228:	20000674 	.word	0x20000674
 800222c:	200000b8 	.word	0x200000b8
 8002230:	20000078 	.word	0x20000078
 8002234:	2000045c 	.word	0x2000045c
 8002238:	2000044c 	.word	0x2000044c
 800223c:	20000164 	.word	0x20000164

08002240 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <DMA2_Stream0_IRQHandler+0x10>)
 8002246:	f000 ffc1 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000104 	.word	0x20000104

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f003 f8a0 	bl	80053c8 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20020000 	.word	0x20020000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	20000978 	.word	0x20000978
 80022bc:	20000ac8 	.word	0x20000ac8

080022c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	@ (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800231c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022e8:	f7ff ffea 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ec:	480c      	ldr	r0, [pc, #48]	@ (8002320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ee:	490d      	ldr	r1, [pc, #52]	@ (8002324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002304:	4c0a      	ldr	r4, [pc, #40]	@ (8002330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002312:	f003 f85f 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7fe fdf3 	bl	8000f00 <main>
  bx  lr    
 800231a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800231c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002328:	08005dc0 	.word	0x08005dc0
  ldr r2, =_sbss
 800232c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002330:	20000ac8 	.word	0x20000ac8

08002334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <HAL_Init+0x40>)
 8002342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <HAL_Init+0x40>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_Init+0x40>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 fdeb 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002366:	2000      	movs	r0, #0
 8002368:	f000 f808 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236c:	f7ff fdda 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_InitTick+0x54>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_InitTick+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002392:	fbb3 f3f1 	udiv	r3, r3, r1
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fe03 	bl	8002fa6 <HAL_SYSTICK_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00e      	b.n	80023c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b0f      	cmp	r3, #15
 80023ae:	d80a      	bhi.n	80023c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f000 fdcb 	bl	8002f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023bc:	4a06      	ldr	r2, [pc, #24]	@ (80023d8 <HAL_InitTick+0x5c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000008 	.word	0x20000008
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_IncTick+0x20>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_IncTick+0x24>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_IncTick+0x24>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000008 	.word	0x20000008
 8002400:	2000097c 	.word	0x2000097c

08002404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_GetTick+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000097c 	.word	0x2000097c

0800241c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e033      	b.n	800249a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fd9a 	bl	8001f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002462:	f023 0302 	bic.w	r3, r3, #2
 8002466:	f043 0202 	orr.w	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fb16 	bl	8002aa0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f023 0303 	bic.w	r3, r3, #3
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40
 800248a:	e001      	b.n	8002490 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Start_IT+0x1a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0a1      	b.n	8002602 <HAL_ADC_Start_IT+0x15e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d018      	beq.n	8002506 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002610 <HAL_ADC_Start_IT+0x16c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002614 <HAL_ADC_Start_IT+0x170>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9a      	lsrs	r2, r3, #18
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024f8:	e002      	b.n	8002500 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d169      	bne.n	80025e8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800253e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002552:	d106      	bne.n	8002562 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002558:	f023 0206 	bic.w	r2, r3, #6
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002560:	e002      	b.n	8002568 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002570:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <HAL_ADC_Start_IT+0x174>)
 8002572:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800257c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800258c:	f043 0320 	orr.w	r3, r3, #32
 8002590:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d129      	bne.n	8002600 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e020      	b.n	8002600 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a16      	ldr	r2, [pc, #88]	@ (800261c <HAL_ADC_Start_IT+0x178>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d11b      	bne.n	8002600 <HAL_ADC_Start_IT+0x15c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d114      	bne.n	8002600 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	e00b      	b.n	8002600 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000000 	.word	0x20000000
 8002614:	431bde83 	.word	0x431bde83
 8002618:	40012300 	.word	0x40012300
 800261c:	40012000 	.word	0x40012000

08002620 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADC_Start_DMA+0x1e>
 800263a:	2302      	movs	r3, #2
 800263c:	e0ce      	b.n	80027dc <HAL_ADC_Start_DMA+0x1bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d018      	beq.n	8002686 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002664:	4b5f      	ldr	r3, [pc, #380]	@ (80027e4 <HAL_ADC_Start_DMA+0x1c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a5f      	ldr	r2, [pc, #380]	@ (80027e8 <HAL_ADC_Start_DMA+0x1c8>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9a      	lsrs	r2, r3, #18
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002678:	e002      	b.n	8002680 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	3b01      	subs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f9      	bne.n	800267a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002694:	d107      	bne.n	80026a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026a4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	f040 8086 	bne.w	80027c2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f023 0206 	bic.w	r2, r3, #6
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44
 8002702:	e002      	b.n	800270a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002712:	4b36      	ldr	r3, [pc, #216]	@ (80027ec <HAL_ADC_Start_DMA+0x1cc>)
 8002714:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	4a35      	ldr	r2, [pc, #212]	@ (80027f0 <HAL_ADC_Start_DMA+0x1d0>)
 800271c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002722:	4a34      	ldr	r2, [pc, #208]	@ (80027f4 <HAL_ADC_Start_DMA+0x1d4>)
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272a:	4a33      	ldr	r2, [pc, #204]	@ (80027f8 <HAL_ADC_Start_DMA+0x1d8>)
 800272c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002736:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002746:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002756:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	334c      	adds	r3, #76	@ 0x4c
 8002762:	4619      	mov	r1, r3
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f000 fcd8 	bl	800311c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10f      	bne.n	8002798 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d129      	bne.n	80027da <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	e020      	b.n	80027da <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a17      	ldr	r2, [pc, #92]	@ (80027fc <HAL_ADC_Start_DMA+0x1dc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d11b      	bne.n	80027da <HAL_ADC_Start_DMA+0x1ba>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d114      	bne.n	80027da <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00b      	b.n	80027da <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000000 	.word	0x20000000
 80027e8:	431bde83 	.word	0x431bde83
 80027ec:	40012300 	.word	0x40012300
 80027f0:	08002c99 	.word	0x08002c99
 80027f4:	08002d53 	.word	0x08002d53
 80027f8:	08002d6f 	.word	0x08002d6f
 80027fc:	40012000 	.word	0x40012000

08002800 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1c>
 8002854:	2302      	movs	r3, #2
 8002856:	e113      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x244>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b09      	cmp	r3, #9
 8002866:	d925      	bls.n	80028b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68d9      	ldr	r1, [r3, #12]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	3b1e      	subs	r3, #30
 800287e:	2207      	movs	r2, #7
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43da      	mvns	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	400a      	ands	r2, r1
 800288c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68d9      	ldr	r1, [r3, #12]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	4603      	mov	r3, r0
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4403      	add	r3, r0
 80028a6:	3b1e      	subs	r3, #30
 80028a8:	409a      	lsls	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	e022      	b.n	80028fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	2207      	movs	r2, #7
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	400a      	ands	r2, r1
 80028d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6919      	ldr	r1, [r3, #16]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4403      	add	r3, r0
 80028f0:	409a      	lsls	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d824      	bhi.n	800294c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b05      	subs	r3, #5
 8002914:	221f      	movs	r2, #31
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	400a      	ands	r2, r1
 8002922:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b05      	subs	r3, #5
 800293e:	fa00 f203 	lsl.w	r2, r0, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	635a      	str	r2, [r3, #52]	@ 0x34
 800294a:	e04c      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b0c      	cmp	r3, #12
 8002952:	d824      	bhi.n	800299e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	3b23      	subs	r3, #35	@ 0x23
 8002966:	221f      	movs	r2, #31
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43da      	mvns	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	400a      	ands	r2, r1
 8002974:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	3b23      	subs	r3, #35	@ 0x23
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
 800299c:	e023      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	3b41      	subs	r3, #65	@ 0x41
 80029b0:	221f      	movs	r2, #31
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	400a      	ands	r2, r1
 80029be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	3b41      	subs	r3, #65	@ 0x41
 80029da:	fa00 f203 	lsl.w	r2, r0, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e6:	4b29      	ldr	r3, [pc, #164]	@ (8002a8c <HAL_ADC_ConfigChannel+0x250>)
 80029e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <HAL_ADC_ConfigChannel+0x254>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10f      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1d8>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d10b      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <HAL_ADC_ConfigChannel+0x254>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d12b      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x23a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <HAL_ADC_ConfigChannel+0x258>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0x1f4>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b11      	cmp	r3, #17
 8002a2e:	d122      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_ADC_ConfigChannel+0x258>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d111      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_ADC_ConfigChannel+0x25c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a11      	ldr	r2, [pc, #68]	@ (8002a9c <HAL_ADC_ConfigChannel+0x260>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	0c9a      	lsrs	r2, r3, #18
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40012300 	.word	0x40012300
 8002a90:	40012000 	.word	0x40012000
 8002a94:	10000012 	.word	0x10000012
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	431bde83 	.word	0x431bde83

08002aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa8:	4b79      	ldr	r3, [pc, #484]	@ (8002c90 <ADC_Init+0x1f0>)
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	021a      	lsls	r2, r3, #8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	4a58      	ldr	r2, [pc, #352]	@ (8002c94 <ADC_Init+0x1f4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6899      	ldr	r1, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	e00f      	b.n	8002b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b9c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0202 	bic.w	r2, r2, #2
 8002bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e1b      	ldrb	r3, [r3, #24]
 8002bb8:	005a      	lsls	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bda:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	035a      	lsls	r2, r3, #13
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	e007      	b.n	8002c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	051a      	lsls	r2, r3, #20
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c56:	025a      	lsls	r2, r3, #9
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	029a      	lsls	r2, r3, #10
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40012300 	.word	0x40012300
 8002c94:	0f000001 	.word	0x0f000001

08002c98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d13c      	bne.n	8002d2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12b      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d127      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d119      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0220 	bic.w	r2, r2, #32
 8002cfe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff fd6b 	bl	8002800 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d2a:	e00e      	b.n	8002d4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fd75 	bl	8002828 <HAL_ADC_ErrorCallback>
}
 8002d3e:	e004      	b.n	8002d4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff fd57 	bl	8002814 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fd4a 	bl	8002828 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	@ (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff3e 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff8e 	bl	8002e90 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5d 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff31 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffa2 	bl	8002ef8 <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fa1a 	bl	8002404 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e099      	b.n	8003110 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ffc:	e00f      	b.n	800301e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffe:	f7ff fa01 	bl	8002404 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b05      	cmp	r3, #5
 800300a:	d908      	bls.n	800301e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2203      	movs	r2, #3
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e078      	b.n	8003110 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e8      	bne.n	8002ffe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_DMA_Init+0x158>)
 8003038:	4013      	ands	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	4313      	orrs	r3, r2
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d117      	bne.n	80030e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa6f 	bl	80035a8 <DMA_CheckFifoParam>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2240      	movs	r2, #64	@ 0x40
 80030d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030de:	2301      	movs	r3, #1
 80030e0:	e016      	b.n	8003110 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa26 	bl	800353c <DMA_CalcBaseAndBitshift>
 80030f0:	4603      	mov	r3, r0
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	223f      	movs	r2, #63	@ 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	f010803f 	.word	0xf010803f

0800311c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_DMA_Start_IT+0x26>
 800313e:	2302      	movs	r3, #2
 8003140:	e040      	b.n	80031c4 <HAL_DMA_Start_IT+0xa8>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d12f      	bne.n	80031b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2202      	movs	r2, #2
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f9b8 	bl	80034e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	223f      	movs	r2, #63	@ 0x3f
 8003176:	409a      	lsls	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0216 	orr.w	r2, r2, #22
 800318a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0208 	orr.w	r2, r2, #8
 80031a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e005      	b.n	80031c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <HAL_DMA_IRQHandler+0x248>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003418 <HAL_DMA_IRQHandler+0x24c>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	2208      	movs	r2, #8
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01a      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	2201      	movs	r2, #1
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2204      	movs	r2, #4
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d012      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2204      	movs	r2, #4
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2210      	movs	r2, #16
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d043      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03c      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2210      	movs	r2, #16
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d024      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
 80032fa:	e01f      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e016      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0208 	bic.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	2220      	movs	r2, #32
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 808f 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8087 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	2220      	movs	r2, #32
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b05      	cmp	r3, #5
 8003374:	d136      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003394:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x1da>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	223f      	movs	r2, #63	@ 0x3f
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07e      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
        }
        return;
 80033e2:	e079      	b.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	2b00      	cmp	r3, #0
 8003406:	d031      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
 8003410:	e02c      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000
 8003418:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	e01e      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	2b00      	cmp	r3, #0
 8003472:	d032      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d022      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2205      	movs	r2, #5
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3301      	adds	r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d307      	bcc.n	80034b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f2      	bne.n	8003498 <HAL_DMA_IRQHandler+0x2cc>
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
 80034d6:	e000      	b.n	80034da <HAL_DMA_IRQHandler+0x30e>
        return;
 80034d8:	bf00      	nop
    }
  }
}
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d108      	bne.n	8003520 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800351e:	e007      	b.n	8003530 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	3b10      	subs	r3, #16
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <DMA_CalcBaseAndBitshift+0x64>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d909      	bls.n	800357e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	659a      	str	r2, [r3, #88]	@ 0x58
 800357c:	e007      	b.n	800358e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	aaaaaaab 	.word	0xaaaaaaab
 80035a4:	08005d74 	.word	0x08005d74

080035a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11f      	bne.n	8003602 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d856      	bhi.n	8003676 <DMA_CheckFifoParam+0xce>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <DMA_CheckFifoParam+0x28>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035f3 	.word	0x080035f3
 80035d8:	080035e1 	.word	0x080035e1
 80035dc:	08003677 	.word	0x08003677
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d046      	beq.n	800367a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f0:	e043      	b.n	800367a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035fa:	d140      	bne.n	800367e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e03d      	b.n	800367e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800360a:	d121      	bne.n	8003650 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d837      	bhi.n	8003682 <DMA_CheckFifoParam+0xda>
 8003612:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <DMA_CheckFifoParam+0x70>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	08003629 	.word	0x08003629
 800361c:	0800362f 	.word	0x0800362f
 8003620:	08003629 	.word	0x08003629
 8003624:	08003641 	.word	0x08003641
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      break;
 800362c:	e030      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d025      	beq.n	8003686 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363e:	e022      	b.n	8003686 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003648:	d11f      	bne.n	800368a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800364e:	e01c      	b.n	800368a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d903      	bls.n	800365e <DMA_CheckFifoParam+0xb6>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d003      	beq.n	8003664 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800365c:	e018      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      break;
 8003662:	e015      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e00b      	b.n	800368e <DMA_CheckFifoParam+0xe6>
      break;
 8003676:	bf00      	nop
 8003678:	e00a      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800367a:	bf00      	nop
 800367c:	e008      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800367e:	bf00      	nop
 8003680:	e006      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 8003682:	bf00      	nop
 8003684:	e004      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 8003686:	bf00      	nop
 8003688:	e002      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;   
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
    }
  } 
  
  return status; 
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	@ 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e159      	b.n	8003970 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	f040 8148 	bne.w	800396a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d005      	beq.n	80036f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d130      	bne.n	8003754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 0201 	and.w	r2, r3, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b03      	cmp	r3, #3
 800375e:	d017      	beq.n	8003790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d123      	bne.n	80037e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	08da      	lsrs	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3208      	adds	r2, #8
 80037a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	220f      	movs	r2, #15
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	08da      	lsrs	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3208      	adds	r2, #8
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2203      	movs	r2, #3
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a2 	beq.w	800396a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b57      	ldr	r3, [pc, #348]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	4a56      	ldr	r2, [pc, #344]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 8003830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003834:	6453      	str	r3, [r2, #68]	@ 0x44
 8003836:	4b54      	ldr	r3, [pc, #336]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003842:	4a52      	ldr	r2, [pc, #328]	@ (800398c <HAL_GPIO_Init+0x2ec>)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	220f      	movs	r2, #15
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a49      	ldr	r2, [pc, #292]	@ (8003990 <HAL_GPIO_Init+0x2f0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d019      	beq.n	80038a2 <HAL_GPIO_Init+0x202>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a48      	ldr	r2, [pc, #288]	@ (8003994 <HAL_GPIO_Init+0x2f4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_Init+0x1fe>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a47      	ldr	r2, [pc, #284]	@ (8003998 <HAL_GPIO_Init+0x2f8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00d      	beq.n	800389a <HAL_GPIO_Init+0x1fa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a46      	ldr	r2, [pc, #280]	@ (800399c <HAL_GPIO_Init+0x2fc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_Init+0x1f6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a45      	ldr	r2, [pc, #276]	@ (80039a0 <HAL_GPIO_Init+0x300>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_GPIO_Init+0x1f2>
 800388e:	2304      	movs	r3, #4
 8003890:	e008      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 8003892:	2307      	movs	r3, #7
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 80038a2:	2300      	movs	r3, #0
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f002 0203 	and.w	r2, r2, #3
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	4093      	lsls	r3, r2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b4:	4935      	ldr	r1, [pc, #212]	@ (800398c <HAL_GPIO_Init+0x2ec>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c2:	4b38      	ldr	r3, [pc, #224]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e6:	4a2f      	ldr	r2, [pc, #188]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ec:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393a:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003940:	4b18      	ldr	r3, [pc, #96]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003964:	4a0f      	ldr	r2, [pc, #60]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	f67f aea2 	bls.w	80036bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	@ 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	40013800 	.word	0x40013800
 8003990:	40020000 	.word	0x40020000
 8003994:	40020400 	.word	0x40020400
 8003998:	40020800 	.word	0x40020800
 800399c:	40020c00 	.word	0x40020c00
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40013c00 	.word	0x40013c00

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e267      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d075      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039c6:	4b88      	ldr	r3, [pc, #544]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d00c      	beq.n	80039ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b85      	ldr	r3, [pc, #532]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d112      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b82      	ldr	r3, [pc, #520]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	4b7e      	ldr	r3, [pc, #504]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05b      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x108>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d157      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e242      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x74>
 8003a0e:	4b76      	ldr	r3, [pc, #472]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a75      	ldr	r2, [pc, #468]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e01d      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x98>
 8003a26:	4b70      	ldr	r3, [pc, #448]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b6d      	ldr	r3, [pc, #436]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6c      	ldr	r2, [pc, #432]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a40:	4b69      	ldr	r3, [pc, #420]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a68      	ldr	r2, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b66      	ldr	r3, [pc, #408]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a65      	ldr	r2, [pc, #404]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fcd0 	bl	8002404 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe fccc 	bl	8002404 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	@ 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e207      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0xc0>
 8003a86:	e014      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe fcbc 	bl	8002404 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe fcb8 	bl	8002404 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	@ 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1f3      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	4b51      	ldr	r3, [pc, #324]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0xe8>
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d063      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003abe:	4b4a      	ldr	r3, [pc, #296]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d11c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b44      	ldr	r3, [pc, #272]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d116      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	4b41      	ldr	r3, [pc, #260]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1c7      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	4b3b      	ldr	r3, [pc, #236]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4937      	ldr	r1, [pc, #220]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	e03a      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b18:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_RCC_OscConfig+0x244>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fc71 	bl	8002404 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fe fc6d 	bl	8002404 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e1a8      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	4b2b      	ldr	r3, [pc, #172]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	4b28      	ldr	r3, [pc, #160]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4925      	ldr	r1, [pc, #148]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5a:	4b24      	ldr	r3, [pc, #144]	@ (8003bec <HAL_RCC_OscConfig+0x244>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe fc50 	bl	8002404 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b68:	f7fe fc4c 	bl	8002404 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e187      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d036      	beq.n	8003c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <HAL_RCC_OscConfig+0x248>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fc30 	bl	8002404 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe fc2c 	bl	8002404 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e167      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x200>
 8003bc6:	e01b      	b.n	8003c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCC_OscConfig+0x248>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bce:	f7fe fc19 	bl	8002404 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e00e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fc15 	bl	8002404 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d907      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e150      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	42470000 	.word	0x42470000
 8003bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	4b88      	ldr	r3, [pc, #544]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ea      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8097 	beq.w	8003d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c12:	4b81      	ldr	r3, [pc, #516]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b7d      	ldr	r3, [pc, #500]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	4a7c      	ldr	r2, [pc, #496]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b77      	ldr	r3, [pc, #476]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d118      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4a:	4b74      	ldr	r3, [pc, #464]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a73      	ldr	r2, [pc, #460]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fe fbd5 	bl	8002404 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe fbd1 	bl	8002404 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e10c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	4b6a      	ldr	r3, [pc, #424]	@ (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x2ea>
 8003c84:	4b64      	ldr	r3, [pc, #400]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c88:	4a63      	ldr	r2, [pc, #396]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c90:	e01c      	b.n	8003ccc <HAL_RCC_OscConfig+0x324>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x30c>
 8003c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a5b      	ldr	r2, [pc, #364]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0x324>
 8003cb4:	4b58      	ldr	r3, [pc, #352]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb8:	4a57      	ldr	r2, [pc, #348]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc0:	4b55      	ldr	r3, [pc, #340]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a54      	ldr	r2, [pc, #336]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f023 0304 	bic.w	r3, r3, #4
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fe fb96 	bl	8002404 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fb92 	bl	8002404 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0cb      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf2:	4b49      	ldr	r3, [pc, #292]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ee      	beq.n	8003cdc <HAL_RCC_OscConfig+0x334>
 8003cfe:	e014      	b.n	8003d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fe fb80 	bl	8002404 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fe fb7c 	bl	8002404 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0b5      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ee      	bne.n	8003d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d30:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	4a38      	ldr	r2, [pc, #224]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a1 	beq.w	8003e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d46:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d05c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d141      	bne.n	8003dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b31      	ldr	r3, [pc, #196]	@ (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe fb50 	bl	8002404 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe fb4c 	bl	8002404 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e087      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	491b      	ldr	r1, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe fb25 	bl	8002404 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe fb21 	bl	8002404 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e05c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd0:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x416>
 8003ddc:	e054      	b.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b10      	ldr	r3, [pc, #64]	@ (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe fb0e 	bl	8002404 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fb0a 	bl	8002404 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e045      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x444>
 8003e0a:	e03d      	b.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e038      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
 8003e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e24:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <HAL_RCC_OscConfig+0x4ec>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d028      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d121      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d111      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0cc      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b68      	ldr	r3, [pc, #416]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d90c      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b65      	ldr	r3, [pc, #404]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b8      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eec:	4b59      	ldr	r3, [pc, #356]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a58      	ldr	r2, [pc, #352]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f04:	4b53      	ldr	r3, [pc, #332]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a52      	ldr	r2, [pc, #328]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f10:	4b50      	ldr	r3, [pc, #320]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	494d      	ldr	r1, [pc, #308]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d044      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b47      	ldr	r3, [pc, #284]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d119      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b3f      	ldr	r3, [pc, #252]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e06f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e067      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b37      	ldr	r3, [pc, #220]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4934      	ldr	r1, [pc, #208]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fe fa3c 	bl	8002404 <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fe fa38 	bl	8002404 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e04f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b25      	ldr	r3, [pc, #148]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d20c      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b22      	ldr	r3, [pc, #136]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e032      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4916      	ldr	r1, [pc, #88]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400a:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	490e      	ldr	r1, [pc, #56]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800401e:	f000 f821 	bl	8004064 <HAL_RCC_GetSysClockFreq>
 8004022:	4602      	mov	r2, r0
 8004024:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	490a      	ldr	r1, [pc, #40]	@ (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a09      	ldr	r2, [pc, #36]	@ (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe f99c 	bl	800237c <HAL_InitTick>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023c00 	.word	0x40023c00
 8004054:	40023800 	.word	0x40023800
 8004058:	08005d5c 	.word	0x08005d5c
 800405c:	20000000 	.word	0x20000000
 8004060:	20000004 	.word	0x20000004

08004064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004068:	b094      	sub	sp, #80	@ 0x50
 800406a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800407c:	4b79      	ldr	r3, [pc, #484]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b08      	cmp	r3, #8
 8004086:	d00d      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004088:	2b08      	cmp	r3, #8
 800408a:	f200 80e1 	bhi.w	8004250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x34>
 8004092:	2b04      	cmp	r3, #4
 8004094:	d003      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0x3a>
 8004096:	e0db      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b73      	ldr	r3, [pc, #460]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x204>)
 800409a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800409c:	e0db      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409e:	4b73      	ldr	r3, [pc, #460]	@ (800426c <HAL_RCC_GetSysClockFreq+0x208>)
 80040a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040a2:	e0d8      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d063      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x200>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	099b      	lsrs	r3, r3, #6
 80040c0:	2200      	movs	r2, #0
 80040c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ce:	2300      	movs	r3, #0
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040d6:	4622      	mov	r2, r4
 80040d8:	462b      	mov	r3, r5
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	0159      	lsls	r1, r3, #5
 80040e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e8:	0150      	lsls	r0, r2, #5
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4621      	mov	r1, r4
 80040f0:	1a51      	subs	r1, r2, r1
 80040f2:	6139      	str	r1, [r7, #16]
 80040f4:	4629      	mov	r1, r5
 80040f6:	eb63 0301 	sbc.w	r3, r3, r1
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004108:	4659      	mov	r1, fp
 800410a:	018b      	lsls	r3, r1, #6
 800410c:	4651      	mov	r1, sl
 800410e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004112:	4651      	mov	r1, sl
 8004114:	018a      	lsls	r2, r1, #6
 8004116:	4651      	mov	r1, sl
 8004118:	ebb2 0801 	subs.w	r8, r2, r1
 800411c:	4659      	mov	r1, fp
 800411e:	eb63 0901 	sbc.w	r9, r3, r1
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800412e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004136:	4690      	mov	r8, r2
 8004138:	4699      	mov	r9, r3
 800413a:	4623      	mov	r3, r4
 800413c:	eb18 0303 	adds.w	r3, r8, r3
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	462b      	mov	r3, r5
 8004144:	eb49 0303 	adc.w	r3, r9, r3
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004156:	4629      	mov	r1, r5
 8004158:	024b      	lsls	r3, r1, #9
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004160:	4621      	mov	r1, r4
 8004162:	024a      	lsls	r2, r1, #9
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800416a:	2200      	movs	r2, #0
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004174:	f7fc fbba 	bl	80008ec <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	e058      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004182:	4b38      	ldr	r3, [pc, #224]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x200>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	099b      	lsrs	r3, r3, #6
 8004188:	2200      	movs	r2, #0
 800418a:	4618      	mov	r0, r3
 800418c:	4611      	mov	r1, r2
 800418e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	2300      	movs	r3, #0
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
 8004198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	f04f 0000 	mov.w	r0, #0
 80041a4:	f04f 0100 	mov.w	r1, #0
 80041a8:	0159      	lsls	r1, r3, #5
 80041aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ae:	0150      	lsls	r0, r2, #5
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4641      	mov	r1, r8
 80041b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ba:	4649      	mov	r1, r9
 80041bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041d4:	ebb2 040a 	subs.w	r4, r2, sl
 80041d8:	eb63 050b 	sbc.w	r5, r3, fp
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	00eb      	lsls	r3, r5, #3
 80041e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ea:	00e2      	lsls	r2, r4, #3
 80041ec:	4614      	mov	r4, r2
 80041ee:	461d      	mov	r5, r3
 80041f0:	4643      	mov	r3, r8
 80041f2:	18e3      	adds	r3, r4, r3
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	464b      	mov	r3, r9
 80041f8:	eb45 0303 	adc.w	r3, r5, r3
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800420a:	4629      	mov	r1, r5
 800420c:	028b      	lsls	r3, r1, #10
 800420e:	4621      	mov	r1, r4
 8004210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004214:	4621      	mov	r1, r4
 8004216:	028a      	lsls	r2, r1, #10
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800421e:	2200      	movs	r2, #0
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	61fa      	str	r2, [r7, #28]
 8004224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004228:	f7fc fb60 	bl	80008ec <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4613      	mov	r3, r2
 8004232:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x200>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	3301      	adds	r3, #1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800424e:	e002      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x204>)
 8004252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004258:	4618      	mov	r0, r3
 800425a:	3750      	adds	r7, #80	@ 0x50
 800425c:	46bd      	mov	sp, r7
 800425e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	00f42400 	.word	0x00f42400
 800426c:	007a1200 	.word	0x007a1200

08004270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004274:	4b03      	ldr	r3, [pc, #12]	@ (8004284 <HAL_RCC_GetHCLKFreq+0x14>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000000 	.word	0x20000000

08004288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800428c:	f7ff fff0 	bl	8004270 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	0a9b      	lsrs	r3, r3, #10
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4903      	ldr	r1, [pc, #12]	@ (80042ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40023800 	.word	0x40023800
 80042ac:	08005d6c 	.word	0x08005d6c

080042b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042b4:	f7ff ffdc 	bl	8004270 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0b5b      	lsrs	r3, r3, #13
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	08005d6c 	.word	0x08005d6c

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e041      	b.n	800436e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd feb0 	bl	8002064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 fa7a 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e044      	b.n	800441a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <HAL_TIM_Base_Start_IT+0xb0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ba:	d013      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <HAL_TIM_Base_Start_IT+0xb4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <HAL_TIM_Base_Start_IT+0xb8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	@ (8004434 <HAL_TIM_Base_Start_IT+0xbc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a16      	ldr	r2, [pc, #88]	@ (8004438 <HAL_TIM_Base_Start_IT+0xc0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d111      	bne.n	8004408 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d010      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	e007      	b.n	8004418 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40014000 	.word	0x40014000

0800443c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0202 	mvn.w	r2, #2
 8004470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9a3 	bl	80047d2 <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f995 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f9a6 	bl	80047e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d020      	beq.n	80044ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0204 	mvn.w	r2, #4
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f97d 	bl	80047d2 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f96f 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f980 	bl	80047e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d020      	beq.n	8004538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0208 	mvn.w	r2, #8
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2204      	movs	r2, #4
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f957 	bl	80047d2 <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f949 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f95a 	bl	80047e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d020      	beq.n	8004584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f931 	bl	80047d2 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f923 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f934 	bl	80047e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0201 	mvn.w	r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f901 	bl	80047aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fac0 	bl	8004b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f905 	bl	80047fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00c      	beq.n	8004614 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0220 	mvn.w	r2, #32
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa92 	bl	8004b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIM_ConfigClockSource+0x1c>
 8004634:	2302      	movs	r3, #2
 8004636:	e0b4      	b.n	80047a2 <HAL_TIM_ConfigClockSource+0x186>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800465e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004670:	d03e      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004676:	f200 8087 	bhi.w	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467e:	f000 8086 	beq.w	800478e <HAL_TIM_ConfigClockSource+0x172>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004686:	d87f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b70      	cmp	r3, #112	@ 0x70
 800468a:	d01a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xa6>
 800468c:	2b70      	cmp	r3, #112	@ 0x70
 800468e:	d87b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b60      	cmp	r3, #96	@ 0x60
 8004692:	d050      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x11a>
 8004694:	2b60      	cmp	r3, #96	@ 0x60
 8004696:	d877      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b50      	cmp	r3, #80	@ 0x50
 800469a:	d03c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xfa>
 800469c:	2b50      	cmp	r3, #80	@ 0x50
 800469e:	d873      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	d058      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x13a>
 80046a4:	2b40      	cmp	r3, #64	@ 0x40
 80046a6:	d86f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b30      	cmp	r3, #48	@ 0x30
 80046aa:	d064      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046ac:	2b30      	cmp	r3, #48	@ 0x30
 80046ae:	d86b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d060      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d867      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d05a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	e062      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	f000 f9a3 	bl	8004a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	609a      	str	r2, [r3, #8]
      break;
 80046ee:	e04f      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	f000 f98c 	bl	8004a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e03c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f900 	bl	8004928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2150      	movs	r1, #80	@ 0x50
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f959 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 8004734:	e02c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f91f 	bl	8004986 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2160      	movs	r1, #96	@ 0x60
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f949 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 8004754:	e01c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f8e0 	bl	8004928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	@ 0x40
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f939 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 8004774:	e00c      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 f930 	bl	80049e6 <TIM_ITRx_SetConfig>
      break;
 8004786:	e003      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
      break;
 800478c:	e000      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800478e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	@ (800490c <TIM_Base_SetConfig+0xfc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a37      	ldr	r2, [pc, #220]	@ (8004910 <TIM_Base_SetConfig+0x100>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a36      	ldr	r2, [pc, #216]	@ (8004914 <TIM_Base_SetConfig+0x104>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a35      	ldr	r2, [pc, #212]	@ (8004918 <TIM_Base_SetConfig+0x108>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2b      	ldr	r2, [pc, #172]	@ (800490c <TIM_Base_SetConfig+0xfc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	@ (8004910 <TIM_Base_SetConfig+0x100>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	@ (8004914 <TIM_Base_SetConfig+0x104>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	@ (8004918 <TIM_Base_SetConfig+0x108>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <TIM_Base_SetConfig+0x10c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a24      	ldr	r2, [pc, #144]	@ (8004920 <TIM_Base_SetConfig+0x110>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a23      	ldr	r2, [pc, #140]	@ (8004924 <TIM_Base_SetConfig+0x114>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0e      	ldr	r2, [pc, #56]	@ (800490c <TIM_Base_SetConfig+0xfc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d103      	bne.n	80048e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d105      	bne.n	80048fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]
  }
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800

08004928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 030a 	bic.w	r3, r3, #10
 8004964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f023 0210 	bic.w	r2, r3, #16
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	031b      	lsls	r3, r3, #12
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f043 0307 	orr.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	021a      	lsls	r2, r3, #8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e050      	b.n	8004b16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac0:	d013      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	@ (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a13      	ldr	r2, [pc, #76]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10c      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40010000 	.word	0x40010000
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800
 8004b30:	40000c00 	.word	0x40000c00
 8004b34:	40014000 	.word	0x40014000

08004b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e042      	b.n	8004bf8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fd fa92 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	@ 0x24
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f973 	bl	8004e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	@ 0x28
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d175      	bne.n	8004d0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_UART_Transmit+0x2c>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e06e      	b.n	8004d0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2221      	movs	r2, #33	@ 0x21
 8004c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c3e:	f7fd fbe1 	bl	8002404 <HAL_GetTick>
 8004c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c58:	d108      	bne.n	8004c6c <HAL_UART_Transmit+0x6c>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	e003      	b.n	8004c74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c74:	e02e      	b.n	8004cd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	@ 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f848 	bl	8004d16 <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e03a      	b.n	8004d0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e007      	b.n	8004cc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1cb      	bne.n	8004c76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2140      	movs	r1, #64	@ 0x40
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f814 	bl	8004d16 <UART_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e006      	b.n	8004d0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d26:	e03b      	b.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d037      	beq.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fd fb68 	bl	8002404 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	6a3a      	ldr	r2, [r7, #32]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e03a      	b.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d023      	beq.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b80      	cmp	r3, #128	@ 0x80
 8004d5c:	d020      	beq.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	d01d      	beq.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d116      	bne.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f81d 	bl	8004dc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2208      	movs	r2, #8
 8004d92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e00f      	b.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4013      	ands	r3, r2
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	bf0c      	ite	eq
 8004db0:	2301      	moveq	r3, #1
 8004db2:	2300      	movne	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d0b4      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b095      	sub	sp, #84	@ 0x54
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004df0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e5      	bne.n	8004dd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3314      	adds	r3, #20
 8004e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3314      	adds	r3, #20
 8004e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d119      	bne.n	8004e74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f023 0310 	bic.w	r3, r3, #16
 8004e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e60:	61ba      	str	r2, [r7, #24]
 8004e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6979      	ldr	r1, [r7, #20]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e82:	bf00      	nop
 8004e84:	3754      	adds	r7, #84	@ 0x54
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e94:	b0c0      	sub	sp, #256	@ 0x100
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	68d9      	ldr	r1, [r3, #12]
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	ea40 0301 	orr.w	r3, r0, r1
 8004eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ee8:	f021 010c 	bic.w	r1, r1, #12
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0a:	6999      	ldr	r1, [r3, #24]
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	ea40 0301 	orr.w	r3, r0, r1
 8004f16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b8f      	ldr	r3, [pc, #572]	@ (800515c <UART_SetConfig+0x2cc>)
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d005      	beq.n	8004f30 <UART_SetConfig+0xa0>
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005160 <UART_SetConfig+0x2d0>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d104      	bne.n	8004f3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f30:	f7ff f9be 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8004f34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f38:	e003      	b.n	8004f42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f3a:	f7ff f9a5 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8004f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f4c:	f040 810c 	bne.w	8005168 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f62:	4622      	mov	r2, r4
 8004f64:	462b      	mov	r3, r5
 8004f66:	1891      	adds	r1, r2, r2
 8004f68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f6a:	415b      	adcs	r3, r3
 8004f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f72:	4621      	mov	r1, r4
 8004f74:	eb12 0801 	adds.w	r8, r2, r1
 8004f78:	4629      	mov	r1, r5
 8004f7a:	eb43 0901 	adc.w	r9, r3, r1
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f92:	4690      	mov	r8, r2
 8004f94:	4699      	mov	r9, r3
 8004f96:	4623      	mov	r3, r4
 8004f98:	eb18 0303 	adds.w	r3, r8, r3
 8004f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	eb49 0303 	adc.w	r3, r9, r3
 8004fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	18db      	adds	r3, r3, r3
 8004fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	eb42 0303 	adc.w	r3, r2, r3
 8004fca:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fd4:	f7fb fc8a 	bl	80008ec <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4b61      	ldr	r3, [pc, #388]	@ (8005164 <UART_SetConfig+0x2d4>)
 8004fde:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	011c      	lsls	r4, r3, #4
 8004fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	1891      	adds	r1, r2, r2
 8004ffe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005000:	415b      	adcs	r3, r3
 8005002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005008:	4641      	mov	r1, r8
 800500a:	eb12 0a01 	adds.w	sl, r2, r1
 800500e:	4649      	mov	r1, r9
 8005010:	eb43 0b01 	adc.w	fp, r3, r1
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005028:	4692      	mov	sl, r2
 800502a:	469b      	mov	fp, r3
 800502c:	4643      	mov	r3, r8
 800502e:	eb1a 0303 	adds.w	r3, sl, r3
 8005032:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005036:	464b      	mov	r3, r9
 8005038:	eb4b 0303 	adc.w	r3, fp, r3
 800503c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800504c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005054:	460b      	mov	r3, r1
 8005056:	18db      	adds	r3, r3, r3
 8005058:	643b      	str	r3, [r7, #64]	@ 0x40
 800505a:	4613      	mov	r3, r2
 800505c:	eb42 0303 	adc.w	r3, r2, r3
 8005060:	647b      	str	r3, [r7, #68]	@ 0x44
 8005062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800506a:	f7fb fc3f 	bl	80008ec <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4611      	mov	r1, r2
 8005074:	4b3b      	ldr	r3, [pc, #236]	@ (8005164 <UART_SetConfig+0x2d4>)
 8005076:	fba3 2301 	umull	r2, r3, r3, r1
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2264      	movs	r2, #100	@ 0x64
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	1acb      	subs	r3, r1, r3
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800508a:	4b36      	ldr	r3, [pc, #216]	@ (8005164 <UART_SetConfig+0x2d4>)
 800508c:	fba3 2302 	umull	r2, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005098:	441c      	add	r4, r3
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050b4:	415b      	adcs	r3, r3
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050bc:	4641      	mov	r1, r8
 80050be:	1851      	adds	r1, r2, r1
 80050c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80050c2:	4649      	mov	r1, r9
 80050c4:	414b      	adcs	r3, r1
 80050c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050d4:	4659      	mov	r1, fp
 80050d6:	00cb      	lsls	r3, r1, #3
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050de:	4651      	mov	r1, sl
 80050e0:	00ca      	lsls	r2, r1, #3
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	4642      	mov	r2, r8
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050f0:	464b      	mov	r3, r9
 80050f2:	460a      	mov	r2, r1
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005108:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800510c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005110:	460b      	mov	r3, r1
 8005112:	18db      	adds	r3, r3, r3
 8005114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005116:	4613      	mov	r3, r2
 8005118:	eb42 0303 	adc.w	r3, r2, r3
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005126:	f7fb fbe1 	bl	80008ec <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4b0d      	ldr	r3, [pc, #52]	@ (8005164 <UART_SetConfig+0x2d4>)
 8005130:	fba3 1302 	umull	r1, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	2164      	movs	r1, #100	@ 0x64
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	3332      	adds	r3, #50	@ 0x32
 8005142:	4a08      	ldr	r2, [pc, #32]	@ (8005164 <UART_SetConfig+0x2d4>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f003 0207 	and.w	r2, r3, #7
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4422      	add	r2, r4
 8005156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005158:	e106      	b.n	8005368 <UART_SetConfig+0x4d8>
 800515a:	bf00      	nop
 800515c:	40011000 	.word	0x40011000
 8005160:	40011400 	.word	0x40011400
 8005164:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516c:	2200      	movs	r2, #0
 800516e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005172:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800517a:	4642      	mov	r2, r8
 800517c:	464b      	mov	r3, r9
 800517e:	1891      	adds	r1, r2, r2
 8005180:	6239      	str	r1, [r7, #32]
 8005182:	415b      	adcs	r3, r3
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
 8005186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800518a:	4641      	mov	r1, r8
 800518c:	1854      	adds	r4, r2, r1
 800518e:	4649      	mov	r1, r9
 8005190:	eb43 0501 	adc.w	r5, r3, r1
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	00eb      	lsls	r3, r5, #3
 800519e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051a2:	00e2      	lsls	r2, r4, #3
 80051a4:	4614      	mov	r4, r2
 80051a6:	461d      	mov	r5, r3
 80051a8:	4643      	mov	r3, r8
 80051aa:	18e3      	adds	r3, r4, r3
 80051ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051b0:	464b      	mov	r3, r9
 80051b2:	eb45 0303 	adc.w	r3, r5, r3
 80051b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051d6:	4629      	mov	r1, r5
 80051d8:	008b      	lsls	r3, r1, #2
 80051da:	4621      	mov	r1, r4
 80051dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e0:	4621      	mov	r1, r4
 80051e2:	008a      	lsls	r2, r1, #2
 80051e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051e8:	f7fb fb80 	bl	80008ec <__aeabi_uldivmod>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4b60      	ldr	r3, [pc, #384]	@ (8005374 <UART_SetConfig+0x4e4>)
 80051f2:	fba3 2302 	umull	r2, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	011c      	lsls	r4, r3, #4
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005204:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	61b9      	str	r1, [r7, #24]
 8005214:	415b      	adcs	r3, r3
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6139      	str	r1, [r7, #16]
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005266:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005274:	4649      	mov	r1, r9
 8005276:	008b      	lsls	r3, r1, #2
 8005278:	4641      	mov	r1, r8
 800527a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527e:	4641      	mov	r1, r8
 8005280:	008a      	lsls	r2, r1, #2
 8005282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005286:	f7fb fb31 	bl	80008ec <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4611      	mov	r1, r2
 8005290:	4b38      	ldr	r3, [pc, #224]	@ (8005374 <UART_SetConfig+0x4e4>)
 8005292:	fba3 2301 	umull	r2, r3, r3, r1
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	2264      	movs	r2, #100	@ 0x64
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	1acb      	subs	r3, r1, r3
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	3332      	adds	r3, #50	@ 0x32
 80052a4:	4a33      	ldr	r2, [pc, #204]	@ (8005374 <UART_SetConfig+0x4e4>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052b0:	441c      	add	r4, r3
 80052b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b6:	2200      	movs	r2, #0
 80052b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80052bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	1891      	adds	r1, r2, r2
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	415b      	adcs	r3, r3
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052d0:	4641      	mov	r1, r8
 80052d2:	1851      	adds	r1, r2, r1
 80052d4:	6039      	str	r1, [r7, #0]
 80052d6:	4649      	mov	r1, r9
 80052d8:	414b      	adcs	r3, r1
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e8:	4659      	mov	r1, fp
 80052ea:	00cb      	lsls	r3, r1, #3
 80052ec:	4651      	mov	r1, sl
 80052ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f2:	4651      	mov	r1, sl
 80052f4:	00ca      	lsls	r2, r1, #3
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	4642      	mov	r2, r8
 80052fe:	189b      	adds	r3, r3, r2
 8005300:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005302:	464b      	mov	r3, r9
 8005304:	460a      	mov	r2, r1
 8005306:	eb42 0303 	adc.w	r3, r2, r3
 800530a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	663b      	str	r3, [r7, #96]	@ 0x60
 8005316:	667a      	str	r2, [r7, #100]	@ 0x64
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005324:	4649      	mov	r1, r9
 8005326:	008b      	lsls	r3, r1, #2
 8005328:	4641      	mov	r1, r8
 800532a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532e:	4641      	mov	r1, r8
 8005330:	008a      	lsls	r2, r1, #2
 8005332:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005336:	f7fb fad9 	bl	80008ec <__aeabi_uldivmod>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <UART_SetConfig+0x4e4>)
 8005340:	fba3 1302 	umull	r1, r3, r3, r2
 8005344:	095b      	lsrs	r3, r3, #5
 8005346:	2164      	movs	r1, #100	@ 0x64
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	3332      	adds	r3, #50	@ 0x32
 8005352:	4a08      	ldr	r2, [pc, #32]	@ (8005374 <UART_SetConfig+0x4e4>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	f003 020f 	and.w	r2, r3, #15
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4422      	add	r2, r4
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800536e:	46bd      	mov	sp, r7
 8005370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005374:	51eb851f 	.word	0x51eb851f

08005378 <siprintf>:
 8005378:	b40e      	push	{r1, r2, r3}
 800537a:	b500      	push	{lr}
 800537c:	b09c      	sub	sp, #112	@ 0x70
 800537e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	9006      	str	r0, [sp, #24]
 8005384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005388:	4809      	ldr	r0, [pc, #36]	@ (80053b0 <siprintf+0x38>)
 800538a:	9107      	str	r1, [sp, #28]
 800538c:	9104      	str	r1, [sp, #16]
 800538e:	4909      	ldr	r1, [pc, #36]	@ (80053b4 <siprintf+0x3c>)
 8005390:	f853 2b04 	ldr.w	r2, [r3], #4
 8005394:	9105      	str	r1, [sp, #20]
 8005396:	6800      	ldr	r0, [r0, #0]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	a902      	add	r1, sp, #8
 800539c:	f000 f994 	bl	80056c8 <_svfiprintf_r>
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	b01c      	add	sp, #112	@ 0x70
 80053a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ac:	b003      	add	sp, #12
 80053ae:	4770      	bx	lr
 80053b0:	2000000c 	.word	0x2000000c
 80053b4:	ffff0208 	.word	0xffff0208

080053b8 <memset>:
 80053b8:	4402      	add	r2, r0
 80053ba:	4603      	mov	r3, r0
 80053bc:	4293      	cmp	r3, r2
 80053be:	d100      	bne.n	80053c2 <memset+0xa>
 80053c0:	4770      	bx	lr
 80053c2:	f803 1b01 	strb.w	r1, [r3], #1
 80053c6:	e7f9      	b.n	80053bc <memset+0x4>

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	@ (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000000c 	.word	0x2000000c

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	@ (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005418 <__libc_init_array+0x44>)
 80053e8:	f000 fc66 	bl	8005cb8 <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	08005db8 	.word	0x08005db8
 8005410:	08005db8 	.word	0x08005db8
 8005414:	08005db8 	.word	0x08005db8
 8005418:	08005dbc 	.word	0x08005dbc

0800541c <__retarget_lock_acquire_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_release_recursive>:
 800541e:	4770      	bx	lr

08005420 <_free_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4605      	mov	r5, r0
 8005424:	2900      	cmp	r1, #0
 8005426:	d041      	beq.n	80054ac <_free_r+0x8c>
 8005428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542c:	1f0c      	subs	r4, r1, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	bfb8      	it	lt
 8005432:	18e4      	addlt	r4, r4, r3
 8005434:	f000 f8e0 	bl	80055f8 <__malloc_lock>
 8005438:	4a1d      	ldr	r2, [pc, #116]	@ (80054b0 <_free_r+0x90>)
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	b933      	cbnz	r3, 800544c <_free_r+0x2c>
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	6014      	str	r4, [r2, #0]
 8005442:	4628      	mov	r0, r5
 8005444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005448:	f000 b8dc 	b.w	8005604 <__malloc_unlock>
 800544c:	42a3      	cmp	r3, r4
 800544e:	d908      	bls.n	8005462 <_free_r+0x42>
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	1821      	adds	r1, r4, r0
 8005454:	428b      	cmp	r3, r1
 8005456:	bf01      	itttt	eq
 8005458:	6819      	ldreq	r1, [r3, #0]
 800545a:	685b      	ldreq	r3, [r3, #4]
 800545c:	1809      	addeq	r1, r1, r0
 800545e:	6021      	streq	r1, [r4, #0]
 8005460:	e7ed      	b.n	800543e <_free_r+0x1e>
 8005462:	461a      	mov	r2, r3
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b10b      	cbz	r3, 800546c <_free_r+0x4c>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d9fa      	bls.n	8005462 <_free_r+0x42>
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	1850      	adds	r0, r2, r1
 8005470:	42a0      	cmp	r0, r4
 8005472:	d10b      	bne.n	800548c <_free_r+0x6c>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	4401      	add	r1, r0
 8005478:	1850      	adds	r0, r2, r1
 800547a:	4283      	cmp	r3, r0
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	d1e0      	bne.n	8005442 <_free_r+0x22>
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	6053      	str	r3, [r2, #4]
 8005486:	4408      	add	r0, r1
 8005488:	6010      	str	r0, [r2, #0]
 800548a:	e7da      	b.n	8005442 <_free_r+0x22>
 800548c:	d902      	bls.n	8005494 <_free_r+0x74>
 800548e:	230c      	movs	r3, #12
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	e7d6      	b.n	8005442 <_free_r+0x22>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	1821      	adds	r1, r4, r0
 8005498:	428b      	cmp	r3, r1
 800549a:	bf04      	itt	eq
 800549c:	6819      	ldreq	r1, [r3, #0]
 800549e:	685b      	ldreq	r3, [r3, #4]
 80054a0:	6063      	str	r3, [r4, #4]
 80054a2:	bf04      	itt	eq
 80054a4:	1809      	addeq	r1, r1, r0
 80054a6:	6021      	streq	r1, [r4, #0]
 80054a8:	6054      	str	r4, [r2, #4]
 80054aa:	e7ca      	b.n	8005442 <_free_r+0x22>
 80054ac:	bd38      	pop	{r3, r4, r5, pc}
 80054ae:	bf00      	nop
 80054b0:	20000ac4 	.word	0x20000ac4

080054b4 <sbrk_aligned>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4e0f      	ldr	r6, [pc, #60]	@ (80054f4 <sbrk_aligned+0x40>)
 80054b8:	460c      	mov	r4, r1
 80054ba:	6831      	ldr	r1, [r6, #0]
 80054bc:	4605      	mov	r5, r0
 80054be:	b911      	cbnz	r1, 80054c6 <sbrk_aligned+0x12>
 80054c0:	f000 fba6 	bl	8005c10 <_sbrk_r>
 80054c4:	6030      	str	r0, [r6, #0]
 80054c6:	4621      	mov	r1, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 fba1 	bl	8005c10 <_sbrk_r>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d103      	bne.n	80054da <sbrk_aligned+0x26>
 80054d2:	f04f 34ff 	mov.w	r4, #4294967295
 80054d6:	4620      	mov	r0, r4
 80054d8:	bd70      	pop	{r4, r5, r6, pc}
 80054da:	1cc4      	adds	r4, r0, #3
 80054dc:	f024 0403 	bic.w	r4, r4, #3
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d0f8      	beq.n	80054d6 <sbrk_aligned+0x22>
 80054e4:	1a21      	subs	r1, r4, r0
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 fb92 	bl	8005c10 <_sbrk_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d1f2      	bne.n	80054d6 <sbrk_aligned+0x22>
 80054f0:	e7ef      	b.n	80054d2 <sbrk_aligned+0x1e>
 80054f2:	bf00      	nop
 80054f4:	20000ac0 	.word	0x20000ac0

080054f8 <_malloc_r>:
 80054f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054fc:	1ccd      	adds	r5, r1, #3
 80054fe:	f025 0503 	bic.w	r5, r5, #3
 8005502:	3508      	adds	r5, #8
 8005504:	2d0c      	cmp	r5, #12
 8005506:	bf38      	it	cc
 8005508:	250c      	movcc	r5, #12
 800550a:	2d00      	cmp	r5, #0
 800550c:	4606      	mov	r6, r0
 800550e:	db01      	blt.n	8005514 <_malloc_r+0x1c>
 8005510:	42a9      	cmp	r1, r5
 8005512:	d904      	bls.n	800551e <_malloc_r+0x26>
 8005514:	230c      	movs	r3, #12
 8005516:	6033      	str	r3, [r6, #0]
 8005518:	2000      	movs	r0, #0
 800551a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055f4 <_malloc_r+0xfc>
 8005522:	f000 f869 	bl	80055f8 <__malloc_lock>
 8005526:	f8d8 3000 	ldr.w	r3, [r8]
 800552a:	461c      	mov	r4, r3
 800552c:	bb44      	cbnz	r4, 8005580 <_malloc_r+0x88>
 800552e:	4629      	mov	r1, r5
 8005530:	4630      	mov	r0, r6
 8005532:	f7ff ffbf 	bl	80054b4 <sbrk_aligned>
 8005536:	1c43      	adds	r3, r0, #1
 8005538:	4604      	mov	r4, r0
 800553a:	d158      	bne.n	80055ee <_malloc_r+0xf6>
 800553c:	f8d8 4000 	ldr.w	r4, [r8]
 8005540:	4627      	mov	r7, r4
 8005542:	2f00      	cmp	r7, #0
 8005544:	d143      	bne.n	80055ce <_malloc_r+0xd6>
 8005546:	2c00      	cmp	r4, #0
 8005548:	d04b      	beq.n	80055e2 <_malloc_r+0xea>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	4639      	mov	r1, r7
 800554e:	4630      	mov	r0, r6
 8005550:	eb04 0903 	add.w	r9, r4, r3
 8005554:	f000 fb5c 	bl	8005c10 <_sbrk_r>
 8005558:	4581      	cmp	r9, r0
 800555a:	d142      	bne.n	80055e2 <_malloc_r+0xea>
 800555c:	6821      	ldr	r1, [r4, #0]
 800555e:	1a6d      	subs	r5, r5, r1
 8005560:	4629      	mov	r1, r5
 8005562:	4630      	mov	r0, r6
 8005564:	f7ff ffa6 	bl	80054b4 <sbrk_aligned>
 8005568:	3001      	adds	r0, #1
 800556a:	d03a      	beq.n	80055e2 <_malloc_r+0xea>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	442b      	add	r3, r5
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	f8d8 3000 	ldr.w	r3, [r8]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	bb62      	cbnz	r2, 80055d4 <_malloc_r+0xdc>
 800557a:	f8c8 7000 	str.w	r7, [r8]
 800557e:	e00f      	b.n	80055a0 <_malloc_r+0xa8>
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	1b52      	subs	r2, r2, r5
 8005584:	d420      	bmi.n	80055c8 <_malloc_r+0xd0>
 8005586:	2a0b      	cmp	r2, #11
 8005588:	d917      	bls.n	80055ba <_malloc_r+0xc2>
 800558a:	1961      	adds	r1, r4, r5
 800558c:	42a3      	cmp	r3, r4
 800558e:	6025      	str	r5, [r4, #0]
 8005590:	bf18      	it	ne
 8005592:	6059      	strne	r1, [r3, #4]
 8005594:	6863      	ldr	r3, [r4, #4]
 8005596:	bf08      	it	eq
 8005598:	f8c8 1000 	streq.w	r1, [r8]
 800559c:	5162      	str	r2, [r4, r5]
 800559e:	604b      	str	r3, [r1, #4]
 80055a0:	4630      	mov	r0, r6
 80055a2:	f000 f82f 	bl	8005604 <__malloc_unlock>
 80055a6:	f104 000b 	add.w	r0, r4, #11
 80055aa:	1d23      	adds	r3, r4, #4
 80055ac:	f020 0007 	bic.w	r0, r0, #7
 80055b0:	1ac2      	subs	r2, r0, r3
 80055b2:	bf1c      	itt	ne
 80055b4:	1a1b      	subne	r3, r3, r0
 80055b6:	50a3      	strne	r3, [r4, r2]
 80055b8:	e7af      	b.n	800551a <_malloc_r+0x22>
 80055ba:	6862      	ldr	r2, [r4, #4]
 80055bc:	42a3      	cmp	r3, r4
 80055be:	bf0c      	ite	eq
 80055c0:	f8c8 2000 	streq.w	r2, [r8]
 80055c4:	605a      	strne	r2, [r3, #4]
 80055c6:	e7eb      	b.n	80055a0 <_malloc_r+0xa8>
 80055c8:	4623      	mov	r3, r4
 80055ca:	6864      	ldr	r4, [r4, #4]
 80055cc:	e7ae      	b.n	800552c <_malloc_r+0x34>
 80055ce:	463c      	mov	r4, r7
 80055d0:	687f      	ldr	r7, [r7, #4]
 80055d2:	e7b6      	b.n	8005542 <_malloc_r+0x4a>
 80055d4:	461a      	mov	r2, r3
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d1fb      	bne.n	80055d4 <_malloc_r+0xdc>
 80055dc:	2300      	movs	r3, #0
 80055de:	6053      	str	r3, [r2, #4]
 80055e0:	e7de      	b.n	80055a0 <_malloc_r+0xa8>
 80055e2:	230c      	movs	r3, #12
 80055e4:	6033      	str	r3, [r6, #0]
 80055e6:	4630      	mov	r0, r6
 80055e8:	f000 f80c 	bl	8005604 <__malloc_unlock>
 80055ec:	e794      	b.n	8005518 <_malloc_r+0x20>
 80055ee:	6005      	str	r5, [r0, #0]
 80055f0:	e7d6      	b.n	80055a0 <_malloc_r+0xa8>
 80055f2:	bf00      	nop
 80055f4:	20000ac4 	.word	0x20000ac4

080055f8 <__malloc_lock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	@ (8005600 <__malloc_lock+0x8>)
 80055fa:	f7ff bf0f 	b.w	800541c <__retarget_lock_acquire_recursive>
 80055fe:	bf00      	nop
 8005600:	20000abc 	.word	0x20000abc

08005604 <__malloc_unlock>:
 8005604:	4801      	ldr	r0, [pc, #4]	@ (800560c <__malloc_unlock+0x8>)
 8005606:	f7ff bf0a 	b.w	800541e <__retarget_lock_release_recursive>
 800560a:	bf00      	nop
 800560c:	20000abc 	.word	0x20000abc

08005610 <__ssputs_r>:
 8005610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	688e      	ldr	r6, [r1, #8]
 8005616:	461f      	mov	r7, r3
 8005618:	42be      	cmp	r6, r7
 800561a:	680b      	ldr	r3, [r1, #0]
 800561c:	4682      	mov	sl, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4690      	mov	r8, r2
 8005622:	d82d      	bhi.n	8005680 <__ssputs_r+0x70>
 8005624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005628:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800562c:	d026      	beq.n	800567c <__ssputs_r+0x6c>
 800562e:	6965      	ldr	r5, [r4, #20]
 8005630:	6909      	ldr	r1, [r1, #16]
 8005632:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005636:	eba3 0901 	sub.w	r9, r3, r1
 800563a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800563e:	1c7b      	adds	r3, r7, #1
 8005640:	444b      	add	r3, r9
 8005642:	106d      	asrs	r5, r5, #1
 8005644:	429d      	cmp	r5, r3
 8005646:	bf38      	it	cc
 8005648:	461d      	movcc	r5, r3
 800564a:	0553      	lsls	r3, r2, #21
 800564c:	d527      	bpl.n	800569e <__ssputs_r+0x8e>
 800564e:	4629      	mov	r1, r5
 8005650:	f7ff ff52 	bl	80054f8 <_malloc_r>
 8005654:	4606      	mov	r6, r0
 8005656:	b360      	cbz	r0, 80056b2 <__ssputs_r+0xa2>
 8005658:	6921      	ldr	r1, [r4, #16]
 800565a:	464a      	mov	r2, r9
 800565c:	f000 fae8 	bl	8005c30 <memcpy>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	6126      	str	r6, [r4, #16]
 800566e:	6165      	str	r5, [r4, #20]
 8005670:	444e      	add	r6, r9
 8005672:	eba5 0509 	sub.w	r5, r5, r9
 8005676:	6026      	str	r6, [r4, #0]
 8005678:	60a5      	str	r5, [r4, #8]
 800567a:	463e      	mov	r6, r7
 800567c:	42be      	cmp	r6, r7
 800567e:	d900      	bls.n	8005682 <__ssputs_r+0x72>
 8005680:	463e      	mov	r6, r7
 8005682:	6820      	ldr	r0, [r4, #0]
 8005684:	4632      	mov	r2, r6
 8005686:	4641      	mov	r1, r8
 8005688:	f000 faa8 	bl	8005bdc <memmove>
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	1b9b      	subs	r3, r3, r6
 8005690:	60a3      	str	r3, [r4, #8]
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	4433      	add	r3, r6
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	2000      	movs	r0, #0
 800569a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569e:	462a      	mov	r2, r5
 80056a0:	f000 fad4 	bl	8005c4c <_realloc_r>
 80056a4:	4606      	mov	r6, r0
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d1e0      	bne.n	800566c <__ssputs_r+0x5c>
 80056aa:	6921      	ldr	r1, [r4, #16]
 80056ac:	4650      	mov	r0, sl
 80056ae:	f7ff feb7 	bl	8005420 <_free_r>
 80056b2:	230c      	movs	r3, #12
 80056b4:	f8ca 3000 	str.w	r3, [sl]
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	e7e9      	b.n	800569a <__ssputs_r+0x8a>
	...

080056c8 <_svfiprintf_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	4698      	mov	r8, r3
 80056ce:	898b      	ldrh	r3, [r1, #12]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	b09d      	sub	sp, #116	@ 0x74
 80056d4:	4607      	mov	r7, r0
 80056d6:	460d      	mov	r5, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	d510      	bpl.n	80056fe <_svfiprintf_r+0x36>
 80056dc:	690b      	ldr	r3, [r1, #16]
 80056de:	b973      	cbnz	r3, 80056fe <_svfiprintf_r+0x36>
 80056e0:	2140      	movs	r1, #64	@ 0x40
 80056e2:	f7ff ff09 	bl	80054f8 <_malloc_r>
 80056e6:	6028      	str	r0, [r5, #0]
 80056e8:	6128      	str	r0, [r5, #16]
 80056ea:	b930      	cbnz	r0, 80056fa <_svfiprintf_r+0x32>
 80056ec:	230c      	movs	r3, #12
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b01d      	add	sp, #116	@ 0x74
 80056f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fa:	2340      	movs	r3, #64	@ 0x40
 80056fc:	616b      	str	r3, [r5, #20]
 80056fe:	2300      	movs	r3, #0
 8005700:	9309      	str	r3, [sp, #36]	@ 0x24
 8005702:	2320      	movs	r3, #32
 8005704:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005708:	f8cd 800c 	str.w	r8, [sp, #12]
 800570c:	2330      	movs	r3, #48	@ 0x30
 800570e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058ac <_svfiprintf_r+0x1e4>
 8005712:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005716:	f04f 0901 	mov.w	r9, #1
 800571a:	4623      	mov	r3, r4
 800571c:	469a      	mov	sl, r3
 800571e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005722:	b10a      	cbz	r2, 8005728 <_svfiprintf_r+0x60>
 8005724:	2a25      	cmp	r2, #37	@ 0x25
 8005726:	d1f9      	bne.n	800571c <_svfiprintf_r+0x54>
 8005728:	ebba 0b04 	subs.w	fp, sl, r4
 800572c:	d00b      	beq.n	8005746 <_svfiprintf_r+0x7e>
 800572e:	465b      	mov	r3, fp
 8005730:	4622      	mov	r2, r4
 8005732:	4629      	mov	r1, r5
 8005734:	4638      	mov	r0, r7
 8005736:	f7ff ff6b 	bl	8005610 <__ssputs_r>
 800573a:	3001      	adds	r0, #1
 800573c:	f000 80a7 	beq.w	800588e <_svfiprintf_r+0x1c6>
 8005740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005742:	445a      	add	r2, fp
 8005744:	9209      	str	r2, [sp, #36]	@ 0x24
 8005746:	f89a 3000 	ldrb.w	r3, [sl]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 809f 	beq.w	800588e <_svfiprintf_r+0x1c6>
 8005750:	2300      	movs	r3, #0
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800575a:	f10a 0a01 	add.w	sl, sl, #1
 800575e:	9304      	str	r3, [sp, #16]
 8005760:	9307      	str	r3, [sp, #28]
 8005762:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005766:	931a      	str	r3, [sp, #104]	@ 0x68
 8005768:	4654      	mov	r4, sl
 800576a:	2205      	movs	r2, #5
 800576c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005770:	484e      	ldr	r0, [pc, #312]	@ (80058ac <_svfiprintf_r+0x1e4>)
 8005772:	f7fa fd3d 	bl	80001f0 <memchr>
 8005776:	9a04      	ldr	r2, [sp, #16]
 8005778:	b9d8      	cbnz	r0, 80057b2 <_svfiprintf_r+0xea>
 800577a:	06d0      	lsls	r0, r2, #27
 800577c:	bf44      	itt	mi
 800577e:	2320      	movmi	r3, #32
 8005780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005784:	0711      	lsls	r1, r2, #28
 8005786:	bf44      	itt	mi
 8005788:	232b      	movmi	r3, #43	@ 0x2b
 800578a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800578e:	f89a 3000 	ldrb.w	r3, [sl]
 8005792:	2b2a      	cmp	r3, #42	@ 0x2a
 8005794:	d015      	beq.n	80057c2 <_svfiprintf_r+0xfa>
 8005796:	9a07      	ldr	r2, [sp, #28]
 8005798:	4654      	mov	r4, sl
 800579a:	2000      	movs	r0, #0
 800579c:	f04f 0c0a 	mov.w	ip, #10
 80057a0:	4621      	mov	r1, r4
 80057a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057a6:	3b30      	subs	r3, #48	@ 0x30
 80057a8:	2b09      	cmp	r3, #9
 80057aa:	d94b      	bls.n	8005844 <_svfiprintf_r+0x17c>
 80057ac:	b1b0      	cbz	r0, 80057dc <_svfiprintf_r+0x114>
 80057ae:	9207      	str	r2, [sp, #28]
 80057b0:	e014      	b.n	80057dc <_svfiprintf_r+0x114>
 80057b2:	eba0 0308 	sub.w	r3, r0, r8
 80057b6:	fa09 f303 	lsl.w	r3, r9, r3
 80057ba:	4313      	orrs	r3, r2
 80057bc:	9304      	str	r3, [sp, #16]
 80057be:	46a2      	mov	sl, r4
 80057c0:	e7d2      	b.n	8005768 <_svfiprintf_r+0xa0>
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	1d19      	adds	r1, r3, #4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	9103      	str	r1, [sp, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfbb      	ittet	lt
 80057ce:	425b      	neglt	r3, r3
 80057d0:	f042 0202 	orrlt.w	r2, r2, #2
 80057d4:	9307      	strge	r3, [sp, #28]
 80057d6:	9307      	strlt	r3, [sp, #28]
 80057d8:	bfb8      	it	lt
 80057da:	9204      	strlt	r2, [sp, #16]
 80057dc:	7823      	ldrb	r3, [r4, #0]
 80057de:	2b2e      	cmp	r3, #46	@ 0x2e
 80057e0:	d10a      	bne.n	80057f8 <_svfiprintf_r+0x130>
 80057e2:	7863      	ldrb	r3, [r4, #1]
 80057e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80057e6:	d132      	bne.n	800584e <_svfiprintf_r+0x186>
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	9203      	str	r2, [sp, #12]
 80057f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057f4:	3402      	adds	r4, #2
 80057f6:	9305      	str	r3, [sp, #20]
 80057f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058bc <_svfiprintf_r+0x1f4>
 80057fc:	7821      	ldrb	r1, [r4, #0]
 80057fe:	2203      	movs	r2, #3
 8005800:	4650      	mov	r0, sl
 8005802:	f7fa fcf5 	bl	80001f0 <memchr>
 8005806:	b138      	cbz	r0, 8005818 <_svfiprintf_r+0x150>
 8005808:	9b04      	ldr	r3, [sp, #16]
 800580a:	eba0 000a 	sub.w	r0, r0, sl
 800580e:	2240      	movs	r2, #64	@ 0x40
 8005810:	4082      	lsls	r2, r0
 8005812:	4313      	orrs	r3, r2
 8005814:	3401      	adds	r4, #1
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581c:	4824      	ldr	r0, [pc, #144]	@ (80058b0 <_svfiprintf_r+0x1e8>)
 800581e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005822:	2206      	movs	r2, #6
 8005824:	f7fa fce4 	bl	80001f0 <memchr>
 8005828:	2800      	cmp	r0, #0
 800582a:	d036      	beq.n	800589a <_svfiprintf_r+0x1d2>
 800582c:	4b21      	ldr	r3, [pc, #132]	@ (80058b4 <_svfiprintf_r+0x1ec>)
 800582e:	bb1b      	cbnz	r3, 8005878 <_svfiprintf_r+0x1b0>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	3307      	adds	r3, #7
 8005834:	f023 0307 	bic.w	r3, r3, #7
 8005838:	3308      	adds	r3, #8
 800583a:	9303      	str	r3, [sp, #12]
 800583c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583e:	4433      	add	r3, r6
 8005840:	9309      	str	r3, [sp, #36]	@ 0x24
 8005842:	e76a      	b.n	800571a <_svfiprintf_r+0x52>
 8005844:	fb0c 3202 	mla	r2, ip, r2, r3
 8005848:	460c      	mov	r4, r1
 800584a:	2001      	movs	r0, #1
 800584c:	e7a8      	b.n	80057a0 <_svfiprintf_r+0xd8>
 800584e:	2300      	movs	r3, #0
 8005850:	3401      	adds	r4, #1
 8005852:	9305      	str	r3, [sp, #20]
 8005854:	4619      	mov	r1, r3
 8005856:	f04f 0c0a 	mov.w	ip, #10
 800585a:	4620      	mov	r0, r4
 800585c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005860:	3a30      	subs	r2, #48	@ 0x30
 8005862:	2a09      	cmp	r2, #9
 8005864:	d903      	bls.n	800586e <_svfiprintf_r+0x1a6>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0c6      	beq.n	80057f8 <_svfiprintf_r+0x130>
 800586a:	9105      	str	r1, [sp, #20]
 800586c:	e7c4      	b.n	80057f8 <_svfiprintf_r+0x130>
 800586e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005872:	4604      	mov	r4, r0
 8005874:	2301      	movs	r3, #1
 8005876:	e7f0      	b.n	800585a <_svfiprintf_r+0x192>
 8005878:	ab03      	add	r3, sp, #12
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	462a      	mov	r2, r5
 800587e:	4b0e      	ldr	r3, [pc, #56]	@ (80058b8 <_svfiprintf_r+0x1f0>)
 8005880:	a904      	add	r1, sp, #16
 8005882:	4638      	mov	r0, r7
 8005884:	f3af 8000 	nop.w
 8005888:	1c42      	adds	r2, r0, #1
 800588a:	4606      	mov	r6, r0
 800588c:	d1d6      	bne.n	800583c <_svfiprintf_r+0x174>
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	065b      	lsls	r3, r3, #25
 8005892:	f53f af2d 	bmi.w	80056f0 <_svfiprintf_r+0x28>
 8005896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005898:	e72c      	b.n	80056f4 <_svfiprintf_r+0x2c>
 800589a:	ab03      	add	r3, sp, #12
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	462a      	mov	r2, r5
 80058a0:	4b05      	ldr	r3, [pc, #20]	@ (80058b8 <_svfiprintf_r+0x1f0>)
 80058a2:	a904      	add	r1, sp, #16
 80058a4:	4638      	mov	r0, r7
 80058a6:	f000 f879 	bl	800599c <_printf_i>
 80058aa:	e7ed      	b.n	8005888 <_svfiprintf_r+0x1c0>
 80058ac:	08005d7c 	.word	0x08005d7c
 80058b0:	08005d86 	.word	0x08005d86
 80058b4:	00000000 	.word	0x00000000
 80058b8:	08005611 	.word	0x08005611
 80058bc:	08005d82 	.word	0x08005d82

080058c0 <_printf_common>:
 80058c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	4616      	mov	r6, r2
 80058c6:	4698      	mov	r8, r3
 80058c8:	688a      	ldr	r2, [r1, #8]
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfb8      	it	lt
 80058d4:	4613      	movlt	r3, r2
 80058d6:	6033      	str	r3, [r6, #0]
 80058d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058dc:	4607      	mov	r7, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b10a      	cbz	r2, 80058e6 <_printf_common+0x26>
 80058e2:	3301      	adds	r3, #1
 80058e4:	6033      	str	r3, [r6, #0]
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	0699      	lsls	r1, r3, #26
 80058ea:	bf42      	ittt	mi
 80058ec:	6833      	ldrmi	r3, [r6, #0]
 80058ee:	3302      	addmi	r3, #2
 80058f0:	6033      	strmi	r3, [r6, #0]
 80058f2:	6825      	ldr	r5, [r4, #0]
 80058f4:	f015 0506 	ands.w	r5, r5, #6
 80058f8:	d106      	bne.n	8005908 <_printf_common+0x48>
 80058fa:	f104 0a19 	add.w	sl, r4, #25
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	6832      	ldr	r2, [r6, #0]
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	42ab      	cmp	r3, r5
 8005906:	dc26      	bgt.n	8005956 <_printf_common+0x96>
 8005908:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	3b00      	subs	r3, #0
 8005910:	bf18      	it	ne
 8005912:	2301      	movne	r3, #1
 8005914:	0692      	lsls	r2, r2, #26
 8005916:	d42b      	bmi.n	8005970 <_printf_common+0xb0>
 8005918:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800591c:	4641      	mov	r1, r8
 800591e:	4638      	mov	r0, r7
 8005920:	47c8      	blx	r9
 8005922:	3001      	adds	r0, #1
 8005924:	d01e      	beq.n	8005964 <_printf_common+0xa4>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	2b04      	cmp	r3, #4
 8005930:	bf02      	ittt	eq
 8005932:	68e5      	ldreq	r5, [r4, #12]
 8005934:	6833      	ldreq	r3, [r6, #0]
 8005936:	1aed      	subeq	r5, r5, r3
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	bf0c      	ite	eq
 800593c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005940:	2500      	movne	r5, #0
 8005942:	4293      	cmp	r3, r2
 8005944:	bfc4      	itt	gt
 8005946:	1a9b      	subgt	r3, r3, r2
 8005948:	18ed      	addgt	r5, r5, r3
 800594a:	2600      	movs	r6, #0
 800594c:	341a      	adds	r4, #26
 800594e:	42b5      	cmp	r5, r6
 8005950:	d11a      	bne.n	8005988 <_printf_common+0xc8>
 8005952:	2000      	movs	r0, #0
 8005954:	e008      	b.n	8005968 <_printf_common+0xa8>
 8005956:	2301      	movs	r3, #1
 8005958:	4652      	mov	r2, sl
 800595a:	4641      	mov	r1, r8
 800595c:	4638      	mov	r0, r7
 800595e:	47c8      	blx	r9
 8005960:	3001      	adds	r0, #1
 8005962:	d103      	bne.n	800596c <_printf_common+0xac>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596c:	3501      	adds	r5, #1
 800596e:	e7c6      	b.n	80058fe <_printf_common+0x3e>
 8005970:	18e1      	adds	r1, r4, r3
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	2030      	movs	r0, #48	@ 0x30
 8005976:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800597a:	4422      	add	r2, r4
 800597c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005980:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005984:	3302      	adds	r3, #2
 8005986:	e7c7      	b.n	8005918 <_printf_common+0x58>
 8005988:	2301      	movs	r3, #1
 800598a:	4622      	mov	r2, r4
 800598c:	4641      	mov	r1, r8
 800598e:	4638      	mov	r0, r7
 8005990:	47c8      	blx	r9
 8005992:	3001      	adds	r0, #1
 8005994:	d0e6      	beq.n	8005964 <_printf_common+0xa4>
 8005996:	3601      	adds	r6, #1
 8005998:	e7d9      	b.n	800594e <_printf_common+0x8e>
	...

0800599c <_printf_i>:
 800599c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	7e0f      	ldrb	r7, [r1, #24]
 80059a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059a4:	2f78      	cmp	r7, #120	@ 0x78
 80059a6:	4691      	mov	r9, r2
 80059a8:	4680      	mov	r8, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	469a      	mov	sl, r3
 80059ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059b2:	d807      	bhi.n	80059c4 <_printf_i+0x28>
 80059b4:	2f62      	cmp	r7, #98	@ 0x62
 80059b6:	d80a      	bhi.n	80059ce <_printf_i+0x32>
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	f000 80d2 	beq.w	8005b62 <_printf_i+0x1c6>
 80059be:	2f58      	cmp	r7, #88	@ 0x58
 80059c0:	f000 80b9 	beq.w	8005b36 <_printf_i+0x19a>
 80059c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059cc:	e03a      	b.n	8005a44 <_printf_i+0xa8>
 80059ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059d2:	2b15      	cmp	r3, #21
 80059d4:	d8f6      	bhi.n	80059c4 <_printf_i+0x28>
 80059d6:	a101      	add	r1, pc, #4	@ (adr r1, 80059dc <_printf_i+0x40>)
 80059d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059dc:	08005a35 	.word	0x08005a35
 80059e0:	08005a49 	.word	0x08005a49
 80059e4:	080059c5 	.word	0x080059c5
 80059e8:	080059c5 	.word	0x080059c5
 80059ec:	080059c5 	.word	0x080059c5
 80059f0:	080059c5 	.word	0x080059c5
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	080059c5 	.word	0x080059c5
 80059fc:	080059c5 	.word	0x080059c5
 8005a00:	080059c5 	.word	0x080059c5
 8005a04:	080059c5 	.word	0x080059c5
 8005a08:	08005b49 	.word	0x08005b49
 8005a0c:	08005a73 	.word	0x08005a73
 8005a10:	08005b03 	.word	0x08005b03
 8005a14:	080059c5 	.word	0x080059c5
 8005a18:	080059c5 	.word	0x080059c5
 8005a1c:	08005b6b 	.word	0x08005b6b
 8005a20:	080059c5 	.word	0x080059c5
 8005a24:	08005a73 	.word	0x08005a73
 8005a28:	080059c5 	.word	0x080059c5
 8005a2c:	080059c5 	.word	0x080059c5
 8005a30:	08005b0b 	.word	0x08005b0b
 8005a34:	6833      	ldr	r3, [r6, #0]
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6032      	str	r2, [r6, #0]
 8005a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a44:	2301      	movs	r3, #1
 8005a46:	e09d      	b.n	8005b84 <_printf_i+0x1e8>
 8005a48:	6833      	ldr	r3, [r6, #0]
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	6031      	str	r1, [r6, #0]
 8005a50:	0606      	lsls	r6, r0, #24
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0xbc>
 8005a54:	681d      	ldr	r5, [r3, #0]
 8005a56:	e003      	b.n	8005a60 <_printf_i+0xc4>
 8005a58:	0645      	lsls	r5, r0, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0xb8>
 8005a5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	da03      	bge.n	8005a6c <_printf_i+0xd0>
 8005a64:	232d      	movs	r3, #45	@ 0x2d
 8005a66:	426d      	negs	r5, r5
 8005a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a6c:	4859      	ldr	r0, [pc, #356]	@ (8005bd4 <_printf_i+0x238>)
 8005a6e:	230a      	movs	r3, #10
 8005a70:	e011      	b.n	8005a96 <_printf_i+0xfa>
 8005a72:	6821      	ldr	r1, [r4, #0]
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	0608      	lsls	r0, r1, #24
 8005a78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a7c:	d402      	bmi.n	8005a84 <_printf_i+0xe8>
 8005a7e:	0649      	lsls	r1, r1, #25
 8005a80:	bf48      	it	mi
 8005a82:	b2ad      	uxthmi	r5, r5
 8005a84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a86:	4853      	ldr	r0, [pc, #332]	@ (8005bd4 <_printf_i+0x238>)
 8005a88:	6033      	str	r3, [r6, #0]
 8005a8a:	bf14      	ite	ne
 8005a8c:	230a      	movne	r3, #10
 8005a8e:	2308      	moveq	r3, #8
 8005a90:	2100      	movs	r1, #0
 8005a92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a96:	6866      	ldr	r6, [r4, #4]
 8005a98:	60a6      	str	r6, [r4, #8]
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	bfa2      	ittt	ge
 8005a9e:	6821      	ldrge	r1, [r4, #0]
 8005aa0:	f021 0104 	bicge.w	r1, r1, #4
 8005aa4:	6021      	strge	r1, [r4, #0]
 8005aa6:	b90d      	cbnz	r5, 8005aac <_printf_i+0x110>
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	d04b      	beq.n	8005b44 <_printf_i+0x1a8>
 8005aac:	4616      	mov	r6, r2
 8005aae:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ab2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ab6:	5dc7      	ldrb	r7, [r0, r7]
 8005ab8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005abc:	462f      	mov	r7, r5
 8005abe:	42bb      	cmp	r3, r7
 8005ac0:	460d      	mov	r5, r1
 8005ac2:	d9f4      	bls.n	8005aae <_printf_i+0x112>
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d10b      	bne.n	8005ae0 <_printf_i+0x144>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07df      	lsls	r7, r3, #31
 8005acc:	d508      	bpl.n	8005ae0 <_printf_i+0x144>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	6861      	ldr	r1, [r4, #4]
 8005ad2:	4299      	cmp	r1, r3
 8005ad4:	bfde      	ittt	le
 8005ad6:	2330      	movle	r3, #48	@ 0x30
 8005ad8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005adc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ae0:	1b92      	subs	r2, r2, r6
 8005ae2:	6122      	str	r2, [r4, #16]
 8005ae4:	f8cd a000 	str.w	sl, [sp]
 8005ae8:	464b      	mov	r3, r9
 8005aea:	aa03      	add	r2, sp, #12
 8005aec:	4621      	mov	r1, r4
 8005aee:	4640      	mov	r0, r8
 8005af0:	f7ff fee6 	bl	80058c0 <_printf_common>
 8005af4:	3001      	adds	r0, #1
 8005af6:	d14a      	bne.n	8005b8e <_printf_i+0x1f2>
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	b004      	add	sp, #16
 8005afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	f043 0320 	orr.w	r3, r3, #32
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	4833      	ldr	r0, [pc, #204]	@ (8005bd8 <_printf_i+0x23c>)
 8005b0c:	2778      	movs	r7, #120	@ 0x78
 8005b0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	6831      	ldr	r1, [r6, #0]
 8005b16:	061f      	lsls	r7, r3, #24
 8005b18:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b1c:	d402      	bmi.n	8005b24 <_printf_i+0x188>
 8005b1e:	065f      	lsls	r7, r3, #25
 8005b20:	bf48      	it	mi
 8005b22:	b2ad      	uxthmi	r5, r5
 8005b24:	6031      	str	r1, [r6, #0]
 8005b26:	07d9      	lsls	r1, r3, #31
 8005b28:	bf44      	itt	mi
 8005b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b2e:	6023      	strmi	r3, [r4, #0]
 8005b30:	b11d      	cbz	r5, 8005b3a <_printf_i+0x19e>
 8005b32:	2310      	movs	r3, #16
 8005b34:	e7ac      	b.n	8005a90 <_printf_i+0xf4>
 8005b36:	4827      	ldr	r0, [pc, #156]	@ (8005bd4 <_printf_i+0x238>)
 8005b38:	e7e9      	b.n	8005b0e <_printf_i+0x172>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	f023 0320 	bic.w	r3, r3, #32
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	e7f6      	b.n	8005b32 <_printf_i+0x196>
 8005b44:	4616      	mov	r6, r2
 8005b46:	e7bd      	b.n	8005ac4 <_printf_i+0x128>
 8005b48:	6833      	ldr	r3, [r6, #0]
 8005b4a:	6825      	ldr	r5, [r4, #0]
 8005b4c:	6961      	ldr	r1, [r4, #20]
 8005b4e:	1d18      	adds	r0, r3, #4
 8005b50:	6030      	str	r0, [r6, #0]
 8005b52:	062e      	lsls	r6, r5, #24
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	d501      	bpl.n	8005b5c <_printf_i+0x1c0>
 8005b58:	6019      	str	r1, [r3, #0]
 8005b5a:	e002      	b.n	8005b62 <_printf_i+0x1c6>
 8005b5c:	0668      	lsls	r0, r5, #25
 8005b5e:	d5fb      	bpl.n	8005b58 <_printf_i+0x1bc>
 8005b60:	8019      	strh	r1, [r3, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	4616      	mov	r6, r2
 8005b68:	e7bc      	b.n	8005ae4 <_printf_i+0x148>
 8005b6a:	6833      	ldr	r3, [r6, #0]
 8005b6c:	1d1a      	adds	r2, r3, #4
 8005b6e:	6032      	str	r2, [r6, #0]
 8005b70:	681e      	ldr	r6, [r3, #0]
 8005b72:	6862      	ldr	r2, [r4, #4]
 8005b74:	2100      	movs	r1, #0
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7fa fb3a 	bl	80001f0 <memchr>
 8005b7c:	b108      	cbz	r0, 8005b82 <_printf_i+0x1e6>
 8005b7e:	1b80      	subs	r0, r0, r6
 8005b80:	6060      	str	r0, [r4, #4]
 8005b82:	6863      	ldr	r3, [r4, #4]
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	2300      	movs	r3, #0
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b8c:	e7aa      	b.n	8005ae4 <_printf_i+0x148>
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	4632      	mov	r2, r6
 8005b92:	4649      	mov	r1, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	47d0      	blx	sl
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d0ad      	beq.n	8005af8 <_printf_i+0x15c>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	079b      	lsls	r3, r3, #30
 8005ba0:	d413      	bmi.n	8005bca <_printf_i+0x22e>
 8005ba2:	68e0      	ldr	r0, [r4, #12]
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	4298      	cmp	r0, r3
 8005ba8:	bfb8      	it	lt
 8005baa:	4618      	movlt	r0, r3
 8005bac:	e7a6      	b.n	8005afc <_printf_i+0x160>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	47d0      	blx	sl
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d09d      	beq.n	8005af8 <_printf_i+0x15c>
 8005bbc:	3501      	adds	r5, #1
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	9903      	ldr	r1, [sp, #12]
 8005bc2:	1a5b      	subs	r3, r3, r1
 8005bc4:	42ab      	cmp	r3, r5
 8005bc6:	dcf2      	bgt.n	8005bae <_printf_i+0x212>
 8005bc8:	e7eb      	b.n	8005ba2 <_printf_i+0x206>
 8005bca:	2500      	movs	r5, #0
 8005bcc:	f104 0619 	add.w	r6, r4, #25
 8005bd0:	e7f5      	b.n	8005bbe <_printf_i+0x222>
 8005bd2:	bf00      	nop
 8005bd4:	08005d8d 	.word	0x08005d8d
 8005bd8:	08005d9e 	.word	0x08005d9e

08005bdc <memmove>:
 8005bdc:	4288      	cmp	r0, r1
 8005bde:	b510      	push	{r4, lr}
 8005be0:	eb01 0402 	add.w	r4, r1, r2
 8005be4:	d902      	bls.n	8005bec <memmove+0x10>
 8005be6:	4284      	cmp	r4, r0
 8005be8:	4623      	mov	r3, r4
 8005bea:	d807      	bhi.n	8005bfc <memmove+0x20>
 8005bec:	1e43      	subs	r3, r0, #1
 8005bee:	42a1      	cmp	r1, r4
 8005bf0:	d008      	beq.n	8005c04 <memmove+0x28>
 8005bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bfa:	e7f8      	b.n	8005bee <memmove+0x12>
 8005bfc:	4402      	add	r2, r0
 8005bfe:	4601      	mov	r1, r0
 8005c00:	428a      	cmp	r2, r1
 8005c02:	d100      	bne.n	8005c06 <memmove+0x2a>
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c0e:	e7f7      	b.n	8005c00 <memmove+0x24>

08005c10 <_sbrk_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d06      	ldr	r5, [pc, #24]	@ (8005c2c <_sbrk_r+0x1c>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fc fb1a 	bl	8002254 <_sbrk>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_sbrk_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_sbrk_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000ab8 	.word	0x20000ab8

08005c30 <memcpy>:
 8005c30:	440a      	add	r2, r1
 8005c32:	4291      	cmp	r1, r2
 8005c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c38:	d100      	bne.n	8005c3c <memcpy+0xc>
 8005c3a:	4770      	bx	lr
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c46:	4291      	cmp	r1, r2
 8005c48:	d1f9      	bne.n	8005c3e <memcpy+0xe>
 8005c4a:	bd10      	pop	{r4, pc}

08005c4c <_realloc_r>:
 8005c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c50:	4680      	mov	r8, r0
 8005c52:	4615      	mov	r5, r2
 8005c54:	460c      	mov	r4, r1
 8005c56:	b921      	cbnz	r1, 8005c62 <_realloc_r+0x16>
 8005c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	f7ff bc4b 	b.w	80054f8 <_malloc_r>
 8005c62:	b92a      	cbnz	r2, 8005c70 <_realloc_r+0x24>
 8005c64:	f7ff fbdc 	bl	8005420 <_free_r>
 8005c68:	2400      	movs	r4, #0
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c70:	f000 f81a 	bl	8005ca8 <_malloc_usable_size_r>
 8005c74:	4285      	cmp	r5, r0
 8005c76:	4606      	mov	r6, r0
 8005c78:	d802      	bhi.n	8005c80 <_realloc_r+0x34>
 8005c7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c7e:	d8f4      	bhi.n	8005c6a <_realloc_r+0x1e>
 8005c80:	4629      	mov	r1, r5
 8005c82:	4640      	mov	r0, r8
 8005c84:	f7ff fc38 	bl	80054f8 <_malloc_r>
 8005c88:	4607      	mov	r7, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d0ec      	beq.n	8005c68 <_realloc_r+0x1c>
 8005c8e:	42b5      	cmp	r5, r6
 8005c90:	462a      	mov	r2, r5
 8005c92:	4621      	mov	r1, r4
 8005c94:	bf28      	it	cs
 8005c96:	4632      	movcs	r2, r6
 8005c98:	f7ff ffca 	bl	8005c30 <memcpy>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	f7ff fbbe 	bl	8005420 <_free_r>
 8005ca4:	463c      	mov	r4, r7
 8005ca6:	e7e0      	b.n	8005c6a <_realloc_r+0x1e>

08005ca8 <_malloc_usable_size_r>:
 8005ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cac:	1f18      	subs	r0, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bfbc      	itt	lt
 8005cb2:	580b      	ldrlt	r3, [r1, r0]
 8005cb4:	18c0      	addlt	r0, r0, r3
 8005cb6:	4770      	bx	lr

08005cb8 <_init>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr

08005cc4 <_fini>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr
