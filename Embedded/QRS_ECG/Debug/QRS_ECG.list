
QRS_ECG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08007190  08007190  00008190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007470  08007470  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007470  08007470  00008470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007478  08007478  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007478  08007478  00008478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800747c  0800747c  0000847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007480  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb4  2000005c  080074dc  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  080074dc  00009c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc18  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002561  00000000  00000000  00018ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2f  00000000  00000000  0001c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001897e  00000000  00000000  0001cb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001264c  00000000  00000000  0003551d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009afa1  00000000  00000000  00047b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000e2b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e7058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007178 	.word	0x08007178

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08007178 	.word	0x08007178

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <cb_init>:
 */
static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte);

/* Function definitions ----------------------------------------------- */
uint32_t cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
    if (cb == NULL || buf == NULL || size >= CB_MAX_SIZE)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <cb_init+0x20>
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <cb_init+0x20>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000daa:	d302      	bcc.n	8000db2 <cb_init+0x26>
        return CB_ERROR;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	e012      	b.n	8000dd8 <cb_init+0x4c>

    cb->data = buf;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	601a      	str	r2, [r3, #0]
    cb->size = size;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	605a      	str	r2, [r3, #4]
    cb->writer = 0;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
    cb->reader = 0;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
    cb->overflow = 0;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
    cb->active = 1;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	751a      	strb	r2, [r3, #20]

    return CB_SUCCESS;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <cb_read>:

    return CB_SUCCESS;
}

uint32_t cb_read(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
    int data_count = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00a      	beq.n	8000e14 <cb_read+0x30>
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <cb_read+0x30>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	7d1b      	ldrb	r3, [r3, #20]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f083 0301 	eor.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <cb_read+0x36>
        return CB_ERROR;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	e025      	b.n	8000e66 <cb_read+0x82>

    cb->active = 0;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	751a      	strb	r2, [r3, #20]
    data_count = cb_data_count(cb);
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f000 f872 	bl	8000f0a <cb_data_count>
 8000e26:	4603      	mov	r3, r0
 8000e28:	617b      	str	r3, [r7, #20]
    if (data_count >= nbytes)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d802      	bhi.n	8000e38 <cb_read+0x54>
        num_avail_bytes = nbytes;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e001      	b.n	8000e3c <cb_read+0x58>
    else
        num_avail_bytes = data_count;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < num_avail_bytes; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	e009      	b.n	8000e56 <cb_read+0x72>
        cb_read_byte(cb, (uint8_t *)buf + i);
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	4413      	add	r3, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f000 f8e6 	bl	800101c <cb_read_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbf1      	blt.n	8000e42 <cb_read+0x5e>

    cb->active = 1;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2201      	movs	r2, #1
 8000e62:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000e64:	69fb      	ldr	r3, [r7, #28]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <cb_write>:

uint32_t cb_write(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b088      	sub	sp, #32
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
    int space_count = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00a      	beq.n	8000e9e <cb_write+0x30>
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <cb_write+0x30>
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	7d1b      	ldrb	r3, [r3, #20]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <cb_write+0x36>
        return CB_ERROR;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e02e      	b.n	8000f02 <cb_write+0x94>

    cb->active = 0;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	751a      	strb	r2, [r3, #20]
    space_count = cb_space_count(cb);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f000 f856 	bl	8000f5c <cb_space_count>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	617b      	str	r3, [r7, #20]
    if (space_count >= nbytes)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d805      	bhi.n	8000ec8 <cb_write+0x5a>
    {
        num_avail_bytes = nbytes;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	61fb      	str	r3, [r7, #28]
        cb->overflow = 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	e006      	b.n	8000ed6 <cb_write+0x68>
    }
    else
    {
        num_avail_bytes = space_count;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	61fb      	str	r3, [r7, #28]
        cb->overflow = nbytes - space_count;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
    }

    for (int i = 0; i < num_avail_bytes; i++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	e00a      	b.n	8000ef2 <cb_write+0x84>
        cb_write_byte(cb, *((uint8_t *)buf + i));
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f000 f86e 	bl	8000fc8 <cb_write_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbf0      	blt.n	8000edc <cb_write+0x6e>

    cb->active = 1;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2201      	movs	r2, #1
 8000efe:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000f00:	69fb      	ldr	r3, [r7, #28]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <cb_data_count>:

uint32_t cb_data_count(cbuffer_t *cb)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <cb_data_count+0x18>
        return CB_ERROR;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	e016      	b.n	8000f50 <cb_data_count+0x46>

    if (cb->writer >= cb->reader)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d306      	bcc.n	8000f3c <cb_data_count+0x32>
        res = cb->writer - cb->reader;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e008      	b.n	8000f4e <cb_data_count+0x44>
    else
        res = cb->size - cb->reader + cb->writer;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]

    return res;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <cb_space_count>:

uint32_t cb_space_count(cbuffer_t *cb)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <cb_space_count+0x18>
        return CB_ERROR;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e023      	b.n	8000fbc <cb_space_count+0x60>

    if (cb->reader > cb->writer)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d907      	bls.n	8000f90 <cb_space_count+0x34>
        res = cb->reader - cb->writer - 1;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e014      	b.n	8000fba <cb_space_count+0x5e>
    else if (cb->reader < cb->writer)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d20a      	bcs.n	8000fb2 <cb_space_count+0x56>
        res = cb->size - cb->writer + cb->reader - 1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	1ad2      	subs	r2, r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e003      	b.n	8000fba <cb_space_count+0x5e>
    else
        res = cb->size - 1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]

    return res;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <cb_write_byte>:

/* Private definitions ----------------------------------------------- */
static uint32_t cb_write_byte(cbuffer_t *cb, uint8_t byte)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
    uint32_t next = cb->writer + 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
    if (next == cb->size)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d101      	bne.n	8000fea <cb_write_byte+0x22>
        next = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]

    if (next == cb->reader)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d102      	bne.n	8000ffa <cb_write_byte+0x32>
        return CB_ERROR;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	e00a      	b.n	8001010 <cb_write_byte+0x48>

    *(cb->data + cb->writer) = byte;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	4413      	add	r3, r2
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	701a      	strb	r2, [r3, #0]
    cb->writer = next;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	609a      	str	r2, [r3, #8]
    return CB_SUCCESS;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <cb_read_byte>:

static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
    uint32_t next = cb->reader + 1;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
    if (cb->reader == cb->writer)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	429a      	cmp	r2, r3
 8001038:	d102      	bne.n	8001040 <cb_read_byte+0x24>
        return CB_ERROR;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e012      	b.n	8001066 <cb_read_byte+0x4a>

    if (next == cb->size)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d101      	bne.n	800104e <cb_read_byte+0x32>
        next = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]

    *byte = *(cb->data + cb->reader);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	4413      	add	r3, r2
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	701a      	strb	r2, [r3, #0]
    cb->reader = next;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	60da      	str	r2, [r3, #12]
    return CB_SUCCESS;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <MovingAverageFilter_Init>:
/* Private function prototypes ---------------------------------------- */
/* None */

/* Function definitions ----------------------------------------------- */
void MovingAverageFilter_Init(MovingAverageFilter* filter)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e007      	b.n	8001090 <MovingAverageFilter_Init+0x1e>
        filter->buffer[i] = 0;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2100      	movs	r1, #0
 8001086:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3301      	adds	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d9f4      	bls.n	8001080 <MovingAverageFilter_Init+0xe>
    }
    filter->index = 0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	719a      	strb	r2, [r3, #6]
    filter->is_full = 0;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	71da      	strb	r2, [r3, #7]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b0ac      	sub	sp, #176	@ 0xb0
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f001 fb6f 	bl	8002798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f8f3 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 fa41 	bl	8001544 <MX_GPIO_Init>
  MX_DMA_Init();
 80010c2:	f000 fa1f 	bl	8001504 <MX_DMA_Init>
  MX_ADC1_Init();
 80010c6:	f000 f955 	bl	8001374 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80010ca:	f000 f9f1 	bl	80014b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010ce:	f000 f9a3 	bl	8001418 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MovingAverageFilter_Init(&adc_filter);
 80010d2:	4863      	ldr	r0, [pc, #396]	@ (8001260 <main+0x1b0>)
 80010d4:	f7ff ffcd 	bl	8001072 <MovingAverageFilter_Init>
  cb_init(&adc_buffer, adc_buffer_data, sizeof(adc_buffer_data));
 80010d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010dc:	4961      	ldr	r1, [pc, #388]	@ (8001264 <main+0x1b4>)
 80010de:	4862      	ldr	r0, [pc, #392]	@ (8001268 <main+0x1b8>)
 80010e0:	f7ff fe54 	bl	8000d8c <cb_init>
  QRSDetector_Init(&qrs_detector);
 80010e4:	4861      	ldr	r0, [pc, #388]	@ (800126c <main+0x1bc>)
 80010e6:	f000 fa5b 	bl	80015a0 <QRSDetector_Init>
  memset(qrs_flags, 0, sizeof(qrs_flags));
 80010ea:	2240      	movs	r2, #64	@ 0x40
 80010ec:	2100      	movs	r1, #0
 80010ee:	4860      	ldr	r0, [pc, #384]	@ (8001270 <main+0x1c0>)
 80010f0:	f004 fb92 	bl	8005818 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 80010f4:	485f      	ldr	r0, [pc, #380]	@ (8001274 <main+0x1c4>)
 80010f6:	f003 fb6f 	bl	80047d8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	495e      	ldr	r1, [pc, #376]	@ (8001278 <main+0x1c8>)
 80010fe:	485f      	ldr	r0, [pc, #380]	@ (800127c <main+0x1cc>)
 8001100:	f001 fcbe 	bl	8002a80 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1); // dma knows when the conversion done
 8001104:	485d      	ldr	r0, [pc, #372]	@ (800127c <main+0x1cc>)
 8001106:	f001 fbfd 	bl	8002904 <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(send_flag == 1)
 800110a:	4b5d      	ldr	r3, [pc, #372]	@ (8001280 <main+0x1d0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d1fb      	bne.n	800110a <main+0x5a>
	  {
		  send_flag = 0;
 8001112:	4b5b      	ldr	r3, [pc, #364]	@ (8001280 <main+0x1d0>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
		  memset(sendBuffer, 0, sizeof(sendBuffer));
 8001118:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800111c:	2100      	movs	r1, #0
 800111e:	4859      	ldr	r0, [pc, #356]	@ (8001284 <main+0x1d4>)
 8001120:	f004 fb7a 	bl	8005818 <memset>
		  uint8_t temp_buffer[128]; // 64 sample x 2 byte
		  uint32_t bytes_read = cb_read(&adc_buffer, temp_buffer, 128);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	4619      	mov	r1, r3
 800112a:	484f      	ldr	r0, [pc, #316]	@ (8001268 <main+0x1b8>)
 800112c:	f7ff fe5a 	bl	8000de4 <cb_read>
 8001130:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
			if(bytes_read == 128)
 8001134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001138:	2b80      	cmp	r3, #128	@ 0x80
 800113a:	d175      	bne.n	8001228 <main+0x178>
			{
				for (int i = 0; i < 64; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001142:	e026      	b.n	8001192 <main+0xe2>
				      {
				        uint16_t value = (temp_buffer[i * 2] << 8) | temp_buffer[i * 2 + 1];
 8001144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	33b0      	adds	r3, #176	@ 0xb0
 800114c:	443b      	add	r3, r7
 800114e:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	3301      	adds	r3, #1
 800115e:	33b0      	adds	r3, #176	@ 0xb0
 8001160:	443b      	add	r3, r7
 8001162:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
				        sprintf(&sendBuffer[strlen(sendBuffer)], "%u,", value);
 8001170:	4844      	ldr	r0, [pc, #272]	@ (8001284 <main+0x1d4>)
 8001172:	f7ff f835 	bl	80001e0 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	4a42      	ldr	r2, [pc, #264]	@ (8001284 <main+0x1d4>)
 800117a:	4413      	add	r3, r2
 800117c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001180:	4941      	ldr	r1, [pc, #260]	@ (8001288 <main+0x1d8>)
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fb28 	bl	80057d8 <siprintf>
				for (int i = 0; i < 64; i++)
 8001188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800118c:	3301      	adds	r3, #1
 800118e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001196:	2b3f      	cmp	r3, #63	@ 0x3f
 8001198:	ddd4      	ble.n	8001144 <main+0x94>
				      }
				      // Send QRS Flag (64 bit: 0 / 1)
				      for (int i = 0; i < 64; i++)
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80011a0:	e021      	b.n	80011e6 <main+0x136>
				      {
				        sprintf(&sendBuffer[strlen(sendBuffer)], "%u", qrs_flags[i]);
 80011a2:	4838      	ldr	r0, [pc, #224]	@ (8001284 <main+0x1d4>)
 80011a4:	f7ff f81c 	bl	80001e0 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a36      	ldr	r2, [pc, #216]	@ (8001284 <main+0x1d4>)
 80011ac:	1898      	adds	r0, r3, r2
 80011ae:	4a30      	ldr	r2, [pc, #192]	@ (8001270 <main+0x1c0>)
 80011b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011b4:	4413      	add	r3, r2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4934      	ldr	r1, [pc, #208]	@ (800128c <main+0x1dc>)
 80011bc:	f004 fb0c 	bl	80057d8 <siprintf>
				        if (i < 63) {
 80011c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80011c6:	dc09      	bgt.n	80011dc <main+0x12c>
				          sprintf(&sendBuffer[strlen(sendBuffer)], ",");
 80011c8:	482e      	ldr	r0, [pc, #184]	@ (8001284 <main+0x1d4>)
 80011ca:	f7ff f809 	bl	80001e0 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001284 <main+0x1d4>)
 80011d2:	4413      	add	r3, r2
 80011d4:	492e      	ldr	r1, [pc, #184]	@ (8001290 <main+0x1e0>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fafe 	bl	80057d8 <siprintf>
				      for (int i = 0; i < 64; i++)
 80011dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011e0:	3301      	adds	r3, #1
 80011e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80011e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80011ec:	ddd9      	ble.n	80011a2 <main+0xf2>
				        }
				      }
				      sprintf(&sendBuffer[strlen(sendBuffer)], "\n");
 80011ee:	4825      	ldr	r0, [pc, #148]	@ (8001284 <main+0x1d4>)
 80011f0:	f7fe fff6 	bl	80001e0 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a23      	ldr	r2, [pc, #140]	@ (8001284 <main+0x1d4>)
 80011f8:	4413      	add	r3, r2
 80011fa:	4926      	ldr	r1, [pc, #152]	@ (8001294 <main+0x1e4>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 faeb 	bl	80057d8 <siprintf>
				      HAL_UART_Transmit(&huart2, (uint8_t*)sendBuffer, strlen(sendBuffer), 200);
 8001202:	4820      	ldr	r0, [pc, #128]	@ (8001284 <main+0x1d4>)
 8001204:	f7fe ffec 	bl	80001e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	23c8      	movs	r3, #200	@ 0xc8
 800120e:	491d      	ldr	r1, [pc, #116]	@ (8001284 <main+0x1d4>)
 8001210:	4821      	ldr	r0, [pc, #132]	@ (8001298 <main+0x1e8>)
 8001212:	f003 ff25 	bl	8005060 <HAL_UART_Transmit>

				      memset(qrs_flags, 0, sizeof(qrs_flags));
 8001216:	2240      	movs	r2, #64	@ 0x40
 8001218:	2100      	movs	r1, #0
 800121a:	4815      	ldr	r0, [pc, #84]	@ (8001270 <main+0x1c0>)
 800121c:	f004 fafc 	bl	8005818 <memset>
				      qrs_flag_index = 0;
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <main+0x1ec>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e770      	b.n	800110a <main+0x5a>
			}
			else
			{
				char error_msg[] = "Error reading from buffer\n";
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <main+0x1f0>)
 800122a:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800122e:	461d      	mov	r5, r3
 8001230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001238:	c403      	stmia	r4!, {r0, r1}
 800123a:	8022      	strh	r2, [r4, #0]
 800123c:	3402      	adds	r4, #2
 800123e:	0c13      	lsrs	r3, r2, #16
 8001240:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 200);
 8001242:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001246:	4618      	mov	r0, r3
 8001248:	f7fe ffca 	bl	80001e0 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29a      	uxth	r2, r3
 8001250:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8001254:	23c8      	movs	r3, #200	@ 0xc8
 8001256:	4810      	ldr	r0, [pc, #64]	@ (8001298 <main+0x1e8>)
 8001258:	f003 ff02 	bl	8005060 <HAL_UART_Transmit>
	  if(send_flag == 1)
 800125c:	e755      	b.n	800110a <main+0x5a>
 800125e:	bf00      	nop
 8001260:	20000454 	.word	0x20000454
 8001264:	20000474 	.word	0x20000474
 8001268:	2000045c 	.word	0x2000045c
 800126c:	20000674 	.word	0x20000674
 8001270:	20000078 	.word	0x20000078
 8001274:	20000164 	.word	0x20000164
 8001278:	20000450 	.word	0x20000450
 800127c:	200000bc 	.word	0x200000bc
 8001280:	2000044c 	.word	0x2000044c
 8001284:	200001f4 	.word	0x200001f4
 8001288:	08007190 	.word	0x08007190
 800128c:	08007194 	.word	0x08007194
 8001290:	08007198 	.word	0x08007198
 8001294:	0800719c 	.word	0x0800719c
 8001298:	200001ac 	.word	0x200001ac
 800129c:	200000b8 	.word	0x200000b8
 80012a0:	080071a0 	.word	0x080071a0

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	@ 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2230      	movs	r2, #48	@ 0x30
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fab0 	bl	8005818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <SystemClock_Config+0xc8>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	4a26      	ldr	r2, [pc, #152]	@ (800136c <SystemClock_Config+0xc8>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d8:	4b24      	ldr	r3, [pc, #144]	@ (800136c <SystemClock_Config+0xc8>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <SystemClock_Config+0xcc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a20      	ldr	r2, [pc, #128]	@ (8001370 <SystemClock_Config+0xcc>)
 80012ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <SystemClock_Config+0xcc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2310      	movs	r3, #16
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001314:	2308      	movs	r3, #8
 8001316:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001318:	2364      	movs	r3, #100	@ 0x64
 800131a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001320:	2308      	movs	r3, #8
 8001322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fd6d 	bl	8003e08 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001334:	f000 f92e 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2103      	movs	r1, #3
 8001354:	4618      	mov	r0, r3
 8001356:	f002 ffcf 	bl	80042f8 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001360:	f000 f918 	bl	8001594 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3750      	adds	r7, #80	@ 0x50
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <MX_ADC1_Init+0x98>)
 8001388:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <MX_ADC1_Init+0x9c>)
 800138a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800138c:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_ADC1_Init+0x98>)
 800138e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001392:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_ADC1_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_ADC1_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_ADC1_Init+0x98>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_ADC1_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ae:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_ADC1_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_ADC1_Init+0x98>)
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <MX_ADC1_Init+0xa0>)
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_ADC1_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_ADC1_Init+0x98>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_ADC1_Init+0x98>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_ADC1_Init+0x98>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_ADC1_Init+0x98>)
 80013d6:	f001 fa51 	bl	800287c <HAL_ADC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013e0:	f000 f8d8 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013ec:	2307      	movs	r3, #7
 80013ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_ADC1_Init+0x98>)
 80013f6:	f001 fc51 	bl	8002c9c <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001400:	f000 f8c8 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200000bc 	.word	0x200000bc
 8001410:	40012000 	.word	0x40012000
 8001414:	0f000001 	.word	0x0f000001

08001418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <MX_TIM2_Init+0x94>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1999;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_TIM2_Init+0x94>)
 800143e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_TIM2_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_TIM2_Init+0x94>)
 800144c:	22fa      	movs	r2, #250	@ 0xfa
 800144e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_TIM2_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MX_TIM2_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145c:	4813      	ldr	r0, [pc, #76]	@ (80014ac <MX_TIM2_Init+0x94>)
 800145e:	f003 f96b 	bl	8004738 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001468:	f000 f894 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <MX_TIM2_Init+0x94>)
 800147a:	f003 faff 	bl	8004a7c <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001484:	f000 f886 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_TIM2_Init+0x94>)
 8001496:	f003 fd11 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f000 f878 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000164 	.word	0x20000164

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <MX_USART2_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e8:	f003 fd6a 	bl	8004fc0 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f2:	f000 f84f 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001ac 	.word	0x200001ac
 8001500:	40004400 	.word	0x40004400

08001504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_DMA_Init+0x3c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <MX_DMA_Init+0x3c>)
 8001514:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_DMA_Init+0x3c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2038      	movs	r0, #56	@ 0x38
 800152c:	f001 ff41 	bl	80033b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001530:	2038      	movs	r0, #56	@ 0x38
 8001532:	f001 ff5a 	bl	80033ea <HAL_NVIC_EnableIRQ>

}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_GPIO_Init+0x4c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a0f      	ldr	r2, [pc, #60]	@ (8001590 <MX_GPIO_Init+0x4c>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <MX_GPIO_Init+0x4c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_GPIO_Init+0x4c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <MX_GPIO_Init+0x4c>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_GPIO_Init+0x4c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <Error_Handler+0x8>

080015a0 <QRSDetector_Init>:
static void update_rr_intervals(QRSDetector* detector, uint32_t rr);
static int32_t calculate_slope(QRSDetector* detector);

/* Function definitions ----------------------------------------------- */
void QRSDetector_Init(QRSDetector* detector)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 64; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	75fb      	strb	r3, [r7, #23]
 80015ac:	e007      	b.n	80015be <QRSDetector_Init+0x1e>
        detector->baseline_buffer[i] = 0;
 80015ae:	7dfa      	ldrb	r2, [r7, #23]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2100      	movs	r1, #0
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 64; i++) {
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	3301      	adds	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80015c2:	d9f4      	bls.n	80015ae <QRSDetector_Init+0xe>
    }
    for (uint16_t i = 0; i < 128; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	82bb      	strh	r3, [r7, #20]
 80015c8:	e009      	b.n	80015de <QRSDetector_Init+0x3e>
        detector->highpass_buffer[i] = 0;
 80015ca:	8abb      	ldrh	r3, [r7, #20]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	3344      	adds	r3, #68	@ 0x44
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
    for (uint16_t i = 0; i < 128; i++) {
 80015d8:	8abb      	ldrh	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	82bb      	strh	r3, [r7, #20]
 80015de:	8abb      	ldrh	r3, [r7, #20]
 80015e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80015e2:	d9f2      	bls.n	80015ca <QRSDetector_Init+0x2a>
    }
    for (uint8_t i = 0; i < 5; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	74fb      	strb	r3, [r7, #19]
 80015e8:	e008      	b.n	80015fc <QRSDetector_Init+0x5c>
        detector->lowpass_buffer[i] = 0;
 80015ea:	7cfa      	ldrb	r2, [r7, #19]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3240      	adds	r2, #64	@ 0x40
 80015f0:	2100      	movs	r1, #0
 80015f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 5; i++) {
 80015f6:	7cfb      	ldrb	r3, [r7, #19]
 80015f8:	3301      	adds	r3, #1
 80015fa:	74fb      	strb	r3, [r7, #19]
 80015fc:	7cfb      	ldrb	r3, [r7, #19]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d9f3      	bls.n	80015ea <QRSDetector_Init+0x4a>
    }
    for (uint8_t i = 0; i < 3; i++) {
 8001602:	2300      	movs	r3, #0
 8001604:	74bb      	strb	r3, [r7, #18]
 8001606:	e016      	b.n	8001636 <QRSDetector_Init+0x96>
        detector->notch_60hz_buffer[i] = 0;
 8001608:	7cbb      	ldrb	r3, [r7, #18]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	33c4      	adds	r3, #196	@ 0xc4
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
        detector->notch_50hz_buffer[i] = 0;
 8001616:	7cba      	ldrb	r2, [r7, #18]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	32c8      	adds	r2, #200	@ 0xc8
 800161c:	2100      	movs	r1, #0
 800161e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        detector->early_smooth_buffer[i] = 0;
 8001622:	7cbb      	ldrb	r3, [r7, #18]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	33ca      	adds	r3, #202	@ 0xca
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < 3; i++) {
 8001630:	7cbb      	ldrb	r3, [r7, #18]
 8001632:	3301      	adds	r3, #1
 8001634:	74bb      	strb	r3, [r7, #18]
 8001636:	7cbb      	ldrb	r3, [r7, #18]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d9e5      	bls.n	8001608 <QRSDetector_Init+0x68>
    }
    for (uint8_t i = 0; i < 7; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	747b      	strb	r3, [r7, #17]
 8001640:	e008      	b.n	8001654 <QRSDetector_Init+0xb4>
        detector->display_smooth_buffer[i] = 0;
 8001642:	7c7a      	ldrb	r2, [r7, #17]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	32ce      	adds	r2, #206	@ 0xce
 8001648:	2100      	movs	r1, #0
 800164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 7; i++) {
 800164e:	7c7b      	ldrb	r3, [r7, #17]
 8001650:	3301      	adds	r3, #1
 8001652:	747b      	strb	r3, [r7, #17]
 8001654:	7c7b      	ldrb	r3, [r7, #17]
 8001656:	2b06      	cmp	r3, #6
 8001658:	d9f3      	bls.n	8001642 <QRSDetector_Init+0xa2>
    }
    for (uint8_t i = 0; i < 5; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	743b      	strb	r3, [r7, #16]
 800165e:	e00f      	b.n	8001680 <QRSDetector_Init+0xe0>
        detector->deriv_buffer[i] = 0;
 8001660:	7c3b      	ldrb	r3, [r7, #16]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	33d4      	adds	r3, #212	@ 0xd4
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
        detector->smooth_buffer[i] = 0;
 800166e:	7c3a      	ldrb	r2, [r7, #16]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	32da      	adds	r2, #218	@ 0xda
 8001674:	2100      	movs	r1, #0
 8001676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 5; i++) {
 800167a:	7c3b      	ldrb	r3, [r7, #16]
 800167c:	3301      	adds	r3, #1
 800167e:	743b      	strb	r3, [r7, #16]
 8001680:	7c3b      	ldrb	r3, [r7, #16]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d9ec      	bls.n	8001660 <QRSDetector_Init+0xc0>
    }
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	e009      	b.n	80016a0 <QRSDetector_Init+0x100>
        detector->integ_buffer[i] = 0;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	33de      	adds	r3, #222	@ 0xde
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3301      	adds	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b1e      	cmp	r3, #30
 80016a4:	d9f2      	bls.n	800168c <QRSDetector_Init+0xec>
    }

    detector->integ_index = 0;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    detector->signal_level = 0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
    detector->noise_level = 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    detector->threshold_i1 = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    detector->threshold_i2 = 0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    detector->last_peak_time = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    detector->sample_count = 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    detector->learning_phase = 1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    for (uint8_t i = 0; i < 8; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	73bb      	strb	r3, [r7, #14]
 80016ea:	e009      	b.n	8001700 <QRSDetector_Init+0x160>
        detector->rr_intervals[i] = 0;
 80016ec:	7bba      	ldrb	r2, [r7, #14]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80016f4:	2100      	movs	r1, #0
 80016f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	3301      	adds	r3, #1
 80016fe:	73bb      	strb	r3, [r7, #14]
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	2b07      	cmp	r3, #7
 8001704:	d9f2      	bls.n	80016ec <QRSDetector_Init+0x14c>
    }
    detector->rr_index = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    detector->rr_average1 = 0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
    detector->rr_average2 = 0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
    detector->rr_count = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

    detector->last_qrs_slope = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	0000      	movs	r0, r0
 800173c:	0000      	movs	r0, r0
	...

08001740 <QRSDetector_Process>:

uint8_t QRSDetector_Process(QRSDetector* detector, uint16_t new_sample)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b0b8      	sub	sp, #224	@ 0xe0
 8001744:	af08      	add	r7, sp, #32
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
    // Bước 1: Loại bỏ dao động baseline
    int32_t baseline_removed = baseline_removal(detector, new_sample);
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f9d9 	bl	8001b08 <baseline_removal>
 8001756:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    // Bước 2: Lọc thông dải (bandpass filter)
    int32_t bandpass = bandpass_filter(detector, baseline_removed);
 800175a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fa0e 	bl	8001b80 <bandpass_filter>
 8001764:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

    // Bước 3: Lọc notch để loại bỏ nhiễu 60 Hz
    int32_t notched_60hz = notch_filter_60hz(detector, bandpass);
 8001768:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fa8f 	bl	8001c90 <notch_filter_60hz>
 8001772:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

    // Bước 4: Lọc notch để loại bỏ nhiễu 50 Hz
    int32_t notched_50hz = notch_filter_50hz(detector, notched_60hz);
 8001776:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fae8 	bl	8001d50 <notch_filter_50hz>
 8001780:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

    // Bước 5: Làm mượt sớm
    int32_t early_smoothed = early_smooth(detector, notched_50hz);
 8001784:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fb3b 	bl	8001e04 <early_smooth>
 800178e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    // Bước 6: Đạo hàm
    int32_t deriv = derivative(detector, early_smoothed);
 8001792:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fbb6 	bl	8001f08 <derivative>
 800179c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

    // Bước 7: Bình phương
    int32_t squared = squaring(deriv);
 80017a0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80017a4:	f000 fbe2 	bl	8001f6c <squaring>
 80017a8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    // Bước 8: Làm mượt
    int32_t smoothed = smooth_signal(detector, squared);
 80017ac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fbe9 	bl	8001f88 <smooth_signal>
 80017b6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    // Bước 9: Tích phân cửa sổ trượt
    int32_t integrated = moving_window_integration(detector, smoothed);
 80017ba:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fc22 	bl	8002008 <moving_window_integration>
 80017c4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    // Bước 10: Làm mượt tín hiệu để hiển thị (không ảnh hưởng đến phát hiện QRS)
    int32_t display_smoothed = display_smooth(detector, early_smoothed);
 80017c8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fb5b 	bl	8001e88 <display_smooth>
 80017d2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    // Debug: Gửi các giá trị trung gian để giám sát
    char debug_msg[120];
    sprintf(debug_msg, "BL:%ld,BP:%ld,Notch60:%ld,Notch50:%ld,ESmooth:%ld,DisplaySmooth:%ld,Deriv:%ld,Sq:%ld,Smooth:%ld,Integ:%ld\n",
 80017d6:	f107 000c 	add.w	r0, r7, #12
 80017da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017de:	9307      	str	r3, [sp, #28]
 80017e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017e4:	9306      	str	r3, [sp, #24]
 80017e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017ea:	9305      	str	r3, [sp, #20]
 80017ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017f0:	9304      	str	r3, [sp, #16]
 80017f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800180e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001812:	49b9      	ldr	r1, [pc, #740]	@ (8001af8 <QRSDetector_Process+0x3b8>)
 8001814:	f003 ffe0 	bl	80057d8 <siprintf>
            baseline_removed, bandpass, notched_60hz, notched_50hz, early_smoothed, display_smoothed, deriv, squared, smoothed, integrated);
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 200);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fcdf 	bl	80001e0 <strlen>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	f107 010c 	add.w	r1, r7, #12
 800182a:	23c8      	movs	r3, #200	@ 0xc8
 800182c:	48b3      	ldr	r0, [pc, #716]	@ (8001afc <QRSDetector_Process+0x3bc>)
 800182e:	f003 fc17 	bl	8005060 <HAL_UART_Transmit>

    // Bước 11: Giai đoạn học (2 giây đầu tiên)
    if (detector->learning_phase) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8096 	beq.w	800196a <QRSDetector_Process+0x22a>
        detector->sample_count++;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
        if (detector->sample_count < QRS_LEARNING_SAMPLES) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 8001852:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001856:	d216      	bcs.n	8001886 <QRSDetector_Process+0x146>
            if (integrated > detector->signal_level) detector->signal_level = integrated;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 800185e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001862:	429a      	cmp	r2, r3
 8001864:	dd04      	ble.n	8001870 <QRSDetector_Process+0x130>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800186c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
            detector->noise_level += integrated;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8001876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800187a:	441a      	add	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
            return 0;
 8001882:	2300      	movs	r3, #0
 8001884:	e125      	b.n	8001ad2 <QRSDetector_Process+0x392>
        } else {
            detector->noise_level /= QRS_LEARNING_SAMPLES;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800188c:	4a9c      	ldr	r2, [pc, #624]	@ (8001b00 <QRSDetector_Process+0x3c0>)
 800188e:	fb82 1203 	smull	r1, r2, r2, r3
 8001892:	11d2      	asrs	r2, r2, #7
 8001894:	17db      	asrs	r3, r3, #31
 8001896:	1ad2      	subs	r2, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
            detector->signal_level /= 2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 80018a4:	0fda      	lsrs	r2, r3, #31
 80018a6:	4413      	add	r3, r2
 80018a8:	105b      	asrs	r3, r3, #1
 80018aa:	461a      	mov	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
            detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe ff65 	bl	8000788 <__aeabi_i2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	@ 0x3fc
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe ff59 	bl	8000788 <__aeabi_i2d>
 80018d6:	a382      	add	r3, pc, #520	@ (adr r3, 8001ae0 <QRSDetector_Process+0x3a0>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fcd8 	bl	8000290 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fe02 	bl	80004f0 <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f83a 	bl	800096c <__aeabi_d2iz>
 80018f8:	4602      	mov	r2, r0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
            detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe ff3e 	bl	8000788 <__aeabi_i2d>
 800190c:	a376      	add	r3, pc, #472	@ (adr r3, 8001ae8 <QRSDetector_Process+0x3a8>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fcbd 	bl	8000290 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff f825 	bl	800096c <__aeabi_d2iz>
 8001922:	4602      	mov	r2, r0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
            detector->learning_phase = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            detector->sample_count = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410

            // Debug: Gửi ngưỡng sau giai đoạn học
            sprintf(debug_msg, "ThreshI1:%ld,ThreshI2:%ld\n", detector->threshold_i1, detector->threshold_i2);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001946:	f107 000c 	add.w	r0, r7, #12
 800194a:	496e      	ldr	r1, [pc, #440]	@ (8001b04 <QRSDetector_Process+0x3c4>)
 800194c:	f003 ff44 	bl	80057d8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 200);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fc43 	bl	80001e0 <strlen>
 800195a:	4603      	mov	r3, r0
 800195c:	b29a      	uxth	r2, r3
 800195e:	f107 010c 	add.w	r1, r7, #12
 8001962:	23c8      	movs	r3, #200	@ 0xc8
 8001964:	4865      	ldr	r0, [pc, #404]	@ (8001afc <QRSDetector_Process+0x3bc>)
 8001966:	f003 fb7b 	bl	8005060 <HAL_UART_Transmit>
        }
    }

    // Bước 12: Phát hiện đỉnh
    uint8_t is_qrs = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    if (integrated > detector->threshold_i1) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001976:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800197a:	429a      	cmp	r2, r3
 800197c:	dd55      	ble.n	8001a2a <QRSDetector_Process+0x2ea>
        uint32_t time_since_last = detector->sample_count - detector->last_peak_time;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        // Kiểm tra giai đoạn trơ
        if (time_since_last < QRS_REFRACTORY_PERIOD) {
 8001990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001994:	2b25      	cmp	r3, #37	@ 0x25
 8001996:	d807      	bhi.n	80019a8 <QRSDetector_Process+0x268>
            update_thresholds(detector, integrated, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fb7a 	bl	8002098 <update_thresholds>
            return 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e094      	b.n	8001ad2 <QRSDetector_Process+0x392>
        }

        // Phân biệt sóng T
        if (time_since_last < QRS_TWAVE_PERIOD && detector->last_qrs_slope > 0) {
 80019a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019ac:	2b47      	cmp	r3, #71	@ 0x47
 80019ae:	d81c      	bhi.n	80019ea <QRSDetector_Process+0x2aa>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	@ 0x448
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dd17      	ble.n	80019ea <QRSDetector_Process+0x2aa>
            int32_t current_slope = calculate_slope(detector);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fccc 	bl	8002358 <calculate_slope>
 80019c0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            if (current_slope < detector->last_qrs_slope / 2) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 3448 	ldr.w	r3, [r3, #1096]	@ 0x448
 80019ca:	0fda      	lsrs	r2, r3, #31
 80019cc:	4413      	add	r3, r2
 80019ce:	105b      	asrs	r3, r3, #1
 80019d0:	461a      	mov	r2, r3
 80019d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019d6:	4293      	cmp	r3, r2
 80019d8:	da07      	bge.n	80019ea <QRSDetector_Process+0x2aa>
                update_thresholds(detector, integrated, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb59 	bl	8002098 <update_thresholds>
                return 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e073      	b.n	8001ad2 <QRSDetector_Process+0x392>
            }
        }

        // Đỉnh QRS hợp lệ
        is_qrs = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        detector->last_qrs_slope = calculate_slope(detector);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fcb1 	bl	8002358 <calculate_slope>
 80019f6:	4602      	mov	r2, r0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
        update_thresholds(detector, integrated, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fb47 	bl	8002098 <update_thresholds>
        uint32_t rr = time_since_last;
 8001a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        update_rr_intervals(detector, rr);
 8001a12:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 fbe6 	bl	80021e8 <update_rr_intervals>
        detector->last_peak_time = detector->sample_count;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
 8001a28:	e04a      	b.n	8001ac0 <QRSDetector_Process+0x380>
    } else if (detector->rr_average1 > 0 &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d045      	beq.n	8001ac0 <QRSDetector_Process+0x380>
               (detector->sample_count - detector->last_peak_time) > (uint32_t)(QRS_SEARCHBACK_FACTOR * detector->rr_average1)) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001a40:	1ad4      	subs	r4, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fe8d 	bl	8000768 <__aeabi_ui2d>
 8001a4e:	a328      	add	r3, pc, #160	@ (adr r3, 8001af0 <QRSDetector_Process+0x3b0>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fc1c 	bl	8000290 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7fe ffac 	bl	80009bc <__aeabi_d2uiz>
 8001a64:	4603      	mov	r3, r0
    } else if (detector->rr_average1 > 0 &&
 8001a66:	429c      	cmp	r4, r3
 8001a68:	d92a      	bls.n	8001ac0 <QRSDetector_Process+0x380>
        if (integrated > detector->threshold_i2) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001a70:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dd23      	ble.n	8001ac0 <QRSDetector_Process+0x380>
            is_qrs = 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
            detector->last_qrs_slope = calculate_slope(detector);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fc6a 	bl	8002358 <calculate_slope>
 8001a84:	4602      	mov	r2, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
            update_thresholds(detector, integrated, 1);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fb00 	bl	8002098 <update_thresholds>
            uint32_t rr = detector->sample_count - detector->last_peak_time;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            update_rr_intervals(detector, rr);
 8001aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fb9a 	bl	80021e8 <update_rr_intervals>
            detector->last_peak_time = detector->sample_count;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	@ 0x410
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
    }

    detector->sample_count++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    return is_qrs;
 8001ace:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	37c0      	adds	r7, #192	@ 0xc0
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	f3af 8000 	nop.w
 8001ae0:	eb851eb8 	.word	0xeb851eb8
 8001ae4:	3f8eb851 	.word	0x3f8eb851
 8001ae8:	33333333 	.word	0x33333333
 8001aec:	3fc33333 	.word	0x3fc33333
 8001af0:	28f5c28f 	.word	0x28f5c28f
 8001af4:	3ffa8f5c 	.word	0x3ffa8f5c
 8001af8:	080071bc 	.word	0x080071bc
 8001afc:	200001ac 	.word	0x200001ac
 8001b00:	51eb851f 	.word	0x51eb851f
 8001b04:	08007228 	.word	0x08007228

08001b08 <baseline_removal>:

/* Private definitions ----------------------------------------------- */
static int32_t baseline_removal(QRSDetector* detector, int32_t new_sample)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
    // Bộ lọc thông cao để loại bỏ dao động baseline (cutoff ~0.9 Hz tại 200 Hz)
    for (uint16_t i = 31; i > 0; i--) {
 8001b12:	231f      	movs	r3, #31
 8001b14:	82fb      	strh	r3, [r7, #22]
 8001b16:	e00b      	b.n	8001b30 <baseline_removal+0x28>
        detector->baseline_buffer[i] = detector->baseline_buffer[i - 1];
 8001b18:	8afb      	ldrh	r3, [r7, #22]
 8001b1a:	1e59      	subs	r1, r3, #1
 8001b1c:	8afa      	ldrh	r2, [r7, #22]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint16_t i = 31; i > 0; i--) {
 8001b2a:	8afb      	ldrh	r3, [r7, #22]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	82fb      	strh	r3, [r7, #22]
 8001b30:	8afb      	ldrh	r3, [r7, #22]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <baseline_removal+0x10>
    }
    detector->baseline_buffer[0] = new_sample;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	601a      	str	r2, [r3, #0]

    int32_t baseline = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 32; i++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e009      	b.n	8001b5a <baseline_removal+0x52>
        baseline += detector->baseline_buffer[i];
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4413      	add	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 32; i++) {
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	3301      	adds	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b1f      	cmp	r3, #31
 8001b5e:	d9f2      	bls.n	8001b46 <baseline_removal+0x3e>
    }
    baseline /= 32;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da00      	bge.n	8001b68 <baseline_removal+0x60>
 8001b66:	331f      	adds	r3, #31
 8001b68:	115b      	asrs	r3, r3, #5
 8001b6a:	613b      	str	r3, [r7, #16]

    return new_sample - baseline;
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <bandpass_filter>:

static int32_t bandpass_filter(QRSDetector* detector, int32_t new_sample)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
    // Bộ lọc thông thấp (cutoff ~40 Hz tại 200 Hz)
    for (uint8_t i = 4; i > 0; i--) {
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	77fb      	strb	r3, [r7, #31]
 8001b8e:	e00d      	b.n	8001bac <bandpass_filter+0x2c>
        detector->lowpass_buffer[i] = detector->lowpass_buffer[i - 1];
 8001b90:	7ffb      	ldrb	r3, [r7, #31]
 8001b92:	1e59      	subs	r1, r3, #1
 8001b94:	7ffa      	ldrb	r2, [r7, #31]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3140      	adds	r1, #64	@ 0x40
 8001b9a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3240      	adds	r2, #64	@ 0x40
 8001ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 4; i > 0; i--) {
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ee      	bne.n	8001b90 <bandpass_filter+0x10>
    }
    detector->lowpass_buffer[0] = new_sample;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

    int32_t lowpass = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < 5; i++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]
 8001bc2:	e00a      	b.n	8001bda <bandpass_filter+0x5a>
        lowpass += detector->lowpass_buffer[i];
 8001bc4:	7dfa      	ldrb	r2, [r7, #23]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3240      	adds	r2, #64	@ 0x40
 8001bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < 5; i++) {
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d9f1      	bls.n	8001bc4 <bandpass_filter+0x44>
    }
    lowpass /= 5;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4a28      	ldr	r2, [pc, #160]	@ (8001c84 <bandpass_filter+0x104>)
 8001be4:	fb82 1203 	smull	r1, r2, r2, r3
 8001be8:	1052      	asrs	r2, r2, #1
 8001bea:	17db      	asrs	r3, r3, #31
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	61bb      	str	r3, [r7, #24]

    // Bộ lọc thông cao (cutoff ~0.5 Hz tại 200 Hz)
    for (uint16_t i = 127; i > 0; i--) {
 8001bf0:	237f      	movs	r3, #127	@ 0x7f
 8001bf2:	82bb      	strh	r3, [r7, #20]
 8001bf4:	e010      	b.n	8001c18 <bandpass_filter+0x98>
        detector->highpass_buffer[i] = detector->highpass_buffer[i - 1];
 8001bf6:	8abb      	ldrh	r3, [r7, #20]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	8ab8      	ldrh	r0, [r7, #20]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	3344      	adds	r3, #68	@ 0x44
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f100 0344 	add.w	r3, r0, #68	@ 0x44
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	605a      	str	r2, [r3, #4]
    for (uint16_t i = 127; i > 0; i--) {
 8001c12:	8abb      	ldrh	r3, [r7, #20]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	82bb      	strh	r3, [r7, #20]
 8001c18:	8abb      	ldrh	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1eb      	bne.n	8001bf6 <bandpass_filter+0x76>
    }
    detector->highpass_buffer[0] = lowpass;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    int32_t highpass = detector->highpass_buffer[0] - detector->highpass_buffer[127] / 128;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da00      	bge.n	8001c38 <bandpass_filter+0xb8>
 8001c36:	337f      	adds	r3, #127	@ 0x7f
 8001c38:	11db      	asrs	r3, r3, #7
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < 127; i++) {
 8001c40:	2300      	movs	r3, #0
 8001c42:	81fb      	strh	r3, [r7, #14]
 8001c44:	e00b      	b.n	8001c5e <bandpass_filter+0xde>
        highpass += detector->highpass_buffer[i];
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	3344      	adds	r3, #68	@ 0x44
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < 127; i++) {
 8001c58:	89fb      	ldrh	r3, [r7, #14]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	81fb      	strh	r3, [r7, #14]
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c62:	d9f0      	bls.n	8001c46 <bandpass_filter+0xc6>
    }
    highpass = highpass / 127;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <bandpass_filter+0x108>)
 8001c68:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6c:	441a      	add	r2, r3
 8001c6e:	1192      	asrs	r2, r2, #6
 8001c70:	17db      	asrs	r3, r3, #31
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	613b      	str	r3, [r7, #16]

    return highpass;
 8001c76:	693b      	ldr	r3, [r7, #16]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3724      	adds	r7, #36	@ 0x24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	66666667 	.word	0x66666667
 8001c88:	81020409 	.word	0x81020409
 8001c8c:	00000000 	.word	0x00000000

08001c90 <notch_filter_60hz>:

static int32_t notch_filter_60hz(QRSDetector* detector, int32_t filtered)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
    // Bộ lọc notch đơn giản cho nhiễu 60 Hz
    // Sử dụng bộ lọc IIR notch: y[n] = x[n] - 2*cos(2πf0/fs)*y[n-1] + y[n-2]
    // f0 = 60 Hz, fs = 200 Hz
    const float omega = 2.0 * M_PI * 60.0 / 200.0;
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <notch_filter_60hz+0xb8>)
 8001c9c:	613b      	str	r3, [r7, #16]
    const float coeff = 2.15 * cos(omega);
 8001c9e:	6938      	ldr	r0, [r7, #16]
 8001ca0:	f7fe fd84 	bl	80007ac <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	ec43 2b10 	vmov	d0, r2, r3
 8001cac:	f004 fa34 	bl	8006118 <cos>
 8001cb0:	ec51 0b10 	vmov	r0, r1, d0
 8001cb4:	a322      	add	r3, pc, #136	@ (adr r3, 8001d40 <notch_filter_60hz+0xb0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fae9 	bl	8000290 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe fe99 	bl	80009fc <__aeabi_d2f>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60fb      	str	r3, [r7, #12]

    // Lưu trữ các giá trị trước đó
    for (uint8_t i = 2; i > 0; i--) {
 8001cce:	2302      	movs	r3, #2
 8001cd0:	75fb      	strb	r3, [r7, #23]
 8001cd2:	e010      	b.n	8001cf6 <notch_filter_60hz+0x66>
        detector->notch_60hz_buffer[i] = detector->notch_60hz_buffer[i - 1];
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	7df8      	ldrb	r0, [r7, #23]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	33c4      	adds	r3, #196	@ 0xc4
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	f100 03c4 	add.w	r3, r0, #196	@ 0xc4
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 2; i > 0; i--) {
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	75fb      	strb	r3, [r7, #23]
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1eb      	bne.n	8001cd4 <notch_filter_60hz+0x44>
    }
    detector->notch_60hz_buffer[0] = filtered;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

    // Tính toán đầu ra bộ lọc notch
    int32_t notched = filtered - (int32_t)(coeff * detector->notch_60hz_buffer[1]) + detector->notch_60hz_buffer[2];
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8d3 3318 	ldr.w	r3, [r3, #792]	@ 0x318
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1e:	ee17 2a90 	vmov	r2, s15
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	1a9a      	subs	r2, r3, r2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
    return notched;
 8001d30:	68bb      	ldr	r3, [r7, #8]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	33333333 	.word	0x33333333
 8001d44:	40013333 	.word	0x40013333
 8001d48:	3ff1463a 	.word	0x3ff1463a
 8001d4c:	00000000 	.word	0x00000000

08001d50 <notch_filter_50hz>:

static int32_t notch_filter_50hz(QRSDetector* detector, int32_t filtered)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    // Bộ lọc notch đơn giản cho nhiễu 50 Hz
    // Sử dụng bộ lọc IIR notch: y[n] = x[n] - 2*cos(2πf0/fs)*y[n-1] + y[n-2]
    // f0 = 50 Hz, fs = 200 Hz
    const float omega = 2.0 * M_PI * 50.0 / 200.0;
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <notch_filter_50hz+0xb0>)
 8001d5c:	613b      	str	r3, [r7, #16]
    const float coeff = 2.15 * cos(omega);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	f7fe fd24 	bl	80007ac <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	ec43 2b10 	vmov	d0, r2, r3
 8001d6c:	f004 f9d4 	bl	8006118 <cos>
 8001d70:	ec51 0b10 	vmov	r0, r1, d0
 8001d74:	a320      	add	r3, pc, #128	@ (adr r3, 8001df8 <notch_filter_50hz+0xa8>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fa89 	bl	8000290 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe fe39 	bl	80009fc <__aeabi_d2f>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	60fb      	str	r3, [r7, #12]

    // Lưu trữ các giá trị trước đó
    for (uint8_t i = 2; i > 0; i--) {
 8001d8e:	2302      	movs	r3, #2
 8001d90:	75fb      	strb	r3, [r7, #23]
 8001d92:	e00d      	b.n	8001db0 <notch_filter_50hz+0x60>
        detector->notch_50hz_buffer[i] = detector->notch_50hz_buffer[i - 1];
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	1e59      	subs	r1, r3, #1
 8001d98:	7dfa      	ldrb	r2, [r7, #23]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	31c8      	adds	r1, #200	@ 0xc8
 8001d9e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	32c8      	adds	r2, #200	@ 0xc8
 8001da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 2; i > 0; i--) {
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ee      	bne.n	8001d94 <notch_filter_50hz+0x44>
    }
    detector->notch_50hz_buffer[0] = filtered;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

    // Tính toán đầu ra bộ lọc notch
    int32_t notched = filtered - (int32_t)(coeff * detector->notch_50hz_buffer[1]) + detector->notch_50hz_buffer[2];
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd8:	ee17 2a90 	vmov	r2, s15
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	1a9a      	subs	r2, r3, r2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8001de6:	4413      	add	r3, r2
 8001de8:	60bb      	str	r3, [r7, #8]
    return notched;
 8001dea:	68bb      	ldr	r3, [r7, #8]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	f3af 8000 	nop.w
 8001df8:	33333333 	.word	0x33333333
 8001dfc:	40013333 	.word	0x40013333
 8001e00:	3fc90fdb 	.word	0x3fc90fdb

08001e04 <early_smooth>:

static int32_t early_smooth(QRSDetector* detector, int32_t filtered)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    // Làm mượt sớm để giảm nhiễu trước khi lấy đạo hàm
    for (uint8_t i = 2; i > 0; i--) {
 8001e0e:	2302      	movs	r3, #2
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e010      	b.n	8001e36 <early_smooth+0x32>
        detector->early_smooth_buffer[i] = detector->early_smooth_buffer[i - 1];
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	7df8      	ldrb	r0, [r7, #23]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	33ca      	adds	r3, #202	@ 0xca
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	f100 03ca 	add.w	r3, r0, #202	@ 0xca
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 2; i > 0; i--) {
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1eb      	bne.n	8001e14 <early_smooth+0x10>
    }
    detector->early_smooth_buffer[0] = filtered;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c

    int32_t smoothed = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 3; i++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e00b      	b.n	8001e66 <early_smooth+0x62>
        smoothed += detector->early_smooth_buffer[i];
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	33ca      	adds	r3, #202	@ 0xca
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 3; i++) {
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	3301      	adds	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d9f0      	bls.n	8001e4e <early_smooth+0x4a>
    }
    return smoothed / 3;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4a05      	ldr	r2, [pc, #20]	@ (8001e84 <early_smooth+0x80>)
 8001e70:	fb82 1203 	smull	r1, r2, r2, r3
 8001e74:	17db      	asrs	r3, r3, #31
 8001e76:	1ad3      	subs	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	55555556 	.word	0x55555556

08001e88 <display_smooth>:

static int32_t display_smooth(QRSDetector* detector, int32_t filtered)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
    // Làm mượt tín hiệu để hiển thị
    for (uint8_t i = 6; i > 0; i--) {
 8001e92:	2306      	movs	r3, #6
 8001e94:	75fb      	strb	r3, [r7, #23]
 8001e96:	e00d      	b.n	8001eb4 <display_smooth+0x2c>
        detector->display_smooth_buffer[i] = detector->display_smooth_buffer[i - 1];
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	1e59      	subs	r1, r3, #1
 8001e9c:	7dfa      	ldrb	r2, [r7, #23]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	31ce      	adds	r1, #206	@ 0xce
 8001ea2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	32ce      	adds	r2, #206	@ 0xce
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 6; i > 0; i--) {
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ee      	bne.n	8001e98 <display_smooth+0x10>
    }
    detector->display_smooth_buffer[0] = filtered;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338

    int32_t smoothed = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 7; i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e00a      	b.n	8001ee2 <display_smooth+0x5a>
        smoothed += detector->display_smooth_buffer[i];
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	32ce      	adds	r2, #206	@ 0xce
 8001ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 7; i++) {
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b06      	cmp	r3, #6
 8001ee6:	d9f1      	bls.n	8001ecc <display_smooth+0x44>
    }
    return smoothed / 7;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4a06      	ldr	r2, [pc, #24]	@ (8001f04 <display_smooth+0x7c>)
 8001eec:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef0:	441a      	add	r2, r3
 8001ef2:	1092      	asrs	r2, r2, #2
 8001ef4:	17db      	asrs	r3, r3, #31
 8001ef6:	1ad3      	subs	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	92492493 	.word	0x92492493

08001f08 <derivative>:

static int32_t derivative(QRSDetector* detector, int32_t smoothed)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 4; i > 0; i--) {
 8001f12:	2304      	movs	r3, #4
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e010      	b.n	8001f3a <derivative+0x32>
        detector->deriv_buffer[i] = detector->deriv_buffer[i - 1];
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	7bf8      	ldrb	r0, [r7, #15]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	33d4      	adds	r3, #212	@ 0xd4
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	f100 03d4 	add.w	r3, r0, #212	@ 0xd4
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 4; i > 0; i--) {
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1eb      	bne.n	8001f18 <derivative+0x10>
    }
    detector->deriv_buffer[0] = smoothed;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Đạo hàm đơn giản để giảm khuếch đại nhiễu
    int32_t deriv = (detector->deriv_buffer[0] - detector->deriv_buffer[2]) / 2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 335c 	ldr.w	r3, [r3, #860]	@ 0x35c
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	0fda      	lsrs	r2, r3, #31
 8001f58:	4413      	add	r3, r2
 8001f5a:	105b      	asrs	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
    return deriv;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <squaring>:

static int32_t squaring(int32_t deriv)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    return deriv * deriv;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	fb03 f303 	mul.w	r3, r3, r3
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <smooth_signal>:

static int32_t smooth_signal(QRSDetector* detector, int32_t squared)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
    // Bộ lọc trung bình trượt để làm mượt tín hiệu sau bình phương
    for (uint8_t i = 4; i > 0; i--) {
 8001f92:	2304      	movs	r3, #4
 8001f94:	75fb      	strb	r3, [r7, #23]
 8001f96:	e00d      	b.n	8001fb4 <smooth_signal+0x2c>
        detector->smooth_buffer[i] = detector->smooth_buffer[i - 1];
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	1e59      	subs	r1, r3, #1
 8001f9c:	7dfa      	ldrb	r2, [r7, #23]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	31da      	adds	r1, #218	@ 0xda
 8001fa2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	32da      	adds	r2, #218	@ 0xda
 8001faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 4; i > 0; i--) {
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	75fb      	strb	r3, [r7, #23]
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ee      	bne.n	8001f98 <smooth_signal+0x10>
    }
    detector->smooth_buffer[0] = squared;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    int32_t smoothed = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 5; i++) {
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e00a      	b.n	8001fe2 <smooth_signal+0x5a>
        smoothed += detector->smooth_buffer[i];
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	32da      	adds	r2, #218	@ 0xda
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 5; i++) {
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d9f1      	bls.n	8001fcc <smooth_signal+0x44>
    }
    return smoothed / 5;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <smooth_signal+0x7c>)
 8001fec:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff0:	1052      	asrs	r2, r2, #1
 8001ff2:	17db      	asrs	r3, r3, #31
 8001ff4:	1ad3      	subs	r3, r2, r3
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	66666667 	.word	0x66666667

08002008 <moving_window_integration>:

static int32_t moving_window_integration(QRSDetector* detector, int32_t smoothed)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
    detector->integ_buffer[detector->integ_index] = smoothed;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 33f8 	ldrb.w	r3, [r3, #1016]	@ 0x3f8
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	33de      	adds	r3, #222	@ 0xde
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	605a      	str	r2, [r3, #4]
    detector->integ_index = (detector->integ_index + 1) % QRS_WINDOW_SIZE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 33f8 	ldrb.w	r3, [r3, #1016]	@ 0x3f8
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <moving_window_integration+0x88>)
 800202e:	fb83 1302 	smull	r1, r3, r3, r2
 8002032:	4413      	add	r3, r2
 8002034:	1119      	asrs	r1, r3, #4
 8002036:	17d3      	asrs	r3, r2, #31
 8002038:	1ac9      	subs	r1, r1, r3
 800203a:	460b      	mov	r3, r1
 800203c:	015b      	lsls	r3, r3, #5
 800203e:	1a5b      	subs	r3, r3, r1
 8002040:	1ad1      	subs	r1, r2, r3
 8002042:	b2ca      	uxtb	r2, r1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8

    int32_t sum = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 800204e:	2300      	movs	r3, #0
 8002050:	72fb      	strb	r3, [r7, #11]
 8002052:	e00b      	b.n	800206c <moving_window_integration+0x64>
        sum += detector->integ_buffer[i];
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	33de      	adds	r3, #222	@ 0xde
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	3301      	adds	r3, #1
 800206a:	72fb      	strb	r3, [r7, #11]
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	2b1e      	cmp	r3, #30
 8002070:	d9f0      	bls.n	8002054 <moving_window_integration+0x4c>
    }
    return sum / QRS_WINDOW_SIZE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <moving_window_integration+0x88>)
 8002076:	fb82 1203 	smull	r1, r2, r2, r3
 800207a:	441a      	add	r2, r3
 800207c:	1112      	asrs	r2, r2, #4
 800207e:	17db      	asrs	r3, r3, #31
 8002080:	1ad3      	subs	r3, r2, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	84210843 	.word	0x84210843
 8002094:	00000000 	.word	0x00000000

08002098 <update_thresholds>:

static void update_thresholds(QRSDetector* detector, int32_t peak, uint8_t is_qrs)
{
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	4613      	mov	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
    if (is_qrs) {
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d028      	beq.n	80020fe <update_thresholds+0x66>
        detector->signal_level = 0.125 * peak + 0.875 * detector->signal_level;
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f7fe fb6b 	bl	8000788 <__aeabi_i2d>
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80020ba:	f7fe f8e9 	bl	8000290 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4614      	mov	r4, r2
 80020c4:	461d      	mov	r5, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fb5b 	bl	8000788 <__aeabi_i2d>
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b42      	ldr	r3, [pc, #264]	@ (80021e0 <update_thresholds+0x148>)
 80020d8:	f7fe f8da 	bl	8000290 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe fa04 	bl	80004f0 <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7fe fc3c 	bl	800096c <__aeabi_d2iz>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
 80020fc:	e027      	b.n	800214e <update_thresholds+0xb6>
    } else {
        detector->noise_level = 0.125 * peak + 0.875 * detector->noise_level;
 80020fe:	68b8      	ldr	r0, [r7, #8]
 8002100:	f7fe fb42 	bl	8000788 <__aeabi_i2d>
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800210c:	f7fe f8c0 	bl	8000290 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4614      	mov	r4, r2
 8002116:	461d      	mov	r5, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fb32 	bl	8000788 <__aeabi_i2d>
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <update_thresholds+0x148>)
 800212a:	f7fe f8b1 	bl	8000290 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f9db 	bl	80004f0 <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fc13 	bl	800096c <__aeabi_d2iz>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    }

    detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fb17 	bl	8000788 <__aeabi_i2d>
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	@ 0x3fc
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fb0b 	bl	8000788 <__aeabi_i2d>
 8002172:	a317      	add	r3, pc, #92	@ (adr r3, 80021d0 <update_thresholds+0x138>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	f7fe f88a 	bl	8000290 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe f9b4 	bl	80004f0 <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fbec 	bl	800096c <__aeabi_d2iz>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe faf0 	bl	8000788 <__aeabi_i2d>
 80021a8:	a30b      	add	r3, pc, #44	@ (adr r3, 80021d8 <update_thresholds+0x140>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f86f 	bl	8000290 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fbd7 	bl	800096c <__aeabi_d2iz>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdb0      	pop	{r4, r5, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	eb851eb8 	.word	0xeb851eb8
 80021d4:	3f8eb851 	.word	0x3f8eb851
 80021d8:	33333333 	.word	0x33333333
 80021dc:	3fc33333 	.word	0x3fc33333
 80021e0:	3fec0000 	.word	0x3fec0000
 80021e4:	00000000 	.word	0x00000000

080021e8 <update_rr_intervals>:

static void update_rr_intervals(QRSDetector* detector, uint32_t rr)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
    detector->rr_intervals[detector->rr_index] = rr;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    detector->rr_index = (detector->rr_index + 1) % 8;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800220c:	3301      	adds	r3, #1
 800220e:	425a      	negs	r2, r3
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	f002 0207 	and.w	r2, r2, #7
 8002218:	bf58      	it	pl
 800221a:	4253      	negpl	r3, r2
 800221c:	b2da      	uxtb	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    if (detector->rr_count < 8) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800222a:	2b07      	cmp	r3, #7
 800222c:	d807      	bhi.n	800223e <update_rr_intervals+0x56>
        detector->rr_count++;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8002234:	3301      	adds	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    }

    uint32_t sum1 = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8002242:	2300      	movs	r3, #0
 8002244:	74fb      	strb	r3, [r7, #19]
 8002246:	e00b      	b.n	8002260 <update_rr_intervals+0x78>
        sum1 += detector->rr_intervals[i];
 8002248:	7cfa      	ldrb	r2, [r7, #19]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4413      	add	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	3301      	adds	r3, #1
 800225e:	74fb      	strb	r3, [r7, #19]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8002266:	7cfa      	ldrb	r2, [r7, #19]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3ed      	bcc.n	8002248 <update_rr_intervals+0x60>
    }
    detector->rr_average1 = sum1 / detector->rr_count;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8002272:	461a      	mov	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fbb3 f2f2 	udiv	r2, r3, r2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c

    uint32_t sum2 = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
    uint8_t count2 = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8002288:	2300      	movs	r3, #0
 800228a:	72bb      	strb	r3, [r7, #10]
 800228c:	e042      	b.n	8002314 <update_rr_intervals+0x12c>
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 800228e:	7aba      	ldrb	r2, [r7, #10]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8002296:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fa61 	bl	8000768 <__aeabi_ui2d>
 80022a6:	a328      	add	r3, pc, #160	@ (adr r3, 8002348 <update_rr_intervals+0x160>)
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f7fd fff0 	bl	8000290 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe fb80 	bl	80009bc <__aeabi_d2uiz>
 80022bc:	4603      	mov	r3, r0
 80022be:	429c      	cmp	r4, r3
 80022c0:	d325      	bcc.n	800230e <update_rr_intervals+0x126>
            detector->rr_intervals[i] <= (uint32_t)(QRS_RR_LIMIT_HIGH * detector->rr_average1)) {
 80022c2:	7aba      	ldrb	r2, [r7, #10]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80022ca:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fa47 	bl	8000768 <__aeabi_ui2d>
 80022da:	a31d      	add	r3, pc, #116	@ (adr r3, 8002350 <update_rr_intervals+0x168>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fd ffd6 	bl	8000290 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fb66 	bl	80009bc <__aeabi_d2uiz>
 80022f0:	4603      	mov	r3, r0
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 80022f2:	429c      	cmp	r4, r3
 80022f4:	d80b      	bhi.n	800230e <update_rr_intervals+0x126>
            sum2 += detector->rr_intervals[i];
 80022f6:	7aba      	ldrb	r2, [r7, #10]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4413      	add	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
            count2++;
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	3301      	adds	r3, #1
 800230c:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 800230e:	7abb      	ldrb	r3, [r7, #10]
 8002310:	3301      	adds	r3, #1
 8002312:	72bb      	strb	r3, [r7, #10]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800231a:	7aba      	ldrb	r2, [r7, #10]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3b6      	bcc.n	800228e <update_rr_intervals+0xa6>
        }
    }
    detector->rr_average2 = (count2 > 0) ? (sum2 / count2) : detector->rr_average1;
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <update_rr_intervals+0x148>
 8002326:	7afb      	ldrb	r3, [r7, #11]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	e002      	b.n	8002336 <update_rr_intervals+0x14e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
}
 800233c:	bf00      	nop
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	f3af 8000 	nop.w
 8002348:	d70a3d71 	.word	0xd70a3d71
 800234c:	3fed70a3 	.word	0x3fed70a3
 8002350:	28f5c28f 	.word	0x28f5c28f
 8002354:	3ff28f5c 	.word	0x3ff28f5c

08002358 <calculate_slope>:

static int32_t calculate_slope(QRSDetector* detector)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    int32_t slope = detector->deriv_buffer[0] - detector->deriv_buffer[2];
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 335c 	ldr.w	r3, [r3, #860]	@ 0x35c
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	60fb      	str	r3, [r7, #12]
    return (slope > 0) ? slope : -slope;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	bfb8      	it	lt
 8002376:	425b      	neglt	r3, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_MspInit+0x4c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_MspInit+0x4c>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002398:	6453      	str	r3, [r2, #68]	@ 0x44
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_MspInit+0x4c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_MspInit+0x4c>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <HAL_MspInit+0x4c>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_MspInit+0x4c>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023c2:	2007      	movs	r0, #7
 80023c4:	f000 ffea 	bl	800339c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	@ (80024b0 <HAL_ADC_MspInit+0xdc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d157      	bne.n	80024a6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b2e      	ldr	r3, [pc, #184]	@ (80024b4 <HAL_ADC_MspInit+0xe0>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	4a2d      	ldr	r2, [pc, #180]	@ (80024b4 <HAL_ADC_MspInit+0xe0>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002404:	6453      	str	r3, [r2, #68]	@ 0x44
 8002406:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_ADC_MspInit+0xe0>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b27      	ldr	r3, [pc, #156]	@ (80024b4 <HAL_ADC_MspInit+0xe0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	4a26      	ldr	r2, [pc, #152]	@ (80024b4 <HAL_ADC_MspInit+0xe0>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	@ 0x30
 8002422:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_ADC_MspInit+0xe0>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800242e:	2301      	movs	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002432:	2303      	movs	r3, #3
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	481d      	ldr	r0, [pc, #116]	@ (80024b8 <HAL_ADC_MspInit+0xe4>)
 8002442:	f001 fb5d 	bl	8003b00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002446:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002448:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <HAL_ADC_MspInit+0xec>)
 800244a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 800244e:	2200      	movs	r2, #0
 8002450:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002452:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002458:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800245e:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002460:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002464:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002468:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800246c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800246e:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002474:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002476:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002478:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002484:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800248a:	480c      	ldr	r0, [pc, #48]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 800248c:	f000 ffc8 	bl	8003420 <HAL_DMA_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002496:	f7ff f87d 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 800249e:	639a      	str	r2, [r3, #56]	@ 0x38
 80024a0:	4a06      	ldr	r2, [pc, #24]	@ (80024bc <HAL_ADC_MspInit+0xe8>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	@ 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40012000 	.word	0x40012000
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	20000104 	.word	0x20000104
 80024c0:	40026410 	.word	0x40026410

080024c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d4:	d115      	bne.n	8002502 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_TIM_Base_MspInit+0x48>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <HAL_TIM_Base_MspInit+0x48>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_TIM_Base_MspInit+0x48>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	201c      	movs	r0, #28
 80024f8:	f000 ff5b 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024fc:	201c      	movs	r0, #28
 80024fe:	f000 ff74 	bl	80033ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	@ (8002594 <HAL_UART_MspInit+0x84>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d12b      	bne.n	800258a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_UART_MspInit+0x88>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800256a:	230c      	movs	r3, #12
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800257a:	2307      	movs	r3, #7
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	@ (800259c <HAL_UART_MspInit+0x8c>)
 8002586:	f001 fabb 	bl	8003b00 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40004400 	.word	0x40004400
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <NMI_Handler+0x4>

080025a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <MemManage_Handler+0x4>

080025b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f000 f921 	bl	800283c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  // Sử dụng trực tiếp giá trị ADC thô (b�? qua bộ l�?c trung bình trượt)
  uint16_t raw_value = (uint16_t)ADC_value;
 8002606:	4b1f      	ldr	r3, [pc, #124]	@ (8002684 <TIM2_IRQHandler+0x84>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	80fb      	strh	r3, [r7, #6]

  // Phát hiện QRS
  uint8_t is_qrs = QRSDetector_Process(&qrs_detector, raw_value);
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	4619      	mov	r1, r3
 8002610:	481d      	ldr	r0, [pc, #116]	@ (8002688 <TIM2_IRQHandler+0x88>)
 8002612:	f7ff f895 	bl	8001740 <QRSDetector_Process>
 8002616:	4603      	mov	r3, r0
 8002618:	717b      	strb	r3, [r7, #5]

  // Lưu c�? QRS vào mảng
  if (qrs_flag_index < 64) {
 800261a:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <TIM2_IRQHandler+0x8c>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002620:	d80b      	bhi.n	800263a <TIM2_IRQHandler+0x3a>
    qrs_flags[qrs_flag_index] = is_qrs;
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <TIM2_IRQHandler+0x8c>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <TIM2_IRQHandler+0x90>)
 800262a:	797b      	ldrb	r3, [r7, #5]
 800262c:	5453      	strb	r3, [r2, r1]
    qrs_flag_index++;
 800262e:	4b17      	ldr	r3, [pc, #92]	@ (800268c <TIM2_IRQHandler+0x8c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b15      	ldr	r3, [pc, #84]	@ (800268c <TIM2_IRQHandler+0x8c>)
 8002638:	701a      	strb	r2, [r3, #0]
  }

  // Ghi giá trị ADC thô vào Circular Buffer (giá trị 16-bit, chia thành 2 byte)
  uint8_t high_byte = (raw_value >> 8) & 0xFF; // Byte cao
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b29b      	uxth	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	713b      	strb	r3, [r7, #4]
  uint8_t low_byte = raw_value & 0xFF;         // Byte thấp
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	70fb      	strb	r3, [r7, #3]
  cb_write(&adc_buffer, &high_byte, 1);
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2201      	movs	r2, #1
 800264e:	4619      	mov	r1, r3
 8002650:	4810      	ldr	r0, [pc, #64]	@ (8002694 <TIM2_IRQHandler+0x94>)
 8002652:	f7fe fc0c 	bl	8000e6e <cb_write>
  cb_write(&adc_buffer, &low_byte, 1);
 8002656:	1cfb      	adds	r3, r7, #3
 8002658:	2201      	movs	r2, #1
 800265a:	4619      	mov	r1, r3
 800265c:	480d      	ldr	r0, [pc, #52]	@ (8002694 <TIM2_IRQHandler+0x94>)
 800265e:	f7fe fc06 	bl	8000e6e <cb_write>

  // Kiểm tra số lượng dữ liệu trong bộ đệm
  if (cb_data_count(&adc_buffer) >= 128) // 128 byte = 64 mẫu (mỗi mẫu 2 byte)
 8002662:	480c      	ldr	r0, [pc, #48]	@ (8002694 <TIM2_IRQHandler+0x94>)
 8002664:	f7fe fc51 	bl	8000f0a <cb_data_count>
 8002668:	4603      	mov	r3, r0
 800266a:	2b7f      	cmp	r3, #127	@ 0x7f
 800266c:	d902      	bls.n	8002674 <TIM2_IRQHandler+0x74>
  {
    send_flag = 1; // �?ặt c�? để gửi dữ liệu trong main
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <TIM2_IRQHandler+0x98>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002674:	4809      	ldr	r0, [pc, #36]	@ (800269c <TIM2_IRQHandler+0x9c>)
 8002676:	f002 f911 	bl	800489c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000450 	.word	0x20000450
 8002688:	20000674 	.word	0x20000674
 800268c:	200000b8 	.word	0x200000b8
 8002690:	20000078 	.word	0x20000078
 8002694:	2000045c 	.word	0x2000045c
 8002698:	2000044c 	.word	0x2000044c
 800269c:	20000164 	.word	0x20000164

080026a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <DMA2_Stream0_IRQHandler+0x10>)
 80026a6:	f000 ffc1 	bl	800362c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000104 	.word	0x20000104

080026b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026bc:	4a14      	ldr	r2, [pc, #80]	@ (8002710 <_sbrk+0x5c>)
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <_sbrk+0x60>)
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c8:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <_sbrk+0x64>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	@ (800271c <_sbrk+0x68>)
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d207      	bcs.n	80026f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e4:	f003 f8a0 	bl	8005828 <__errno>
 80026e8:	4603      	mov	r3, r0
 80026ea:	220c      	movs	r2, #12
 80026ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e009      	b.n	8002708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fa:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <_sbrk+0x64>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <_sbrk+0x64>)
 8002704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20020000 	.word	0x20020000
 8002714:	00000400 	.word	0x00000400
 8002718:	20000ac0 	.word	0x20000ac0
 800271c:	20000c10 	.word	0x20000c10

08002720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <SystemInit+0x20>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <SystemInit+0x20>)
 800272c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800277c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002748:	f7ff ffea 	bl	8002720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800274c:	480c      	ldr	r0, [pc, #48]	@ (8002780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800274e:	490d      	ldr	r1, [pc, #52]	@ (8002784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002754:	e002      	b.n	800275c <LoopCopyDataInit>

08002756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275a:	3304      	adds	r3, #4

0800275c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800275c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002760:	d3f9      	bcc.n	8002756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002764:	4c0a      	ldr	r4, [pc, #40]	@ (8002790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002768:	e001      	b.n	800276e <LoopFillZerobss>

0800276a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800276c:	3204      	adds	r2, #4

0800276e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002770:	d3fb      	bcc.n	800276a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002772:	f003 f85f 	bl	8005834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002776:	f7fe fc9b 	bl	80010b0 <main>
  bx  lr    
 800277a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800277c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002784:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002788:	08007480 	.word	0x08007480
  ldr r2, =_sbss
 800278c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002790:	20000c10 	.word	0x20000c10

08002794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002794:	e7fe      	b.n	8002794 <ADC_IRQHandler>
	...

08002798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800279c:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <HAL_Init+0x40>)
 80027a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <HAL_Init+0x40>)
 80027ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a07      	ldr	r2, [pc, #28]	@ (80027d8 <HAL_Init+0x40>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c0:	2003      	movs	r0, #3
 80027c2:	f000 fdeb 	bl	800339c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 f808 	bl	80027dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027cc:	f7ff fdda 	bl	8002384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00

080027dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_InitTick+0x54>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_InitTick+0x58>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fe03 	bl	8003406 <HAL_SYSTICK_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e00e      	b.n	8002828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d80a      	bhi.n	8002826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002810:	2200      	movs	r2, #0
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	f000 fdcb 	bl	80033b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800281c:	4a06      	ldr	r2, [pc, #24]	@ (8002838 <HAL_InitTick+0x5c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000000 	.word	0x20000000
 8002834:	20000008 	.word	0x20000008
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_IncTick+0x20>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_IncTick+0x24>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4413      	add	r3, r2
 800284c:	4a04      	ldr	r2, [pc, #16]	@ (8002860 <HAL_IncTick+0x24>)
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000008 	.word	0x20000008
 8002860:	20000ac4 	.word	0x20000ac4

08002864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return uwTick;
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <HAL_GetTick+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000ac4 	.word	0x20000ac4

0800287c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e033      	b.n	80028fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fd9a 	bl	80023d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028c2:	f023 0302 	bic.w	r3, r3, #2
 80028c6:	f043 0202 	orr.w	r2, r3, #2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fb16 	bl	8002f00 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ea:	e001      	b.n	80028f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_ADC_Start_IT+0x1a>
 800291a:	2302      	movs	r3, #2
 800291c:	e0a1      	b.n	8002a62 <HAL_ADC_Start_IT+0x15e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d018      	beq.n	8002966 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002944:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_ADC_Start_IT+0x16c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_ADC_Start_IT+0x170>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0c9a      	lsrs	r2, r3, #18
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002958:	e002      	b.n	8002960 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3b01      	subs	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f9      	bne.n	800295a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d169      	bne.n	8002a48 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800299e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b2:	d106      	bne.n	80029c2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	f023 0206 	bic.w	r2, r3, #6
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	645a      	str	r2, [r3, #68]	@ 0x44
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d0:	4b29      	ldr	r3, [pc, #164]	@ (8002a78 <HAL_ADC_Start_IT+0x174>)
 80029d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80029dc:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029ec:	f043 0320 	orr.w	r3, r3, #32
 80029f0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d129      	bne.n	8002a60 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	e020      	b.n	8002a60 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a16      	ldr	r2, [pc, #88]	@ (8002a7c <HAL_ADC_Start_IT+0x178>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d11b      	bne.n	8002a60 <HAL_ADC_Start_IT+0x15c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d114      	bne.n	8002a60 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	e00b      	b.n	8002a60 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f043 0210 	orr.w	r2, r3, #16
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000000 	.word	0x20000000
 8002a74:	431bde83 	.word	0x431bde83
 8002a78:	40012300 	.word	0x40012300
 8002a7c:	40012000 	.word	0x40012000

08002a80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Start_DMA+0x1e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e0ce      	b.n	8002c3c <HAL_ADC_Start_DMA+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d018      	beq.n	8002ae6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8002c44 <HAL_ADC_Start_DMA+0x1c4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c48 <HAL_ADC_Start_DMA+0x1c8>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0c9a      	lsrs	r2, r3, #18
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f9      	bne.n	8002ada <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af4:	d107      	bne.n	8002b06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b04:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 8086 	bne.w	8002c22 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b54:	d106      	bne.n	8002b64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f023 0206 	bic.w	r2, r3, #6
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b72:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_ADC_Start_DMA+0x1cc>)
 8002b74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	4a35      	ldr	r2, [pc, #212]	@ (8002c50 <HAL_ADC_Start_DMA+0x1d0>)
 8002b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	4a34      	ldr	r2, [pc, #208]	@ (8002c54 <HAL_ADC_Start_DMA+0x1d4>)
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8a:	4a33      	ldr	r2, [pc, #204]	@ (8002c58 <HAL_ADC_Start_DMA+0x1d8>)
 8002b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002ba6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	334c      	adds	r3, #76	@ 0x4c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f000 fcd8 	bl	800357c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d129      	bne.n	8002c3a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	e020      	b.n	8002c3a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <HAL_ADC_Start_DMA+0x1dc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d11b      	bne.n	8002c3a <HAL_ADC_Start_DMA+0x1ba>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d114      	bne.n	8002c3a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	e00b      	b.n	8002c3a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000000 	.word	0x20000000
 8002c48:	431bde83 	.word	0x431bde83
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	080030f9 	.word	0x080030f9
 8002c54:	080031b3 	.word	0x080031b3
 8002c58:	080031cf 	.word	0x080031cf
 8002c5c:	40012000 	.word	0x40012000

08002c60 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e113      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x244>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b09      	cmp	r3, #9
 8002cc6:	d925      	bls.n	8002d14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68d9      	ldr	r1, [r3, #12]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b1e      	subs	r3, #30
 8002cde:	2207      	movs	r2, #7
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	400a      	ands	r2, r1
 8002cec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68d9      	ldr	r1, [r3, #12]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4403      	add	r3, r0
 8002d06:	3b1e      	subs	r3, #30
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	e022      	b.n	8002d5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6919      	ldr	r1, [r3, #16]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	2207      	movs	r2, #7
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	400a      	ands	r2, r1
 8002d36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4403      	add	r3, r0
 8002d50:	409a      	lsls	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d824      	bhi.n	8002dac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	3b05      	subs	r3, #5
 8002d74:	221f      	movs	r2, #31
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	400a      	ands	r2, r1
 8002d82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b05      	subs	r3, #5
 8002d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002daa:	e04c      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d824      	bhi.n	8002dfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b23      	subs	r3, #35	@ 0x23
 8002dc6:	221f      	movs	r2, #31
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	3b23      	subs	r3, #35	@ 0x23
 8002df0:	fa00 f203 	lsl.w	r2, r0, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dfc:	e023      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b41      	subs	r3, #65	@ 0x41
 8002e10:	221f      	movs	r2, #31
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	3b41      	subs	r3, #65	@ 0x41
 8002e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e46:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_ADC_ConfigChannel+0x250>)
 8002e48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a28      	ldr	r2, [pc, #160]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x254>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10f      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x1d8>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b12      	cmp	r3, #18
 8002e5a:	d10b      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef0 <HAL_ADC_ConfigChannel+0x254>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d12b      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x23a>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x258>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x1f4>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b11      	cmp	r3, #17
 8002e8e:	d122      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_ADC_ConfigChannel+0x258>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d111      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x25c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <HAL_ADC_ConfigChannel+0x260>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	0c9a      	lsrs	r2, r3, #18
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ec8:	e002      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f9      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40012300 	.word	0x40012300
 8002ef0:	40012000 	.word	0x40012000
 8002ef4:	10000012 	.word	0x10000012
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	431bde83 	.word	0x431bde83

08002f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f08:	4b79      	ldr	r3, [pc, #484]	@ (80030f0 <ADC_Init+0x1f0>)
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	4a58      	ldr	r2, [pc, #352]	@ (80030f4 <ADC_Init+0x1f4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e00f      	b.n	8002ffe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ffc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0202 	bic.w	r2, r2, #2
 800300c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7e1b      	ldrb	r3, [r3, #24]
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800303a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800304a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	035a      	lsls	r2, r3, #13
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e007      	b.n	8003074 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003082:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	3b01      	subs	r3, #1
 8003090:	051a      	lsls	r2, r3, #20
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030b6:	025a      	lsls	r2, r3, #9
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	029a      	lsls	r2, r3, #10
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012300 	.word	0x40012300
 80030f4:	0f000001 	.word	0x0f000001

080030f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800310e:	2b00      	cmp	r3, #0
 8003110:	d13c      	bne.n	800318c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d12b      	bne.n	8003184 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003130:	2b00      	cmp	r3, #0
 8003132:	d127      	bne.n	8003184 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800314c:	2b00      	cmp	r3, #0
 800314e:	d119      	bne.n	8003184 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0220 	bic.w	r2, r2, #32
 800315e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff fd6b 	bl	8002c60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800318a:	e00e      	b.n	80031aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fd75 	bl	8002c88 <HAL_ADC_ErrorCallback>
}
 800319e:	e004      	b.n	80031aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff fd57 	bl	8002c74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031da:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2240      	movs	r2, #64	@ 0x40
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f043 0204 	orr.w	r2, r3, #4
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff fd4a 	bl	8002c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	@ (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4907      	ldr	r1, [pc, #28]	@ (8003298 <__NVIC_EnableIRQ+0x38>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db0a      	blt.n	80032c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	490c      	ldr	r1, [pc, #48]	@ (80032e8 <__NVIC_SetPriority+0x4c>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	440b      	add	r3, r1
 80032c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c4:	e00a      	b.n	80032dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4908      	ldr	r1, [pc, #32]	@ (80032ec <__NVIC_SetPriority+0x50>)
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	3b04      	subs	r3, #4
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	440b      	add	r3, r1
 80032da:	761a      	strb	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	@ 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	2b04      	cmp	r3, #4
 800330c:	bf28      	it	cs
 800330e:	2304      	movcs	r3, #4
 8003310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3304      	adds	r3, #4
 8003316:	2b06      	cmp	r3, #6
 8003318:	d902      	bls.n	8003320 <NVIC_EncodePriority+0x30>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3b03      	subs	r3, #3
 800331e:	e000      	b.n	8003322 <NVIC_EncodePriority+0x32>
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	401a      	ands	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003338:	f04f 31ff 	mov.w	r1, #4294967295
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43d9      	mvns	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	4313      	orrs	r3, r2
         );
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	@ 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003368:	d301      	bcc.n	800336e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336a:	2301      	movs	r3, #1
 800336c:	e00f      	b.n	800338e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <SysTick_Config+0x40>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003376:	210f      	movs	r1, #15
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	f7ff ff8e 	bl	800329c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <SysTick_Config+0x40>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003386:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <SysTick_Config+0x40>)
 8003388:	2207      	movs	r2, #7
 800338a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff29 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c4:	f7ff ff3e 	bl	8003244 <__NVIC_GetPriorityGrouping>
 80033c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	6978      	ldr	r0, [r7, #20]
 80033d0:	f7ff ff8e 	bl	80032f0 <NVIC_EncodePriority>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff5d 	bl	800329c <__NVIC_SetPriority>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff31 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffa2 	bl	8003358 <SysTick_Config>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff fa1a 	bl	8002864 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e099      	b.n	8003570 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345c:	e00f      	b.n	800347e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800345e:	f7ff fa01 	bl	8002864 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b05      	cmp	r3, #5
 800346a:	d908      	bls.n	800347e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2203      	movs	r2, #3
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e078      	b.n	8003570 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e8      	bne.n	800345e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <HAL_DMA_Init+0x158>)
 8003498:	4013      	ands	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d107      	bne.n	80034e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e0:	4313      	orrs	r3, r2
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	2b04      	cmp	r3, #4
 8003510:	d117      	bne.n	8003542 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa6f 	bl	8003a08 <DMA_CheckFifoParam>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2240      	movs	r2, #64	@ 0x40
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800353e:	2301      	movs	r3, #1
 8003540:	e016      	b.n	8003570 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa26 	bl	800399c <DMA_CalcBaseAndBitshift>
 8003550:	4603      	mov	r3, r0
 8003552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	223f      	movs	r2, #63	@ 0x3f
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	f010803f 	.word	0xf010803f

0800357c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003592:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_DMA_Start_IT+0x26>
 800359e:	2302      	movs	r3, #2
 80035a0:	e040      	b.n	8003624 <HAL_DMA_Start_IT+0xa8>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d12f      	bne.n	8003616 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f9b8 	bl	8003940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	223f      	movs	r2, #63	@ 0x3f
 80035d6:	409a      	lsls	r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0216 	orr.w	r2, r2, #22
 80035ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0208 	orr.w	r2, r2, #8
 8003602:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e005      	b.n	8003622 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003622:	7dfb      	ldrb	r3, [r7, #23]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003638:	4b8e      	ldr	r3, [pc, #568]	@ (8003874 <HAL_DMA_IRQHandler+0x248>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a8e      	ldr	r2, [pc, #568]	@ (8003878 <HAL_DMA_IRQHandler+0x24c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	2208      	movs	r2, #8
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01a      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	2208      	movs	r2, #8
 8003686:	409a      	lsls	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	2201      	movs	r2, #1
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d012      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f0:	2204      	movs	r2, #4
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	2210      	movs	r2, #16
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d043      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03c      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	2210      	movs	r2, #16
 8003728:	409a      	lsls	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d018      	beq.n	800376e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d024      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
 800375a:	e01f      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01b      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e016      	b.n	800379c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0208 	bic.w	r2, r2, #8
 800378a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	2220      	movs	r2, #32
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 808f 	beq.w	80038cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8087 	beq.w	80038cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c2:	2220      	movs	r2, #32
 80037c4:	409a      	lsls	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d136      	bne.n	8003844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0216 	bic.w	r2, r2, #22
 80037e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_DMA_IRQHandler+0x1da>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	223f      	movs	r2, #63	@ 0x3f
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003836:	2b00      	cmp	r3, #0
 8003838:	d07e      	beq.n	8003938 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
        }
        return;
 8003842:	e079      	b.n	8003938 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01d      	beq.n	800388e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10d      	bne.n	800387c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	2b00      	cmp	r3, #0
 8003866:	d031      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e02c      	b.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
 8003872:	bf00      	nop
 8003874:	20000000 	.word	0x20000000
 8003878:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d023      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
 800388c:	e01e      	b.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10f      	bne.n	80038bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0210 	bic.w	r2, r2, #16
 80038aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d032      	beq.n	800393a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d022      	beq.n	8003926 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2205      	movs	r2, #5
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	d307      	bcc.n	8003914 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f2      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x2cc>
 8003912:	e000      	b.n	8003916 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003914:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
 8003936:	e000      	b.n	800393a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003938:	bf00      	nop
    }
  }
}
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800395c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b40      	cmp	r3, #64	@ 0x40
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3b10      	subs	r3, #16
 80039ac:	4a14      	ldr	r2, [pc, #80]	@ (8003a00 <DMA_CalcBaseAndBitshift+0x64>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b6:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <DMA_CalcBaseAndBitshift+0x68>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d909      	bls.n	80039de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	659a      	str	r2, [r3, #88]	@ 0x58
 80039dc:	e007      	b.n	80039ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	aaaaaaab 	.word	0xaaaaaaab
 8003a04:	0800725c 	.word	0x0800725c

08003a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11f      	bne.n	8003a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d856      	bhi.n	8003ad6 <DMA_CheckFifoParam+0xce>
 8003a28:	a201      	add	r2, pc, #4	@ (adr r2, 8003a30 <DMA_CheckFifoParam+0x28>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a53 	.word	0x08003a53
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003ad7 	.word	0x08003ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d046      	beq.n	8003ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e043      	b.n	8003ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a5a:	d140      	bne.n	8003ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e03d      	b.n	8003ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6a:	d121      	bne.n	8003ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d837      	bhi.n	8003ae2 <DMA_CheckFifoParam+0xda>
 8003a72:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <DMA_CheckFifoParam+0x70>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a8f 	.word	0x08003a8f
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003aa1 	.word	0x08003aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e030      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d025      	beq.n	8003ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e022      	b.n	8003ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aa8:	d11f      	bne.n	8003aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aae:	e01c      	b.n	8003aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d903      	bls.n	8003abe <DMA_CheckFifoParam+0xb6>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d003      	beq.n	8003ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003abc:	e018      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac2:	e015      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e00b      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e00a      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e008      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e006      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
    }
  } 
  
  return status; 
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	@ 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e159      	b.n	8003dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f040 8148 	bne.w	8003dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d130      	bne.n	8003bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 0201 	and.w	r2, r3, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d017      	beq.n	8003bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d123      	bne.n	8003c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	08da      	lsrs	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3208      	adds	r2, #8
 8003c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	08da      	lsrs	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0203 	and.w	r2, r3, #3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a2 	beq.w	8003dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b57      	ldr	r3, [pc, #348]	@ (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	4a56      	ldr	r2, [pc, #344]	@ (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c96:	4b54      	ldr	r3, [pc, #336]	@ (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca2:	4a52      	ldr	r2, [pc, #328]	@ (8003dec <HAL_GPIO_Init+0x2ec>)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	3302      	adds	r3, #2
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a49      	ldr	r2, [pc, #292]	@ (8003df0 <HAL_GPIO_Init+0x2f0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d019      	beq.n	8003d02 <HAL_GPIO_Init+0x202>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a48      	ldr	r2, [pc, #288]	@ (8003df4 <HAL_GPIO_Init+0x2f4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_GPIO_Init+0x1fe>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a47      	ldr	r2, [pc, #284]	@ (8003df8 <HAL_GPIO_Init+0x2f8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00d      	beq.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a46      	ldr	r2, [pc, #280]	@ (8003dfc <HAL_GPIO_Init+0x2fc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <HAL_GPIO_Init+0x1f6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a45      	ldr	r2, [pc, #276]	@ (8003e00 <HAL_GPIO_Init+0x300>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_GPIO_Init+0x1f2>
 8003cee:	2304      	movs	r3, #4
 8003cf0:	e008      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003d02:	2300      	movs	r3, #0
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d14:	4935      	ldr	r1, [pc, #212]	@ (8003dec <HAL_GPIO_Init+0x2ec>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d22:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d46:	4a2f      	ldr	r2, [pc, #188]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d70:	4a24      	ldr	r2, [pc, #144]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d76:	4b23      	ldr	r3, [pc, #140]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da0:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e04 <HAL_GPIO_Init+0x304>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f67f aea2 	bls.w	8003b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3724      	adds	r7, #36	@ 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020c00 	.word	0x40020c00
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e267      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d075      	beq.n	8003f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e26:	4b88      	ldr	r3, [pc, #544]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d00c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	4b85      	ldr	r3, [pc, #532]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d112      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3e:	4b82      	ldr	r3, [pc, #520]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x108>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d157      	bne.n	8003f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e242      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x74>
 8003e6e:	4b76      	ldr	r3, [pc, #472]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a75      	ldr	r2, [pc, #468]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e01d      	b.n	8003eb8 <HAL_RCC_OscConfig+0xb0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x98>
 8003e86:	4b70      	ldr	r3, [pc, #448]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b6d      	ldr	r3, [pc, #436]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6c      	ldr	r2, [pc, #432]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0xb0>
 8003ea0:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a68      	ldr	r2, [pc, #416]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b66      	ldr	r3, [pc, #408]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a65      	ldr	r2, [pc, #404]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fcd0 	bl	8002864 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fccc 	bl	8002864 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e207      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b5b      	ldr	r3, [pc, #364]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xc0>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fcbc 	bl	8002864 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fcb8 	bl	8002864 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	@ 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e1f3      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	4b51      	ldr	r3, [pc, #324]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xe8>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d063      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2a:	4b47      	ldr	r3, [pc, #284]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d11c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f36:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d116      	bne.n	8003f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	4b41      	ldr	r3, [pc, #260]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCC_OscConfig+0x152>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e1c7      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4937      	ldr	r1, [pc, #220]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6e:	e03a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f78:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCC_OscConfig+0x244>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fc71 	bl	8002864 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f86:	f7fe fc6d 	bl	8002864 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1a8      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4925      	ldr	r1, [pc, #148]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fba:	4b24      	ldr	r3, [pc, #144]	@ (800404c <HAL_RCC_OscConfig+0x244>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fc50 	bl	8002864 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc8:	f7fe fc4c 	bl	8002864 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e187      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fda:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d036      	beq.n	8004060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <HAL_RCC_OscConfig+0x248>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fe fc30 	bl	8002864 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004008:	f7fe fc2c 	bl	8002864 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e167      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401a:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_RCC_OscConfig+0x240>)
 800401c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x200>
 8004026:	e01b      	b.n	8004060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004028:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_RCC_OscConfig+0x248>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fe fc19 	bl	8002864 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	e00e      	b.n	8004054 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004036:	f7fe fc15 	bl	8002864 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d907      	bls.n	8004054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e150      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	4b88      	ldr	r3, [pc, #544]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ea      	bne.n	8004036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8097 	beq.w	800419c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004072:	4b81      	ldr	r3, [pc, #516]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	4b7d      	ldr	r3, [pc, #500]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	4a7c      	ldr	r2, [pc, #496]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800408c:	6413      	str	r3, [r2, #64]	@ 0x40
 800408e:	4b7a      	ldr	r3, [pc, #488]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b77      	ldr	r3, [pc, #476]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d118      	bne.n	80040dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040aa:	4b74      	ldr	r3, [pc, #464]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a73      	ldr	r2, [pc, #460]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b6:	f7fe fbd5 	bl	8002864 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7fe fbd1 	bl	8002864 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e10c      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	4b6a      	ldr	r3, [pc, #424]	@ (800427c <HAL_RCC_OscConfig+0x474>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2ea>
 80040e4:	4b64      	ldr	r3, [pc, #400]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e8:	4a63      	ldr	r2, [pc, #396]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f0:	e01c      	b.n	800412c <HAL_RCC_OscConfig+0x324>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x30c>
 80040fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	6713      	str	r3, [r2, #112]	@ 0x70
 8004106:	4b5c      	ldr	r3, [pc, #368]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410a:	4a5b      	ldr	r2, [pc, #364]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6713      	str	r3, [r2, #112]	@ 0x70
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0x324>
 8004114:	4b58      	ldr	r3, [pc, #352]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004118:	4a57      	ldr	r2, [pc, #348]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004120:	4b55      	ldr	r3, [pc, #340]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004124:	4a54      	ldr	r2, [pc, #336]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004126:	f023 0304 	bic.w	r3, r3, #4
 800412a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d015      	beq.n	8004160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fe fb96 	bl	8002864 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe fb92 	bl	8002864 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0cb      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	4b49      	ldr	r3, [pc, #292]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0ee      	beq.n	800413c <HAL_RCC_OscConfig+0x334>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004160:	f7fe fb80 	bl	8002864 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004166:	e00a      	b.n	800417e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fe fb7c 	bl	8002864 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0b5      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417e:	4b3e      	ldr	r3, [pc, #248]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1ee      	bne.n	8004168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004190:	4b39      	ldr	r3, [pc, #228]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	4a38      	ldr	r2, [pc, #224]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a1 	beq.w	80042e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a6:	4b34      	ldr	r3, [pc, #208]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d05c      	beq.n	800426c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d141      	bne.n	800423e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <HAL_RCC_OscConfig+0x478>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fe fb50 	bl	8002864 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe fb4c 	bl	8002864 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e087      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	019b      	lsls	r3, r3, #6
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	041b      	lsls	r3, r3, #16
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	491b      	ldr	r1, [pc, #108]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004210:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <HAL_RCC_OscConfig+0x478>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fe fb25 	bl	8002864 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421e:	f7fe fb21 	bl	8002864 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e05c      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x416>
 800423c:	e054      	b.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <HAL_RCC_OscConfig+0x478>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fe fb0e 	bl	8002864 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe fb0a 	bl	8002864 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e045      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HAL_RCC_OscConfig+0x470>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x444>
 800426a:	e03d      	b.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e038      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
 8004278:	40023800 	.word	0x40023800
 800427c:	40007000 	.word	0x40007000
 8004280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004284:	4b1b      	ldr	r3, [pc, #108]	@ (80042f4 <HAL_RCC_OscConfig+0x4ec>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d028      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d121      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d11a      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042bc:	4293      	cmp	r3, r2
 80042be:	d111      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	3b01      	subs	r3, #1
 80042ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800

080042f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0cc      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b68      	ldr	r3, [pc, #416]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d90c      	bls.n	8004334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b65      	ldr	r3, [pc, #404]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b63      	ldr	r3, [pc, #396]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b8      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434c:	4b59      	ldr	r3, [pc, #356]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a58      	ldr	r2, [pc, #352]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004364:	4b53      	ldr	r3, [pc, #332]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a52      	ldr	r2, [pc, #328]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800436e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b50      	ldr	r3, [pc, #320]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	494d      	ldr	r1, [pc, #308]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d044      	beq.n	8004418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b47      	ldr	r3, [pc, #284]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d119      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b3f      	ldr	r3, [pc, #252]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3b      	ldr	r3, [pc, #236]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e067      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4934      	ldr	r1, [pc, #208]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e8:	f7fe fa3c 	bl	8002864 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fe fa38 	bl	8002864 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e04f      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20c      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b22      	ldr	r3, [pc, #136]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b20      	ldr	r3, [pc, #128]	@ (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e032      	b.n	80044a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4916      	ldr	r1, [pc, #88]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446a:	4b12      	ldr	r3, [pc, #72]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490e      	ldr	r1, [pc, #56]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800447e:	f000 f821 	bl	80044c4 <HAL_RCC_GetSysClockFreq>
 8004482:	4602      	mov	r2, r0
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	490a      	ldr	r1, [pc, #40]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	fa22 f303 	lsr.w	r3, r2, r3
 8004496:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe f99c 	bl	80027dc <HAL_InitTick>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023c00 	.word	0x40023c00
 80044b4:	40023800 	.word	0x40023800
 80044b8:	08007244 	.word	0x08007244
 80044bc:	20000000 	.word	0x20000000
 80044c0:	20000004 	.word	0x20000004

080044c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b094      	sub	sp, #80	@ 0x50
 80044ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044dc:	4b79      	ldr	r3, [pc, #484]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d00d      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x40>
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	f200 80e1 	bhi.w	80046b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x34>
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x3a>
 80044f6:	e0db      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b73      	ldr	r3, [pc, #460]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044fc:	e0db      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044fe:	4b73      	ldr	r3, [pc, #460]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004500:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004502:	e0d8      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004504:	4b6f      	ldr	r3, [pc, #444]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800450c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800450e:	4b6d      	ldr	r3, [pc, #436]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d063      	beq.n	80045e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451a:	4b6a      	ldr	r3, [pc, #424]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	099b      	lsrs	r3, r3, #6
 8004520:	2200      	movs	r2, #0
 8004522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004524:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452c:	633b      	str	r3, [r7, #48]	@ 0x30
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004536:	4622      	mov	r2, r4
 8004538:	462b      	mov	r3, r5
 800453a:	f04f 0000 	mov.w	r0, #0
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	0159      	lsls	r1, r3, #5
 8004544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004548:	0150      	lsls	r0, r2, #5
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4621      	mov	r1, r4
 8004550:	1a51      	subs	r1, r2, r1
 8004552:	6139      	str	r1, [r7, #16]
 8004554:	4629      	mov	r1, r5
 8004556:	eb63 0301 	sbc.w	r3, r3, r1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004568:	4659      	mov	r1, fp
 800456a:	018b      	lsls	r3, r1, #6
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004572:	4651      	mov	r1, sl
 8004574:	018a      	lsls	r2, r1, #6
 8004576:	4651      	mov	r1, sl
 8004578:	ebb2 0801 	subs.w	r8, r2, r1
 800457c:	4659      	mov	r1, fp
 800457e:	eb63 0901 	sbc.w	r9, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004596:	4690      	mov	r8, r2
 8004598:	4699      	mov	r9, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb18 0303 	adds.w	r3, r8, r3
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	462b      	mov	r3, r5
 80045a4:	eb49 0303 	adc.w	r3, r9, r3
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045b6:	4629      	mov	r1, r5
 80045b8:	024b      	lsls	r3, r1, #9
 80045ba:	4621      	mov	r1, r4
 80045bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045c0:	4621      	mov	r1, r4
 80045c2:	024a      	lsls	r2, r1, #9
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ca:	2200      	movs	r2, #0
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d4:	f7fc fa62 	bl	8000a9c <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e0:	e058      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b38      	ldr	r3, [pc, #224]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	4611      	mov	r1, r2
 80045ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045f2:	623b      	str	r3, [r7, #32]
 80045f4:	2300      	movs	r3, #0
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	f04f 0000 	mov.w	r0, #0
 8004604:	f04f 0100 	mov.w	r1, #0
 8004608:	0159      	lsls	r1, r3, #5
 800460a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800460e:	0150      	lsls	r0, r2, #5
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4641      	mov	r1, r8
 8004616:	ebb2 0a01 	subs.w	sl, r2, r1
 800461a:	4649      	mov	r1, r9
 800461c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800462c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004634:	ebb2 040a 	subs.w	r4, r2, sl
 8004638:	eb63 050b 	sbc.w	r5, r3, fp
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4614      	mov	r4, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4643      	mov	r3, r8
 8004652:	18e3      	adds	r3, r4, r3
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	464b      	mov	r3, r9
 8004658:	eb45 0303 	adc.w	r3, r5, r3
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466a:	4629      	mov	r1, r5
 800466c:	028b      	lsls	r3, r1, #10
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004674:	4621      	mov	r1, r4
 8004676:	028a      	lsls	r2, r1, #10
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	61fa      	str	r2, [r7, #28]
 8004684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004688:	f7fc fa08 	bl	8000a9c <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3750      	adds	r7, #80	@ 0x50
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	08007254 	.word	0x08007254

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffdc 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0b5b      	lsrs	r3, r3, #13
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	08007254 	.word	0x08007254

08004738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e041      	b.n	80047ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd feb0 	bl	80024c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f000 fa7a 	bl	8004c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d001      	beq.n	80047f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e044      	b.n	800487a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <HAL_TIM_Base_Start_IT+0xb0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d018      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481a:	d013      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <HAL_TIM_Base_Start_IT+0xb4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <HAL_TIM_Base_Start_IT+0xb8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_TIM_Base_Start_IT+0xbc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x6c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <HAL_TIM_Base_Start_IT+0xc0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d010      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	e007      	b.n	8004878 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000

0800489c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0202 	mvn.w	r2, #2
 80048d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9a3 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f995 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9a6 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d020      	beq.n	800494c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01b      	beq.n	800494c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0204 	mvn.w	r2, #4
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f97d 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f96f 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f980 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d020      	beq.n	8004998 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01b      	beq.n	8004998 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0208 	mvn.w	r2, #8
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2204      	movs	r2, #4
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f957 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f949 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f95a 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d020      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0210 	mvn.w	r2, #16
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2208      	movs	r2, #8
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f931 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f923 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f934 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0201 	mvn.w	r2, #1
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f901 	bl	8004c0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00c      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fac0 	bl	8004fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00c      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f905 	bl	8004c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0220 	mvn.w	r2, #32
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa92 	bl	8004f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_ConfigClockSource+0x1c>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e0b4      	b.n	8004c02 <HAL_TIM_ConfigClockSource+0x186>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad0:	d03e      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0xd4>
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad6:	f200 8087 	bhi.w	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ade:	f000 8086 	beq.w	8004bee <HAL_TIM_ConfigClockSource+0x172>
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae6:	d87f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b70      	cmp	r3, #112	@ 0x70
 8004aea:	d01a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0xa6>
 8004aec:	2b70      	cmp	r3, #112	@ 0x70
 8004aee:	d87b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b60      	cmp	r3, #96	@ 0x60
 8004af2:	d050      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x11a>
 8004af4:	2b60      	cmp	r3, #96	@ 0x60
 8004af6:	d877      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b50      	cmp	r3, #80	@ 0x50
 8004afa:	d03c      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xfa>
 8004afc:	2b50      	cmp	r3, #80	@ 0x50
 8004afe:	d873      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d058      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b04:	2b40      	cmp	r3, #64	@ 0x40
 8004b06:	d86f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b30      	cmp	r3, #48	@ 0x30
 8004b0a:	d064      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b0c:	2b30      	cmp	r3, #48	@ 0x30
 8004b0e:	d86b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d060      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d867      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05c      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d05a      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b20:	e062      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b32:	f000 f9a3 	bl	8004e7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
      break;
 8004b4e:	e04f      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b60:	f000 f98c 	bl	8004e7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b72:	609a      	str	r2, [r3, #8]
      break;
 8004b74:	e03c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 f900 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2150      	movs	r1, #80	@ 0x50
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f959 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004b94:	e02c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 f91f 	bl	8004de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2160      	movs	r1, #96	@ 0x60
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f949 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e01c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f000 f8e0 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2140      	movs	r1, #64	@ 0x40
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f939 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004bd4:	e00c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f000 f930 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004be6:	e003      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e000      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3a      	ldr	r2, [pc, #232]	@ (8004d6c <TIM_Base_SetConfig+0xfc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00f      	beq.n	8004ca8 <TIM_Base_SetConfig+0x38>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_Base_SetConfig+0x38>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a37      	ldr	r2, [pc, #220]	@ (8004d70 <TIM_Base_SetConfig+0x100>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a36      	ldr	r2, [pc, #216]	@ (8004d74 <TIM_Base_SetConfig+0x104>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0x38>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a35      	ldr	r2, [pc, #212]	@ (8004d78 <TIM_Base_SetConfig+0x108>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8004d6c <TIM_Base_SetConfig+0xfc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01b      	beq.n	8004cfa <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc8:	d017      	beq.n	8004cfa <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a28      	ldr	r2, [pc, #160]	@ (8004d70 <TIM_Base_SetConfig+0x100>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a27      	ldr	r2, [pc, #156]	@ (8004d74 <TIM_Base_SetConfig+0x104>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <TIM_Base_SetConfig+0x108>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a25      	ldr	r2, [pc, #148]	@ (8004d7c <TIM_Base_SetConfig+0x10c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <TIM_Base_SetConfig+0x110>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a23      	ldr	r2, [pc, #140]	@ (8004d84 <TIM_Base_SetConfig+0x114>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d108      	bne.n	8004d0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a0e      	ldr	r2, [pc, #56]	@ (8004d6c <TIM_Base_SetConfig+0xfc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d103      	bne.n	8004d40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	611a      	str	r2, [r3, #16]
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800

08004d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 030a 	bic.w	r3, r3, #10
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 0210 	bic.w	r2, r3, #16
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f043 0307 	orr.w	r3, r3, #7
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	021a      	lsls	r2, r3, #8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e050      	b.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1c      	ldr	r2, [pc, #112]	@ (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d018      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f20:	d013      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a18      	ldr	r2, [pc, #96]	@ (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00e      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a16      	ldr	r2, [pc, #88]	@ (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d009      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a13      	ldr	r2, [pc, #76]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10c      	bne.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800
 8004f90:	40000c00 	.word	0x40000c00
 8004f94:	40014000 	.word	0x40014000

08004f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e042      	b.n	8005058 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd fa92 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2224      	movs	r2, #36	@ 0x24
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f973 	bl	80052f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	@ 0x28
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b20      	cmp	r3, #32
 800507e:	d175      	bne.n	800516c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_UART_Transmit+0x2c>
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e06e      	b.n	800516e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2221      	movs	r2, #33	@ 0x21
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509e:	f7fd fbe1 	bl	8002864 <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b8:	d108      	bne.n	80050cc <HAL_UART_Transmit+0x6c>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e003      	b.n	80050d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d4:	e02e      	b.n	8005134 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2200      	movs	r2, #0
 80050de:	2180      	movs	r1, #128	@ 0x80
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f848 	bl	8005176 <UART_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e03a      	b.n	800516e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800510c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	3302      	adds	r3, #2
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e007      	b.n	8005126 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	3301      	adds	r3, #1
 8005124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1cb      	bne.n	80050d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2140      	movs	r1, #64	@ 0x40
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f814 	bl	8005176 <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e006      	b.n	800516e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005186:	e03b      	b.n	8005200 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d037      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fd fb68 	bl	8002864 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e03a      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d023      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b80      	cmp	r3, #128	@ 0x80
 80051bc:	d020      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b40      	cmp	r3, #64	@ 0x40
 80051c2:	d01d      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d116      	bne.n	8005200 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f81d 	bl	8005228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2208      	movs	r2, #8
 80051f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e00f      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4013      	ands	r3, r2
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	bf0c      	ite	eq
 8005210:	2301      	moveq	r3, #1
 8005212:	2300      	movne	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	429a      	cmp	r2, r3
 800521c:	d0b4      	beq.n	8005188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b095      	sub	sp, #84	@ 0x54
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005250:	643a      	str	r2, [r7, #64]	@ 0x40
 8005252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800525e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3314      	adds	r3, #20
 800526a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	61fb      	str	r3, [r7, #28]
   return(result);
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f023 0301 	bic.w	r3, r3, #1
 800527a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3314      	adds	r3, #20
 8005282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005284:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005286:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800528a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e5      	bne.n	8005264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529c:	2b01      	cmp	r3, #1
 800529e:	d119      	bne.n	80052d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052c0:	61ba      	str	r2, [r7, #24]
 80052c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6979      	ldr	r1, [r7, #20]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	613b      	str	r3, [r7, #16]
   return(result);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052e2:	bf00      	nop
 80052e4:	3754      	adds	r7, #84	@ 0x54
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f4:	b0c0      	sub	sp, #256	@ 0x100
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	68d9      	ldr	r1, [r3, #12]
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	ea40 0301 	orr.w	r3, r0, r1
 8005318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	431a      	orrs	r2, r3
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	431a      	orrs	r2, r3
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005348:	f021 010c 	bic.w	r1, r1, #12
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005356:	430b      	orrs	r3, r1
 8005358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	6999      	ldr	r1, [r3, #24]
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	ea40 0301 	orr.w	r3, r0, r1
 8005376:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b8f      	ldr	r3, [pc, #572]	@ (80055bc <UART_SetConfig+0x2cc>)
 8005380:	429a      	cmp	r2, r3
 8005382:	d005      	beq.n	8005390 <UART_SetConfig+0xa0>
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b8d      	ldr	r3, [pc, #564]	@ (80055c0 <UART_SetConfig+0x2d0>)
 800538c:	429a      	cmp	r2, r3
 800538e:	d104      	bne.n	800539a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005390:	f7ff f9be 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 8005394:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005398:	e003      	b.n	80053a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800539a:	f7ff f9a5 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 800539e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ac:	f040 810c 	bne.w	80055c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	1891      	adds	r1, r2, r2
 80053c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053ca:	415b      	adcs	r3, r3
 80053cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053d2:	4621      	mov	r1, r4
 80053d4:	eb12 0801 	adds.w	r8, r2, r1
 80053d8:	4629      	mov	r1, r5
 80053da:	eb43 0901 	adc.w	r9, r3, r1
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053f2:	4690      	mov	r8, r2
 80053f4:	4699      	mov	r9, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	eb18 0303 	adds.w	r3, r8, r3
 80053fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005400:	462b      	mov	r3, r5
 8005402:	eb49 0303 	adc.w	r3, r9, r3
 8005406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005416:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800541a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800541e:	460b      	mov	r3, r1
 8005420:	18db      	adds	r3, r3, r3
 8005422:	653b      	str	r3, [r7, #80]	@ 0x50
 8005424:	4613      	mov	r3, r2
 8005426:	eb42 0303 	adc.w	r3, r2, r3
 800542a:	657b      	str	r3, [r7, #84]	@ 0x54
 800542c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005430:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005434:	f7fb fb32 	bl	8000a9c <__aeabi_uldivmod>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4b61      	ldr	r3, [pc, #388]	@ (80055c4 <UART_SetConfig+0x2d4>)
 800543e:	fba3 2302 	umull	r2, r3, r3, r2
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	011c      	lsls	r4, r3, #4
 8005446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005450:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005454:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	1891      	adds	r1, r2, r2
 800545e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005460:	415b      	adcs	r3, r3
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005468:	4641      	mov	r1, r8
 800546a:	eb12 0a01 	adds.w	sl, r2, r1
 800546e:	4649      	mov	r1, r9
 8005470:	eb43 0b01 	adc.w	fp, r3, r1
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005488:	4692      	mov	sl, r2
 800548a:	469b      	mov	fp, r3
 800548c:	4643      	mov	r3, r8
 800548e:	eb1a 0303 	adds.w	r3, sl, r3
 8005492:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005496:	464b      	mov	r3, r9
 8005498:	eb4b 0303 	adc.w	r3, fp, r3
 800549c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054b4:	460b      	mov	r3, r1
 80054b6:	18db      	adds	r3, r3, r3
 80054b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ba:	4613      	mov	r3, r2
 80054bc:	eb42 0303 	adc.w	r3, r2, r3
 80054c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054ca:	f7fb fae7 	bl	8000a9c <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	4b3b      	ldr	r3, [pc, #236]	@ (80055c4 <UART_SetConfig+0x2d4>)
 80054d6:	fba3 2301 	umull	r2, r3, r3, r1
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2264      	movs	r2, #100	@ 0x64
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	1acb      	subs	r3, r1, r3
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054ea:	4b36      	ldr	r3, [pc, #216]	@ (80055c4 <UART_SetConfig+0x2d4>)
 80054ec:	fba3 2302 	umull	r2, r3, r3, r2
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054f8:	441c      	add	r4, r3
 80054fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005504:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005508:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800550c:	4642      	mov	r2, r8
 800550e:	464b      	mov	r3, r9
 8005510:	1891      	adds	r1, r2, r2
 8005512:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005514:	415b      	adcs	r3, r3
 8005516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800551c:	4641      	mov	r1, r8
 800551e:	1851      	adds	r1, r2, r1
 8005520:	6339      	str	r1, [r7, #48]	@ 0x30
 8005522:	4649      	mov	r1, r9
 8005524:	414b      	adcs	r3, r1
 8005526:	637b      	str	r3, [r7, #52]	@ 0x34
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005534:	4659      	mov	r1, fp
 8005536:	00cb      	lsls	r3, r1, #3
 8005538:	4651      	mov	r1, sl
 800553a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800553e:	4651      	mov	r1, sl
 8005540:	00ca      	lsls	r2, r1, #3
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	4603      	mov	r3, r0
 8005548:	4642      	mov	r2, r8
 800554a:	189b      	adds	r3, r3, r2
 800554c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005550:	464b      	mov	r3, r9
 8005552:	460a      	mov	r2, r1
 8005554:	eb42 0303 	adc.w	r3, r2, r3
 8005558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005568:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800556c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005570:	460b      	mov	r3, r1
 8005572:	18db      	adds	r3, r3, r3
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005576:	4613      	mov	r3, r2
 8005578:	eb42 0303 	adc.w	r3, r2, r3
 800557c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800557e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005582:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005586:	f7fb fa89 	bl	8000a9c <__aeabi_uldivmod>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4b0d      	ldr	r3, [pc, #52]	@ (80055c4 <UART_SetConfig+0x2d4>)
 8005590:	fba3 1302 	umull	r1, r3, r3, r2
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	2164      	movs	r1, #100	@ 0x64
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	3332      	adds	r3, #50	@ 0x32
 80055a2:	4a08      	ldr	r2, [pc, #32]	@ (80055c4 <UART_SetConfig+0x2d4>)
 80055a4:	fba2 2303 	umull	r2, r3, r2, r3
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	f003 0207 	and.w	r2, r3, #7
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4422      	add	r2, r4
 80055b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055b8:	e106      	b.n	80057c8 <UART_SetConfig+0x4d8>
 80055ba:	bf00      	nop
 80055bc:	40011000 	.word	0x40011000
 80055c0:	40011400 	.word	0x40011400
 80055c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055da:	4642      	mov	r2, r8
 80055dc:	464b      	mov	r3, r9
 80055de:	1891      	adds	r1, r2, r2
 80055e0:	6239      	str	r1, [r7, #32]
 80055e2:	415b      	adcs	r3, r3
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ea:	4641      	mov	r1, r8
 80055ec:	1854      	adds	r4, r2, r1
 80055ee:	4649      	mov	r1, r9
 80055f0:	eb43 0501 	adc.w	r5, r3, r1
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	00eb      	lsls	r3, r5, #3
 80055fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005602:	00e2      	lsls	r2, r4, #3
 8005604:	4614      	mov	r4, r2
 8005606:	461d      	mov	r5, r3
 8005608:	4643      	mov	r3, r8
 800560a:	18e3      	adds	r3, r4, r3
 800560c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005610:	464b      	mov	r3, r9
 8005612:	eb45 0303 	adc.w	r3, r5, r3
 8005616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005626:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005636:	4629      	mov	r1, r5
 8005638:	008b      	lsls	r3, r1, #2
 800563a:	4621      	mov	r1, r4
 800563c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005640:	4621      	mov	r1, r4
 8005642:	008a      	lsls	r2, r1, #2
 8005644:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005648:	f7fb fa28 	bl	8000a9c <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4b60      	ldr	r3, [pc, #384]	@ (80057d4 <UART_SetConfig+0x4e4>)
 8005652:	fba3 2302 	umull	r2, r3, r3, r2
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	011c      	lsls	r4, r3, #4
 800565a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565e:	2200      	movs	r2, #0
 8005660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005668:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800566c:	4642      	mov	r2, r8
 800566e:	464b      	mov	r3, r9
 8005670:	1891      	adds	r1, r2, r2
 8005672:	61b9      	str	r1, [r7, #24]
 8005674:	415b      	adcs	r3, r3
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800567c:	4641      	mov	r1, r8
 800567e:	1851      	adds	r1, r2, r1
 8005680:	6139      	str	r1, [r7, #16]
 8005682:	4649      	mov	r1, r9
 8005684:	414b      	adcs	r3, r1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005694:	4659      	mov	r1, fp
 8005696:	00cb      	lsls	r3, r1, #3
 8005698:	4651      	mov	r1, sl
 800569a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569e:	4651      	mov	r1, sl
 80056a0:	00ca      	lsls	r2, r1, #3
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	4642      	mov	r2, r8
 80056aa:	189b      	adds	r3, r3, r2
 80056ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056b0:	464b      	mov	r3, r9
 80056b2:	460a      	mov	r2, r1
 80056b4:	eb42 0303 	adc.w	r3, r2, r3
 80056b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056d4:	4649      	mov	r1, r9
 80056d6:	008b      	lsls	r3, r1, #2
 80056d8:	4641      	mov	r1, r8
 80056da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056de:	4641      	mov	r1, r8
 80056e0:	008a      	lsls	r2, r1, #2
 80056e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056e6:	f7fb f9d9 	bl	8000a9c <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	4b38      	ldr	r3, [pc, #224]	@ (80057d4 <UART_SetConfig+0x4e4>)
 80056f2:	fba3 2301 	umull	r2, r3, r3, r1
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2264      	movs	r2, #100	@ 0x64
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	1acb      	subs	r3, r1, r3
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	3332      	adds	r3, #50	@ 0x32
 8005704:	4a33      	ldr	r2, [pc, #204]	@ (80057d4 <UART_SetConfig+0x4e4>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005710:	441c      	add	r4, r3
 8005712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005716:	2200      	movs	r2, #0
 8005718:	673b      	str	r3, [r7, #112]	@ 0x70
 800571a:	677a      	str	r2, [r7, #116]	@ 0x74
 800571c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	1891      	adds	r1, r2, r2
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	415b      	adcs	r3, r3
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005730:	4641      	mov	r1, r8
 8005732:	1851      	adds	r1, r2, r1
 8005734:	6039      	str	r1, [r7, #0]
 8005736:	4649      	mov	r1, r9
 8005738:	414b      	adcs	r3, r1
 800573a:	607b      	str	r3, [r7, #4]
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005748:	4659      	mov	r1, fp
 800574a:	00cb      	lsls	r3, r1, #3
 800574c:	4651      	mov	r1, sl
 800574e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005752:	4651      	mov	r1, sl
 8005754:	00ca      	lsls	r2, r1, #3
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	4603      	mov	r3, r0
 800575c:	4642      	mov	r2, r8
 800575e:	189b      	adds	r3, r3, r2
 8005760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005762:	464b      	mov	r3, r9
 8005764:	460a      	mov	r2, r1
 8005766:	eb42 0303 	adc.w	r3, r2, r3
 800576a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	663b      	str	r3, [r7, #96]	@ 0x60
 8005776:	667a      	str	r2, [r7, #100]	@ 0x64
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005784:	4649      	mov	r1, r9
 8005786:	008b      	lsls	r3, r1, #2
 8005788:	4641      	mov	r1, r8
 800578a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800578e:	4641      	mov	r1, r8
 8005790:	008a      	lsls	r2, r1, #2
 8005792:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005796:	f7fb f981 	bl	8000a9c <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4b0d      	ldr	r3, [pc, #52]	@ (80057d4 <UART_SetConfig+0x4e4>)
 80057a0:	fba3 1302 	umull	r1, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	2164      	movs	r1, #100	@ 0x64
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	3332      	adds	r3, #50	@ 0x32
 80057b2:	4a08      	ldr	r2, [pc, #32]	@ (80057d4 <UART_SetConfig+0x4e4>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f003 020f 	and.w	r2, r3, #15
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4422      	add	r2, r4
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057ce:	46bd      	mov	sp, r7
 80057d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d4:	51eb851f 	.word	0x51eb851f

080057d8 <siprintf>:
 80057d8:	b40e      	push	{r1, r2, r3}
 80057da:	b500      	push	{lr}
 80057dc:	b09c      	sub	sp, #112	@ 0x70
 80057de:	ab1d      	add	r3, sp, #116	@ 0x74
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	9006      	str	r0, [sp, #24]
 80057e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057e8:	4809      	ldr	r0, [pc, #36]	@ (8005810 <siprintf+0x38>)
 80057ea:	9107      	str	r1, [sp, #28]
 80057ec:	9104      	str	r1, [sp, #16]
 80057ee:	4909      	ldr	r1, [pc, #36]	@ (8005814 <siprintf+0x3c>)
 80057f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f4:	9105      	str	r1, [sp, #20]
 80057f6:	6800      	ldr	r0, [r0, #0]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	a902      	add	r1, sp, #8
 80057fc:	f000 f994 	bl	8005b28 <_svfiprintf_r>
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	b01c      	add	sp, #112	@ 0x70
 8005808:	f85d eb04 	ldr.w	lr, [sp], #4
 800580c:	b003      	add	sp, #12
 800580e:	4770      	bx	lr
 8005810:	2000000c 	.word	0x2000000c
 8005814:	ffff0208 	.word	0xffff0208

08005818 <memset>:
 8005818:	4402      	add	r2, r0
 800581a:	4603      	mov	r3, r0
 800581c:	4293      	cmp	r3, r2
 800581e:	d100      	bne.n	8005822 <memset+0xa>
 8005820:	4770      	bx	lr
 8005822:	f803 1b01 	strb.w	r1, [r3], #1
 8005826:	e7f9      	b.n	800581c <memset+0x4>

08005828 <__errno>:
 8005828:	4b01      	ldr	r3, [pc, #4]	@ (8005830 <__errno+0x8>)
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <__libc_init_array>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4d0d      	ldr	r5, [pc, #52]	@ (800586c <__libc_init_array+0x38>)
 8005838:	4c0d      	ldr	r4, [pc, #52]	@ (8005870 <__libc_init_array+0x3c>)
 800583a:	1b64      	subs	r4, r4, r5
 800583c:	10a4      	asrs	r4, r4, #2
 800583e:	2600      	movs	r6, #0
 8005840:	42a6      	cmp	r6, r4
 8005842:	d109      	bne.n	8005858 <__libc_init_array+0x24>
 8005844:	4d0b      	ldr	r5, [pc, #44]	@ (8005874 <__libc_init_array+0x40>)
 8005846:	4c0c      	ldr	r4, [pc, #48]	@ (8005878 <__libc_init_array+0x44>)
 8005848:	f001 fc96 	bl	8007178 <_init>
 800584c:	1b64      	subs	r4, r4, r5
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	2600      	movs	r6, #0
 8005852:	42a6      	cmp	r6, r4
 8005854:	d105      	bne.n	8005862 <__libc_init_array+0x2e>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f855 3b04 	ldr.w	r3, [r5], #4
 800585c:	4798      	blx	r3
 800585e:	3601      	adds	r6, #1
 8005860:	e7ee      	b.n	8005840 <__libc_init_array+0xc>
 8005862:	f855 3b04 	ldr.w	r3, [r5], #4
 8005866:	4798      	blx	r3
 8005868:	3601      	adds	r6, #1
 800586a:	e7f2      	b.n	8005852 <__libc_init_array+0x1e>
 800586c:	08007478 	.word	0x08007478
 8005870:	08007478 	.word	0x08007478
 8005874:	08007478 	.word	0x08007478
 8005878:	0800747c 	.word	0x0800747c

0800587c <__retarget_lock_acquire_recursive>:
 800587c:	4770      	bx	lr

0800587e <__retarget_lock_release_recursive>:
 800587e:	4770      	bx	lr

08005880 <_free_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4605      	mov	r5, r0
 8005884:	2900      	cmp	r1, #0
 8005886:	d041      	beq.n	800590c <_free_r+0x8c>
 8005888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588c:	1f0c      	subs	r4, r1, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	bfb8      	it	lt
 8005892:	18e4      	addlt	r4, r4, r3
 8005894:	f000 f8e0 	bl	8005a58 <__malloc_lock>
 8005898:	4a1d      	ldr	r2, [pc, #116]	@ (8005910 <_free_r+0x90>)
 800589a:	6813      	ldr	r3, [r2, #0]
 800589c:	b933      	cbnz	r3, 80058ac <_free_r+0x2c>
 800589e:	6063      	str	r3, [r4, #4]
 80058a0:	6014      	str	r4, [r2, #0]
 80058a2:	4628      	mov	r0, r5
 80058a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a8:	f000 b8dc 	b.w	8005a64 <__malloc_unlock>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d908      	bls.n	80058c2 <_free_r+0x42>
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	1821      	adds	r1, r4, r0
 80058b4:	428b      	cmp	r3, r1
 80058b6:	bf01      	itttt	eq
 80058b8:	6819      	ldreq	r1, [r3, #0]
 80058ba:	685b      	ldreq	r3, [r3, #4]
 80058bc:	1809      	addeq	r1, r1, r0
 80058be:	6021      	streq	r1, [r4, #0]
 80058c0:	e7ed      	b.n	800589e <_free_r+0x1e>
 80058c2:	461a      	mov	r2, r3
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	b10b      	cbz	r3, 80058cc <_free_r+0x4c>
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	d9fa      	bls.n	80058c2 <_free_r+0x42>
 80058cc:	6811      	ldr	r1, [r2, #0]
 80058ce:	1850      	adds	r0, r2, r1
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d10b      	bne.n	80058ec <_free_r+0x6c>
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	4401      	add	r1, r0
 80058d8:	1850      	adds	r0, r2, r1
 80058da:	4283      	cmp	r3, r0
 80058dc:	6011      	str	r1, [r2, #0]
 80058de:	d1e0      	bne.n	80058a2 <_free_r+0x22>
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	6053      	str	r3, [r2, #4]
 80058e6:	4408      	add	r0, r1
 80058e8:	6010      	str	r0, [r2, #0]
 80058ea:	e7da      	b.n	80058a2 <_free_r+0x22>
 80058ec:	d902      	bls.n	80058f4 <_free_r+0x74>
 80058ee:	230c      	movs	r3, #12
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	e7d6      	b.n	80058a2 <_free_r+0x22>
 80058f4:	6820      	ldr	r0, [r4, #0]
 80058f6:	1821      	adds	r1, r4, r0
 80058f8:	428b      	cmp	r3, r1
 80058fa:	bf04      	itt	eq
 80058fc:	6819      	ldreq	r1, [r3, #0]
 80058fe:	685b      	ldreq	r3, [r3, #4]
 8005900:	6063      	str	r3, [r4, #4]
 8005902:	bf04      	itt	eq
 8005904:	1809      	addeq	r1, r1, r0
 8005906:	6021      	streq	r1, [r4, #0]
 8005908:	6054      	str	r4, [r2, #4]
 800590a:	e7ca      	b.n	80058a2 <_free_r+0x22>
 800590c:	bd38      	pop	{r3, r4, r5, pc}
 800590e:	bf00      	nop
 8005910:	20000c0c 	.word	0x20000c0c

08005914 <sbrk_aligned>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4e0f      	ldr	r6, [pc, #60]	@ (8005954 <sbrk_aligned+0x40>)
 8005918:	460c      	mov	r4, r1
 800591a:	6831      	ldr	r1, [r6, #0]
 800591c:	4605      	mov	r5, r0
 800591e:	b911      	cbnz	r1, 8005926 <sbrk_aligned+0x12>
 8005920:	f000 fba6 	bl	8006070 <_sbrk_r>
 8005924:	6030      	str	r0, [r6, #0]
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f000 fba1 	bl	8006070 <_sbrk_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	d103      	bne.n	800593a <sbrk_aligned+0x26>
 8005932:	f04f 34ff 	mov.w	r4, #4294967295
 8005936:	4620      	mov	r0, r4
 8005938:	bd70      	pop	{r4, r5, r6, pc}
 800593a:	1cc4      	adds	r4, r0, #3
 800593c:	f024 0403 	bic.w	r4, r4, #3
 8005940:	42a0      	cmp	r0, r4
 8005942:	d0f8      	beq.n	8005936 <sbrk_aligned+0x22>
 8005944:	1a21      	subs	r1, r4, r0
 8005946:	4628      	mov	r0, r5
 8005948:	f000 fb92 	bl	8006070 <_sbrk_r>
 800594c:	3001      	adds	r0, #1
 800594e:	d1f2      	bne.n	8005936 <sbrk_aligned+0x22>
 8005950:	e7ef      	b.n	8005932 <sbrk_aligned+0x1e>
 8005952:	bf00      	nop
 8005954:	20000c08 	.word	0x20000c08

08005958 <_malloc_r>:
 8005958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800595c:	1ccd      	adds	r5, r1, #3
 800595e:	f025 0503 	bic.w	r5, r5, #3
 8005962:	3508      	adds	r5, #8
 8005964:	2d0c      	cmp	r5, #12
 8005966:	bf38      	it	cc
 8005968:	250c      	movcc	r5, #12
 800596a:	2d00      	cmp	r5, #0
 800596c:	4606      	mov	r6, r0
 800596e:	db01      	blt.n	8005974 <_malloc_r+0x1c>
 8005970:	42a9      	cmp	r1, r5
 8005972:	d904      	bls.n	800597e <_malloc_r+0x26>
 8005974:	230c      	movs	r3, #12
 8005976:	6033      	str	r3, [r6, #0]
 8005978:	2000      	movs	r0, #0
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a54 <_malloc_r+0xfc>
 8005982:	f000 f869 	bl	8005a58 <__malloc_lock>
 8005986:	f8d8 3000 	ldr.w	r3, [r8]
 800598a:	461c      	mov	r4, r3
 800598c:	bb44      	cbnz	r4, 80059e0 <_malloc_r+0x88>
 800598e:	4629      	mov	r1, r5
 8005990:	4630      	mov	r0, r6
 8005992:	f7ff ffbf 	bl	8005914 <sbrk_aligned>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	4604      	mov	r4, r0
 800599a:	d158      	bne.n	8005a4e <_malloc_r+0xf6>
 800599c:	f8d8 4000 	ldr.w	r4, [r8]
 80059a0:	4627      	mov	r7, r4
 80059a2:	2f00      	cmp	r7, #0
 80059a4:	d143      	bne.n	8005a2e <_malloc_r+0xd6>
 80059a6:	2c00      	cmp	r4, #0
 80059a8:	d04b      	beq.n	8005a42 <_malloc_r+0xea>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	4639      	mov	r1, r7
 80059ae:	4630      	mov	r0, r6
 80059b0:	eb04 0903 	add.w	r9, r4, r3
 80059b4:	f000 fb5c 	bl	8006070 <_sbrk_r>
 80059b8:	4581      	cmp	r9, r0
 80059ba:	d142      	bne.n	8005a42 <_malloc_r+0xea>
 80059bc:	6821      	ldr	r1, [r4, #0]
 80059be:	1a6d      	subs	r5, r5, r1
 80059c0:	4629      	mov	r1, r5
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff ffa6 	bl	8005914 <sbrk_aligned>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d03a      	beq.n	8005a42 <_malloc_r+0xea>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	442b      	add	r3, r5
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	f8d8 3000 	ldr.w	r3, [r8]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	bb62      	cbnz	r2, 8005a34 <_malloc_r+0xdc>
 80059da:	f8c8 7000 	str.w	r7, [r8]
 80059de:	e00f      	b.n	8005a00 <_malloc_r+0xa8>
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	1b52      	subs	r2, r2, r5
 80059e4:	d420      	bmi.n	8005a28 <_malloc_r+0xd0>
 80059e6:	2a0b      	cmp	r2, #11
 80059e8:	d917      	bls.n	8005a1a <_malloc_r+0xc2>
 80059ea:	1961      	adds	r1, r4, r5
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	6025      	str	r5, [r4, #0]
 80059f0:	bf18      	it	ne
 80059f2:	6059      	strne	r1, [r3, #4]
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	bf08      	it	eq
 80059f8:	f8c8 1000 	streq.w	r1, [r8]
 80059fc:	5162      	str	r2, [r4, r5]
 80059fe:	604b      	str	r3, [r1, #4]
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 f82f 	bl	8005a64 <__malloc_unlock>
 8005a06:	f104 000b 	add.w	r0, r4, #11
 8005a0a:	1d23      	adds	r3, r4, #4
 8005a0c:	f020 0007 	bic.w	r0, r0, #7
 8005a10:	1ac2      	subs	r2, r0, r3
 8005a12:	bf1c      	itt	ne
 8005a14:	1a1b      	subne	r3, r3, r0
 8005a16:	50a3      	strne	r3, [r4, r2]
 8005a18:	e7af      	b.n	800597a <_malloc_r+0x22>
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	bf0c      	ite	eq
 8005a20:	f8c8 2000 	streq.w	r2, [r8]
 8005a24:	605a      	strne	r2, [r3, #4]
 8005a26:	e7eb      	b.n	8005a00 <_malloc_r+0xa8>
 8005a28:	4623      	mov	r3, r4
 8005a2a:	6864      	ldr	r4, [r4, #4]
 8005a2c:	e7ae      	b.n	800598c <_malloc_r+0x34>
 8005a2e:	463c      	mov	r4, r7
 8005a30:	687f      	ldr	r7, [r7, #4]
 8005a32:	e7b6      	b.n	80059a2 <_malloc_r+0x4a>
 8005a34:	461a      	mov	r2, r3
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d1fb      	bne.n	8005a34 <_malloc_r+0xdc>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6053      	str	r3, [r2, #4]
 8005a40:	e7de      	b.n	8005a00 <_malloc_r+0xa8>
 8005a42:	230c      	movs	r3, #12
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 f80c 	bl	8005a64 <__malloc_unlock>
 8005a4c:	e794      	b.n	8005978 <_malloc_r+0x20>
 8005a4e:	6005      	str	r5, [r0, #0]
 8005a50:	e7d6      	b.n	8005a00 <_malloc_r+0xa8>
 8005a52:	bf00      	nop
 8005a54:	20000c0c 	.word	0x20000c0c

08005a58 <__malloc_lock>:
 8005a58:	4801      	ldr	r0, [pc, #4]	@ (8005a60 <__malloc_lock+0x8>)
 8005a5a:	f7ff bf0f 	b.w	800587c <__retarget_lock_acquire_recursive>
 8005a5e:	bf00      	nop
 8005a60:	20000c04 	.word	0x20000c04

08005a64 <__malloc_unlock>:
 8005a64:	4801      	ldr	r0, [pc, #4]	@ (8005a6c <__malloc_unlock+0x8>)
 8005a66:	f7ff bf0a 	b.w	800587e <__retarget_lock_release_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	20000c04 	.word	0x20000c04

08005a70 <__ssputs_r>:
 8005a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	688e      	ldr	r6, [r1, #8]
 8005a76:	461f      	mov	r7, r3
 8005a78:	42be      	cmp	r6, r7
 8005a7a:	680b      	ldr	r3, [r1, #0]
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	4690      	mov	r8, r2
 8005a82:	d82d      	bhi.n	8005ae0 <__ssputs_r+0x70>
 8005a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a8c:	d026      	beq.n	8005adc <__ssputs_r+0x6c>
 8005a8e:	6965      	ldr	r5, [r4, #20]
 8005a90:	6909      	ldr	r1, [r1, #16]
 8005a92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a96:	eba3 0901 	sub.w	r9, r3, r1
 8005a9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a9e:	1c7b      	adds	r3, r7, #1
 8005aa0:	444b      	add	r3, r9
 8005aa2:	106d      	asrs	r5, r5, #1
 8005aa4:	429d      	cmp	r5, r3
 8005aa6:	bf38      	it	cc
 8005aa8:	461d      	movcc	r5, r3
 8005aaa:	0553      	lsls	r3, r2, #21
 8005aac:	d527      	bpl.n	8005afe <__ssputs_r+0x8e>
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7ff ff52 	bl	8005958 <_malloc_r>
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	b360      	cbz	r0, 8005b12 <__ssputs_r+0xa2>
 8005ab8:	6921      	ldr	r1, [r4, #16]
 8005aba:	464a      	mov	r2, r9
 8005abc:	f000 fae8 	bl	8006090 <memcpy>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	6126      	str	r6, [r4, #16]
 8005ace:	6165      	str	r5, [r4, #20]
 8005ad0:	444e      	add	r6, r9
 8005ad2:	eba5 0509 	sub.w	r5, r5, r9
 8005ad6:	6026      	str	r6, [r4, #0]
 8005ad8:	60a5      	str	r5, [r4, #8]
 8005ada:	463e      	mov	r6, r7
 8005adc:	42be      	cmp	r6, r7
 8005ade:	d900      	bls.n	8005ae2 <__ssputs_r+0x72>
 8005ae0:	463e      	mov	r6, r7
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	f000 faa8 	bl	800603c <memmove>
 8005aec:	68a3      	ldr	r3, [r4, #8]
 8005aee:	1b9b      	subs	r3, r3, r6
 8005af0:	60a3      	str	r3, [r4, #8]
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	4433      	add	r3, r6
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	2000      	movs	r0, #0
 8005afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afe:	462a      	mov	r2, r5
 8005b00:	f000 fad4 	bl	80060ac <_realloc_r>
 8005b04:	4606      	mov	r6, r0
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d1e0      	bne.n	8005acc <__ssputs_r+0x5c>
 8005b0a:	6921      	ldr	r1, [r4, #16]
 8005b0c:	4650      	mov	r0, sl
 8005b0e:	f7ff feb7 	bl	8005880 <_free_r>
 8005b12:	230c      	movs	r3, #12
 8005b14:	f8ca 3000 	str.w	r3, [sl]
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	e7e9      	b.n	8005afa <__ssputs_r+0x8a>
	...

08005b28 <_svfiprintf_r>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	4698      	mov	r8, r3
 8005b2e:	898b      	ldrh	r3, [r1, #12]
 8005b30:	061b      	lsls	r3, r3, #24
 8005b32:	b09d      	sub	sp, #116	@ 0x74
 8005b34:	4607      	mov	r7, r0
 8005b36:	460d      	mov	r5, r1
 8005b38:	4614      	mov	r4, r2
 8005b3a:	d510      	bpl.n	8005b5e <_svfiprintf_r+0x36>
 8005b3c:	690b      	ldr	r3, [r1, #16]
 8005b3e:	b973      	cbnz	r3, 8005b5e <_svfiprintf_r+0x36>
 8005b40:	2140      	movs	r1, #64	@ 0x40
 8005b42:	f7ff ff09 	bl	8005958 <_malloc_r>
 8005b46:	6028      	str	r0, [r5, #0]
 8005b48:	6128      	str	r0, [r5, #16]
 8005b4a:	b930      	cbnz	r0, 8005b5a <_svfiprintf_r+0x32>
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	b01d      	add	sp, #116	@ 0x74
 8005b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5a:	2340      	movs	r3, #64	@ 0x40
 8005b5c:	616b      	str	r3, [r5, #20]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b62:	2320      	movs	r3, #32
 8005b64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b6c:	2330      	movs	r3, #48	@ 0x30
 8005b6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d0c <_svfiprintf_r+0x1e4>
 8005b72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b76:	f04f 0901 	mov.w	r9, #1
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	469a      	mov	sl, r3
 8005b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b82:	b10a      	cbz	r2, 8005b88 <_svfiprintf_r+0x60>
 8005b84:	2a25      	cmp	r2, #37	@ 0x25
 8005b86:	d1f9      	bne.n	8005b7c <_svfiprintf_r+0x54>
 8005b88:	ebba 0b04 	subs.w	fp, sl, r4
 8005b8c:	d00b      	beq.n	8005ba6 <_svfiprintf_r+0x7e>
 8005b8e:	465b      	mov	r3, fp
 8005b90:	4622      	mov	r2, r4
 8005b92:	4629      	mov	r1, r5
 8005b94:	4638      	mov	r0, r7
 8005b96:	f7ff ff6b 	bl	8005a70 <__ssputs_r>
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f000 80a7 	beq.w	8005cee <_svfiprintf_r+0x1c6>
 8005ba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ba2:	445a      	add	r2, fp
 8005ba4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 809f 	beq.w	8005cee <_svfiprintf_r+0x1c6>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bba:	f10a 0a01 	add.w	sl, sl, #1
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	9307      	str	r3, [sp, #28]
 8005bc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bc8:	4654      	mov	r4, sl
 8005bca:	2205      	movs	r2, #5
 8005bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd0:	484e      	ldr	r0, [pc, #312]	@ (8005d0c <_svfiprintf_r+0x1e4>)
 8005bd2:	f7fa fb0d 	bl	80001f0 <memchr>
 8005bd6:	9a04      	ldr	r2, [sp, #16]
 8005bd8:	b9d8      	cbnz	r0, 8005c12 <_svfiprintf_r+0xea>
 8005bda:	06d0      	lsls	r0, r2, #27
 8005bdc:	bf44      	itt	mi
 8005bde:	2320      	movmi	r3, #32
 8005be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be4:	0711      	lsls	r1, r2, #28
 8005be6:	bf44      	itt	mi
 8005be8:	232b      	movmi	r3, #43	@ 0x2b
 8005bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bee:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf4:	d015      	beq.n	8005c22 <_svfiprintf_r+0xfa>
 8005bf6:	9a07      	ldr	r2, [sp, #28]
 8005bf8:	4654      	mov	r4, sl
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f04f 0c0a 	mov.w	ip, #10
 8005c00:	4621      	mov	r1, r4
 8005c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c06:	3b30      	subs	r3, #48	@ 0x30
 8005c08:	2b09      	cmp	r3, #9
 8005c0a:	d94b      	bls.n	8005ca4 <_svfiprintf_r+0x17c>
 8005c0c:	b1b0      	cbz	r0, 8005c3c <_svfiprintf_r+0x114>
 8005c0e:	9207      	str	r2, [sp, #28]
 8005c10:	e014      	b.n	8005c3c <_svfiprintf_r+0x114>
 8005c12:	eba0 0308 	sub.w	r3, r0, r8
 8005c16:	fa09 f303 	lsl.w	r3, r9, r3
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	46a2      	mov	sl, r4
 8005c20:	e7d2      	b.n	8005bc8 <_svfiprintf_r+0xa0>
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	1d19      	adds	r1, r3, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	9103      	str	r1, [sp, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfbb      	ittet	lt
 8005c2e:	425b      	neglt	r3, r3
 8005c30:	f042 0202 	orrlt.w	r2, r2, #2
 8005c34:	9307      	strge	r3, [sp, #28]
 8005c36:	9307      	strlt	r3, [sp, #28]
 8005c38:	bfb8      	it	lt
 8005c3a:	9204      	strlt	r2, [sp, #16]
 8005c3c:	7823      	ldrb	r3, [r4, #0]
 8005c3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c40:	d10a      	bne.n	8005c58 <_svfiprintf_r+0x130>
 8005c42:	7863      	ldrb	r3, [r4, #1]
 8005c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c46:	d132      	bne.n	8005cae <_svfiprintf_r+0x186>
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	9203      	str	r2, [sp, #12]
 8005c50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c54:	3402      	adds	r4, #2
 8005c56:	9305      	str	r3, [sp, #20]
 8005c58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d1c <_svfiprintf_r+0x1f4>
 8005c5c:	7821      	ldrb	r1, [r4, #0]
 8005c5e:	2203      	movs	r2, #3
 8005c60:	4650      	mov	r0, sl
 8005c62:	f7fa fac5 	bl	80001f0 <memchr>
 8005c66:	b138      	cbz	r0, 8005c78 <_svfiprintf_r+0x150>
 8005c68:	9b04      	ldr	r3, [sp, #16]
 8005c6a:	eba0 000a 	sub.w	r0, r0, sl
 8005c6e:	2240      	movs	r2, #64	@ 0x40
 8005c70:	4082      	lsls	r2, r0
 8005c72:	4313      	orrs	r3, r2
 8005c74:	3401      	adds	r4, #1
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7c:	4824      	ldr	r0, [pc, #144]	@ (8005d10 <_svfiprintf_r+0x1e8>)
 8005c7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c82:	2206      	movs	r2, #6
 8005c84:	f7fa fab4 	bl	80001f0 <memchr>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d036      	beq.n	8005cfa <_svfiprintf_r+0x1d2>
 8005c8c:	4b21      	ldr	r3, [pc, #132]	@ (8005d14 <_svfiprintf_r+0x1ec>)
 8005c8e:	bb1b      	cbnz	r3, 8005cd8 <_svfiprintf_r+0x1b0>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	3307      	adds	r3, #7
 8005c94:	f023 0307 	bic.w	r3, r3, #7
 8005c98:	3308      	adds	r3, #8
 8005c9a:	9303      	str	r3, [sp, #12]
 8005c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9e:	4433      	add	r3, r6
 8005ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca2:	e76a      	b.n	8005b7a <_svfiprintf_r+0x52>
 8005ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca8:	460c      	mov	r4, r1
 8005caa:	2001      	movs	r0, #1
 8005cac:	e7a8      	b.n	8005c00 <_svfiprintf_r+0xd8>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	3401      	adds	r4, #1
 8005cb2:	9305      	str	r3, [sp, #20]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f04f 0c0a 	mov.w	ip, #10
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc0:	3a30      	subs	r2, #48	@ 0x30
 8005cc2:	2a09      	cmp	r2, #9
 8005cc4:	d903      	bls.n	8005cce <_svfiprintf_r+0x1a6>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0c6      	beq.n	8005c58 <_svfiprintf_r+0x130>
 8005cca:	9105      	str	r1, [sp, #20]
 8005ccc:	e7c4      	b.n	8005c58 <_svfiprintf_r+0x130>
 8005cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e7f0      	b.n	8005cba <_svfiprintf_r+0x192>
 8005cd8:	ab03      	add	r3, sp, #12
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4b0e      	ldr	r3, [pc, #56]	@ (8005d18 <_svfiprintf_r+0x1f0>)
 8005ce0:	a904      	add	r1, sp, #16
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	1c42      	adds	r2, r0, #1
 8005cea:	4606      	mov	r6, r0
 8005cec:	d1d6      	bne.n	8005c9c <_svfiprintf_r+0x174>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	065b      	lsls	r3, r3, #25
 8005cf2:	f53f af2d 	bmi.w	8005b50 <_svfiprintf_r+0x28>
 8005cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cf8:	e72c      	b.n	8005b54 <_svfiprintf_r+0x2c>
 8005cfa:	ab03      	add	r3, sp, #12
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	462a      	mov	r2, r5
 8005d00:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <_svfiprintf_r+0x1f0>)
 8005d02:	a904      	add	r1, sp, #16
 8005d04:	4638      	mov	r0, r7
 8005d06:	f000 f879 	bl	8005dfc <_printf_i>
 8005d0a:	e7ed      	b.n	8005ce8 <_svfiprintf_r+0x1c0>
 8005d0c:	08007264 	.word	0x08007264
 8005d10:	0800726e 	.word	0x0800726e
 8005d14:	00000000 	.word	0x00000000
 8005d18:	08005a71 	.word	0x08005a71
 8005d1c:	0800726a 	.word	0x0800726a

08005d20 <_printf_common>:
 8005d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d24:	4616      	mov	r6, r2
 8005d26:	4698      	mov	r8, r3
 8005d28:	688a      	ldr	r2, [r1, #8]
 8005d2a:	690b      	ldr	r3, [r1, #16]
 8005d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	bfb8      	it	lt
 8005d34:	4613      	movlt	r3, r2
 8005d36:	6033      	str	r3, [r6, #0]
 8005d38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	b10a      	cbz	r2, 8005d46 <_printf_common+0x26>
 8005d42:	3301      	adds	r3, #1
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	0699      	lsls	r1, r3, #26
 8005d4a:	bf42      	ittt	mi
 8005d4c:	6833      	ldrmi	r3, [r6, #0]
 8005d4e:	3302      	addmi	r3, #2
 8005d50:	6033      	strmi	r3, [r6, #0]
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	f015 0506 	ands.w	r5, r5, #6
 8005d58:	d106      	bne.n	8005d68 <_printf_common+0x48>
 8005d5a:	f104 0a19 	add.w	sl, r4, #25
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	6832      	ldr	r2, [r6, #0]
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	42ab      	cmp	r3, r5
 8005d66:	dc26      	bgt.n	8005db6 <_printf_common+0x96>
 8005d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	3b00      	subs	r3, #0
 8005d70:	bf18      	it	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	0692      	lsls	r2, r2, #26
 8005d76:	d42b      	bmi.n	8005dd0 <_printf_common+0xb0>
 8005d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	4638      	mov	r0, r7
 8005d80:	47c8      	blx	r9
 8005d82:	3001      	adds	r0, #1
 8005d84:	d01e      	beq.n	8005dc4 <_printf_common+0xa4>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	6922      	ldr	r2, [r4, #16]
 8005d8a:	f003 0306 	and.w	r3, r3, #6
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	bf02      	ittt	eq
 8005d92:	68e5      	ldreq	r5, [r4, #12]
 8005d94:	6833      	ldreq	r3, [r6, #0]
 8005d96:	1aed      	subeq	r5, r5, r3
 8005d98:	68a3      	ldr	r3, [r4, #8]
 8005d9a:	bf0c      	ite	eq
 8005d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da0:	2500      	movne	r5, #0
 8005da2:	4293      	cmp	r3, r2
 8005da4:	bfc4      	itt	gt
 8005da6:	1a9b      	subgt	r3, r3, r2
 8005da8:	18ed      	addgt	r5, r5, r3
 8005daa:	2600      	movs	r6, #0
 8005dac:	341a      	adds	r4, #26
 8005dae:	42b5      	cmp	r5, r6
 8005db0:	d11a      	bne.n	8005de8 <_printf_common+0xc8>
 8005db2:	2000      	movs	r0, #0
 8005db4:	e008      	b.n	8005dc8 <_printf_common+0xa8>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4652      	mov	r2, sl
 8005dba:	4641      	mov	r1, r8
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	47c8      	blx	r9
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d103      	bne.n	8005dcc <_printf_common+0xac>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	3501      	adds	r5, #1
 8005dce:	e7c6      	b.n	8005d5e <_printf_common+0x3e>
 8005dd0:	18e1      	adds	r1, r4, r3
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	2030      	movs	r0, #48	@ 0x30
 8005dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dda:	4422      	add	r2, r4
 8005ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005de4:	3302      	adds	r3, #2
 8005de6:	e7c7      	b.n	8005d78 <_printf_common+0x58>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4622      	mov	r2, r4
 8005dec:	4641      	mov	r1, r8
 8005dee:	4638      	mov	r0, r7
 8005df0:	47c8      	blx	r9
 8005df2:	3001      	adds	r0, #1
 8005df4:	d0e6      	beq.n	8005dc4 <_printf_common+0xa4>
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7d9      	b.n	8005dae <_printf_common+0x8e>
	...

08005dfc <_printf_i>:
 8005dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	7e0f      	ldrb	r7, [r1, #24]
 8005e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e04:	2f78      	cmp	r7, #120	@ 0x78
 8005e06:	4691      	mov	r9, r2
 8005e08:	4680      	mov	r8, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	469a      	mov	sl, r3
 8005e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e12:	d807      	bhi.n	8005e24 <_printf_i+0x28>
 8005e14:	2f62      	cmp	r7, #98	@ 0x62
 8005e16:	d80a      	bhi.n	8005e2e <_printf_i+0x32>
 8005e18:	2f00      	cmp	r7, #0
 8005e1a:	f000 80d2 	beq.w	8005fc2 <_printf_i+0x1c6>
 8005e1e:	2f58      	cmp	r7, #88	@ 0x58
 8005e20:	f000 80b9 	beq.w	8005f96 <_printf_i+0x19a>
 8005e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e2c:	e03a      	b.n	8005ea4 <_printf_i+0xa8>
 8005e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e32:	2b15      	cmp	r3, #21
 8005e34:	d8f6      	bhi.n	8005e24 <_printf_i+0x28>
 8005e36:	a101      	add	r1, pc, #4	@ (adr r1, 8005e3c <_printf_i+0x40>)
 8005e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e3c:	08005e95 	.word	0x08005e95
 8005e40:	08005ea9 	.word	0x08005ea9
 8005e44:	08005e25 	.word	0x08005e25
 8005e48:	08005e25 	.word	0x08005e25
 8005e4c:	08005e25 	.word	0x08005e25
 8005e50:	08005e25 	.word	0x08005e25
 8005e54:	08005ea9 	.word	0x08005ea9
 8005e58:	08005e25 	.word	0x08005e25
 8005e5c:	08005e25 	.word	0x08005e25
 8005e60:	08005e25 	.word	0x08005e25
 8005e64:	08005e25 	.word	0x08005e25
 8005e68:	08005fa9 	.word	0x08005fa9
 8005e6c:	08005ed3 	.word	0x08005ed3
 8005e70:	08005f63 	.word	0x08005f63
 8005e74:	08005e25 	.word	0x08005e25
 8005e78:	08005e25 	.word	0x08005e25
 8005e7c:	08005fcb 	.word	0x08005fcb
 8005e80:	08005e25 	.word	0x08005e25
 8005e84:	08005ed3 	.word	0x08005ed3
 8005e88:	08005e25 	.word	0x08005e25
 8005e8c:	08005e25 	.word	0x08005e25
 8005e90:	08005f6b 	.word	0x08005f6b
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6032      	str	r2, [r6, #0]
 8005e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e09d      	b.n	8005fe4 <_printf_i+0x1e8>
 8005ea8:	6833      	ldr	r3, [r6, #0]
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	1d19      	adds	r1, r3, #4
 8005eae:	6031      	str	r1, [r6, #0]
 8005eb0:	0606      	lsls	r6, r0, #24
 8005eb2:	d501      	bpl.n	8005eb8 <_printf_i+0xbc>
 8005eb4:	681d      	ldr	r5, [r3, #0]
 8005eb6:	e003      	b.n	8005ec0 <_printf_i+0xc4>
 8005eb8:	0645      	lsls	r5, r0, #25
 8005eba:	d5fb      	bpl.n	8005eb4 <_printf_i+0xb8>
 8005ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	da03      	bge.n	8005ecc <_printf_i+0xd0>
 8005ec4:	232d      	movs	r3, #45	@ 0x2d
 8005ec6:	426d      	negs	r5, r5
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ecc:	4859      	ldr	r0, [pc, #356]	@ (8006034 <_printf_i+0x238>)
 8005ece:	230a      	movs	r3, #10
 8005ed0:	e011      	b.n	8005ef6 <_printf_i+0xfa>
 8005ed2:	6821      	ldr	r1, [r4, #0]
 8005ed4:	6833      	ldr	r3, [r6, #0]
 8005ed6:	0608      	lsls	r0, r1, #24
 8005ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005edc:	d402      	bmi.n	8005ee4 <_printf_i+0xe8>
 8005ede:	0649      	lsls	r1, r1, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b2ad      	uxthmi	r5, r5
 8005ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ee6:	4853      	ldr	r0, [pc, #332]	@ (8006034 <_printf_i+0x238>)
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	bf14      	ite	ne
 8005eec:	230a      	movne	r3, #10
 8005eee:	2308      	moveq	r3, #8
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ef6:	6866      	ldr	r6, [r4, #4]
 8005ef8:	60a6      	str	r6, [r4, #8]
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	bfa2      	ittt	ge
 8005efe:	6821      	ldrge	r1, [r4, #0]
 8005f00:	f021 0104 	bicge.w	r1, r1, #4
 8005f04:	6021      	strge	r1, [r4, #0]
 8005f06:	b90d      	cbnz	r5, 8005f0c <_printf_i+0x110>
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	d04b      	beq.n	8005fa4 <_printf_i+0x1a8>
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f12:	fb03 5711 	mls	r7, r3, r1, r5
 8005f16:	5dc7      	ldrb	r7, [r0, r7]
 8005f18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f1c:	462f      	mov	r7, r5
 8005f1e:	42bb      	cmp	r3, r7
 8005f20:	460d      	mov	r5, r1
 8005f22:	d9f4      	bls.n	8005f0e <_printf_i+0x112>
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d10b      	bne.n	8005f40 <_printf_i+0x144>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	07df      	lsls	r7, r3, #31
 8005f2c:	d508      	bpl.n	8005f40 <_printf_i+0x144>
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	6861      	ldr	r1, [r4, #4]
 8005f32:	4299      	cmp	r1, r3
 8005f34:	bfde      	ittt	le
 8005f36:	2330      	movle	r3, #48	@ 0x30
 8005f38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f40:	1b92      	subs	r2, r2, r6
 8005f42:	6122      	str	r2, [r4, #16]
 8005f44:	f8cd a000 	str.w	sl, [sp]
 8005f48:	464b      	mov	r3, r9
 8005f4a:	aa03      	add	r2, sp, #12
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f7ff fee6 	bl	8005d20 <_printf_common>
 8005f54:	3001      	adds	r0, #1
 8005f56:	d14a      	bne.n	8005fee <_printf_i+0x1f2>
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	b004      	add	sp, #16
 8005f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	f043 0320 	orr.w	r3, r3, #32
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	4833      	ldr	r0, [pc, #204]	@ (8006038 <_printf_i+0x23c>)
 8005f6c:	2778      	movs	r7, #120	@ 0x78
 8005f6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	6831      	ldr	r1, [r6, #0]
 8005f76:	061f      	lsls	r7, r3, #24
 8005f78:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f7c:	d402      	bmi.n	8005f84 <_printf_i+0x188>
 8005f7e:	065f      	lsls	r7, r3, #25
 8005f80:	bf48      	it	mi
 8005f82:	b2ad      	uxthmi	r5, r5
 8005f84:	6031      	str	r1, [r6, #0]
 8005f86:	07d9      	lsls	r1, r3, #31
 8005f88:	bf44      	itt	mi
 8005f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f8e:	6023      	strmi	r3, [r4, #0]
 8005f90:	b11d      	cbz	r5, 8005f9a <_printf_i+0x19e>
 8005f92:	2310      	movs	r3, #16
 8005f94:	e7ac      	b.n	8005ef0 <_printf_i+0xf4>
 8005f96:	4827      	ldr	r0, [pc, #156]	@ (8006034 <_printf_i+0x238>)
 8005f98:	e7e9      	b.n	8005f6e <_printf_i+0x172>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f023 0320 	bic.w	r3, r3, #32
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	e7f6      	b.n	8005f92 <_printf_i+0x196>
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	e7bd      	b.n	8005f24 <_printf_i+0x128>
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	6825      	ldr	r5, [r4, #0]
 8005fac:	6961      	ldr	r1, [r4, #20]
 8005fae:	1d18      	adds	r0, r3, #4
 8005fb0:	6030      	str	r0, [r6, #0]
 8005fb2:	062e      	lsls	r6, r5, #24
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	d501      	bpl.n	8005fbc <_printf_i+0x1c0>
 8005fb8:	6019      	str	r1, [r3, #0]
 8005fba:	e002      	b.n	8005fc2 <_printf_i+0x1c6>
 8005fbc:	0668      	lsls	r0, r5, #25
 8005fbe:	d5fb      	bpl.n	8005fb8 <_printf_i+0x1bc>
 8005fc0:	8019      	strh	r1, [r3, #0]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	4616      	mov	r6, r2
 8005fc8:	e7bc      	b.n	8005f44 <_printf_i+0x148>
 8005fca:	6833      	ldr	r3, [r6, #0]
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	6032      	str	r2, [r6, #0]
 8005fd0:	681e      	ldr	r6, [r3, #0]
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f7fa f90a 	bl	80001f0 <memchr>
 8005fdc:	b108      	cbz	r0, 8005fe2 <_printf_i+0x1e6>
 8005fde:	1b80      	subs	r0, r0, r6
 8005fe0:	6060      	str	r0, [r4, #4]
 8005fe2:	6863      	ldr	r3, [r4, #4]
 8005fe4:	6123      	str	r3, [r4, #16]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fec:	e7aa      	b.n	8005f44 <_printf_i+0x148>
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	47d0      	blx	sl
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d0ad      	beq.n	8005f58 <_printf_i+0x15c>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	079b      	lsls	r3, r3, #30
 8006000:	d413      	bmi.n	800602a <_printf_i+0x22e>
 8006002:	68e0      	ldr	r0, [r4, #12]
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	4298      	cmp	r0, r3
 8006008:	bfb8      	it	lt
 800600a:	4618      	movlt	r0, r3
 800600c:	e7a6      	b.n	8005f5c <_printf_i+0x160>
 800600e:	2301      	movs	r3, #1
 8006010:	4632      	mov	r2, r6
 8006012:	4649      	mov	r1, r9
 8006014:	4640      	mov	r0, r8
 8006016:	47d0      	blx	sl
 8006018:	3001      	adds	r0, #1
 800601a:	d09d      	beq.n	8005f58 <_printf_i+0x15c>
 800601c:	3501      	adds	r5, #1
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	9903      	ldr	r1, [sp, #12]
 8006022:	1a5b      	subs	r3, r3, r1
 8006024:	42ab      	cmp	r3, r5
 8006026:	dcf2      	bgt.n	800600e <_printf_i+0x212>
 8006028:	e7eb      	b.n	8006002 <_printf_i+0x206>
 800602a:	2500      	movs	r5, #0
 800602c:	f104 0619 	add.w	r6, r4, #25
 8006030:	e7f5      	b.n	800601e <_printf_i+0x222>
 8006032:	bf00      	nop
 8006034:	08007275 	.word	0x08007275
 8006038:	08007286 	.word	0x08007286

0800603c <memmove>:
 800603c:	4288      	cmp	r0, r1
 800603e:	b510      	push	{r4, lr}
 8006040:	eb01 0402 	add.w	r4, r1, r2
 8006044:	d902      	bls.n	800604c <memmove+0x10>
 8006046:	4284      	cmp	r4, r0
 8006048:	4623      	mov	r3, r4
 800604a:	d807      	bhi.n	800605c <memmove+0x20>
 800604c:	1e43      	subs	r3, r0, #1
 800604e:	42a1      	cmp	r1, r4
 8006050:	d008      	beq.n	8006064 <memmove+0x28>
 8006052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800605a:	e7f8      	b.n	800604e <memmove+0x12>
 800605c:	4402      	add	r2, r0
 800605e:	4601      	mov	r1, r0
 8006060:	428a      	cmp	r2, r1
 8006062:	d100      	bne.n	8006066 <memmove+0x2a>
 8006064:	bd10      	pop	{r4, pc}
 8006066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800606a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800606e:	e7f7      	b.n	8006060 <memmove+0x24>

08006070 <_sbrk_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d06      	ldr	r5, [pc, #24]	@ (800608c <_sbrk_r+0x1c>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fc fb1a 	bl	80026b4 <_sbrk>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_sbrk_r+0x1a>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_sbrk_r+0x1a>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20000c00 	.word	0x20000c00

08006090 <memcpy>:
 8006090:	440a      	add	r2, r1
 8006092:	4291      	cmp	r1, r2
 8006094:	f100 33ff 	add.w	r3, r0, #4294967295
 8006098:	d100      	bne.n	800609c <memcpy+0xc>
 800609a:	4770      	bx	lr
 800609c:	b510      	push	{r4, lr}
 800609e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a6:	4291      	cmp	r1, r2
 80060a8:	d1f9      	bne.n	800609e <memcpy+0xe>
 80060aa:	bd10      	pop	{r4, pc}

080060ac <_realloc_r>:
 80060ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b0:	4680      	mov	r8, r0
 80060b2:	4615      	mov	r5, r2
 80060b4:	460c      	mov	r4, r1
 80060b6:	b921      	cbnz	r1, 80060c2 <_realloc_r+0x16>
 80060b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060bc:	4611      	mov	r1, r2
 80060be:	f7ff bc4b 	b.w	8005958 <_malloc_r>
 80060c2:	b92a      	cbnz	r2, 80060d0 <_realloc_r+0x24>
 80060c4:	f7ff fbdc 	bl	8005880 <_free_r>
 80060c8:	2400      	movs	r4, #0
 80060ca:	4620      	mov	r0, r4
 80060cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d0:	f000 f81a 	bl	8006108 <_malloc_usable_size_r>
 80060d4:	4285      	cmp	r5, r0
 80060d6:	4606      	mov	r6, r0
 80060d8:	d802      	bhi.n	80060e0 <_realloc_r+0x34>
 80060da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060de:	d8f4      	bhi.n	80060ca <_realloc_r+0x1e>
 80060e0:	4629      	mov	r1, r5
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7ff fc38 	bl	8005958 <_malloc_r>
 80060e8:	4607      	mov	r7, r0
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d0ec      	beq.n	80060c8 <_realloc_r+0x1c>
 80060ee:	42b5      	cmp	r5, r6
 80060f0:	462a      	mov	r2, r5
 80060f2:	4621      	mov	r1, r4
 80060f4:	bf28      	it	cs
 80060f6:	4632      	movcs	r2, r6
 80060f8:	f7ff ffca 	bl	8006090 <memcpy>
 80060fc:	4621      	mov	r1, r4
 80060fe:	4640      	mov	r0, r8
 8006100:	f7ff fbbe 	bl	8005880 <_free_r>
 8006104:	463c      	mov	r4, r7
 8006106:	e7e0      	b.n	80060ca <_realloc_r+0x1e>

08006108 <_malloc_usable_size_r>:
 8006108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800610c:	1f18      	subs	r0, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfbc      	itt	lt
 8006112:	580b      	ldrlt	r3, [r1, r0]
 8006114:	18c0      	addlt	r0, r0, r3
 8006116:	4770      	bx	lr

08006118 <cos>:
 8006118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800611a:	ec53 2b10 	vmov	r2, r3, d0
 800611e:	4826      	ldr	r0, [pc, #152]	@ (80061b8 <cos+0xa0>)
 8006120:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006124:	4281      	cmp	r1, r0
 8006126:	d806      	bhi.n	8006136 <cos+0x1e>
 8006128:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80061b0 <cos+0x98>
 800612c:	b005      	add	sp, #20
 800612e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006132:	f000 b845 	b.w	80061c0 <__kernel_cos>
 8006136:	4821      	ldr	r0, [pc, #132]	@ (80061bc <cos+0xa4>)
 8006138:	4281      	cmp	r1, r0
 800613a:	d908      	bls.n	800614e <cos+0x36>
 800613c:	4610      	mov	r0, r2
 800613e:	4619      	mov	r1, r3
 8006140:	f7fa f9d4 	bl	80004ec <__aeabi_dsub>
 8006144:	ec41 0b10 	vmov	d0, r0, r1
 8006148:	b005      	add	sp, #20
 800614a:	f85d fb04 	ldr.w	pc, [sp], #4
 800614e:	4668      	mov	r0, sp
 8006150:	f000 f9ba 	bl	80064c8 <__ieee754_rem_pio2>
 8006154:	f000 0003 	and.w	r0, r0, #3
 8006158:	2801      	cmp	r0, #1
 800615a:	d00b      	beq.n	8006174 <cos+0x5c>
 800615c:	2802      	cmp	r0, #2
 800615e:	d015      	beq.n	800618c <cos+0x74>
 8006160:	b9d8      	cbnz	r0, 800619a <cos+0x82>
 8006162:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006166:	ed9d 0b00 	vldr	d0, [sp]
 800616a:	f000 f829 	bl	80061c0 <__kernel_cos>
 800616e:	ec51 0b10 	vmov	r0, r1, d0
 8006172:	e7e7      	b.n	8006144 <cos+0x2c>
 8006174:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006178:	ed9d 0b00 	vldr	d0, [sp]
 800617c:	f000 f8e8 	bl	8006350 <__kernel_sin>
 8006180:	ec53 2b10 	vmov	r2, r3, d0
 8006184:	4610      	mov	r0, r2
 8006186:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800618a:	e7db      	b.n	8006144 <cos+0x2c>
 800618c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006190:	ed9d 0b00 	vldr	d0, [sp]
 8006194:	f000 f814 	bl	80061c0 <__kernel_cos>
 8006198:	e7f2      	b.n	8006180 <cos+0x68>
 800619a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800619e:	ed9d 0b00 	vldr	d0, [sp]
 80061a2:	2001      	movs	r0, #1
 80061a4:	f000 f8d4 	bl	8006350 <__kernel_sin>
 80061a8:	e7e1      	b.n	800616e <cos+0x56>
 80061aa:	bf00      	nop
 80061ac:	f3af 8000 	nop.w
	...
 80061b8:	3fe921fb 	.word	0x3fe921fb
 80061bc:	7fefffff 	.word	0x7fefffff

080061c0 <__kernel_cos>:
 80061c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	ec57 6b10 	vmov	r6, r7, d0
 80061c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80061cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80061d0:	ed8d 1b00 	vstr	d1, [sp]
 80061d4:	d206      	bcs.n	80061e4 <__kernel_cos+0x24>
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	f7fa fbc7 	bl	800096c <__aeabi_d2iz>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f000 8088 	beq.w	80062f4 <__kernel_cos+0x134>
 80061e4:	4632      	mov	r2, r6
 80061e6:	463b      	mov	r3, r7
 80061e8:	4630      	mov	r0, r6
 80061ea:	4639      	mov	r1, r7
 80061ec:	f7fa f850 	bl	8000290 <__aeabi_dmul>
 80061f0:	4b51      	ldr	r3, [pc, #324]	@ (8006338 <__kernel_cos+0x178>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	4604      	mov	r4, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	f7fa f84a 	bl	8000290 <__aeabi_dmul>
 80061fc:	a340      	add	r3, pc, #256	@ (adr r3, 8006300 <__kernel_cos+0x140>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	4682      	mov	sl, r0
 8006204:	468b      	mov	fp, r1
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa f841 	bl	8000290 <__aeabi_dmul>
 800620e:	a33e      	add	r3, pc, #248	@ (adr r3, 8006308 <__kernel_cos+0x148>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa f96c 	bl	80004f0 <__adddf3>
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	f7fa f838 	bl	8000290 <__aeabi_dmul>
 8006220:	a33b      	add	r3, pc, #236	@ (adr r3, 8006310 <__kernel_cos+0x150>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7fa f961 	bl	80004ec <__aeabi_dsub>
 800622a:	4622      	mov	r2, r4
 800622c:	462b      	mov	r3, r5
 800622e:	f7fa f82f 	bl	8000290 <__aeabi_dmul>
 8006232:	a339      	add	r3, pc, #228	@ (adr r3, 8006318 <__kernel_cos+0x158>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f95a 	bl	80004f0 <__adddf3>
 800623c:	4622      	mov	r2, r4
 800623e:	462b      	mov	r3, r5
 8006240:	f7fa f826 	bl	8000290 <__aeabi_dmul>
 8006244:	a336      	add	r3, pc, #216	@ (adr r3, 8006320 <__kernel_cos+0x160>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f94f 	bl	80004ec <__aeabi_dsub>
 800624e:	4622      	mov	r2, r4
 8006250:	462b      	mov	r3, r5
 8006252:	f7fa f81d 	bl	8000290 <__aeabi_dmul>
 8006256:	a334      	add	r3, pc, #208	@ (adr r3, 8006328 <__kernel_cos+0x168>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f948 	bl	80004f0 <__adddf3>
 8006260:	4622      	mov	r2, r4
 8006262:	462b      	mov	r3, r5
 8006264:	f7fa f814 	bl	8000290 <__aeabi_dmul>
 8006268:	4622      	mov	r2, r4
 800626a:	462b      	mov	r3, r5
 800626c:	f7fa f810 	bl	8000290 <__aeabi_dmul>
 8006270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa f808 	bl	8000290 <__aeabi_dmul>
 8006280:	460b      	mov	r3, r1
 8006282:	4602      	mov	r2, r0
 8006284:	4629      	mov	r1, r5
 8006286:	4620      	mov	r0, r4
 8006288:	f7fa f930 	bl	80004ec <__aeabi_dsub>
 800628c:	4b2b      	ldr	r3, [pc, #172]	@ (800633c <__kernel_cos+0x17c>)
 800628e:	4598      	cmp	r8, r3
 8006290:	4606      	mov	r6, r0
 8006292:	460f      	mov	r7, r1
 8006294:	d810      	bhi.n	80062b8 <__kernel_cos+0xf8>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4650      	mov	r0, sl
 800629c:	4659      	mov	r1, fp
 800629e:	f7fa f925 	bl	80004ec <__aeabi_dsub>
 80062a2:	460b      	mov	r3, r1
 80062a4:	4926      	ldr	r1, [pc, #152]	@ (8006340 <__kernel_cos+0x180>)
 80062a6:	4602      	mov	r2, r0
 80062a8:	2000      	movs	r0, #0
 80062aa:	f7fa f91f 	bl	80004ec <__aeabi_dsub>
 80062ae:	ec41 0b10 	vmov	d0, r0, r1
 80062b2:	b003      	add	sp, #12
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b8:	4b22      	ldr	r3, [pc, #136]	@ (8006344 <__kernel_cos+0x184>)
 80062ba:	4921      	ldr	r1, [pc, #132]	@ (8006340 <__kernel_cos+0x180>)
 80062bc:	4598      	cmp	r8, r3
 80062be:	bf8c      	ite	hi
 80062c0:	4d21      	ldrhi	r5, [pc, #132]	@ (8006348 <__kernel_cos+0x188>)
 80062c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80062c6:	2400      	movs	r4, #0
 80062c8:	4622      	mov	r2, r4
 80062ca:	462b      	mov	r3, r5
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7fa f90d 	bl	80004ec <__aeabi_dsub>
 80062d2:	4622      	mov	r2, r4
 80062d4:	4680      	mov	r8, r0
 80062d6:	4689      	mov	r9, r1
 80062d8:	462b      	mov	r3, r5
 80062da:	4650      	mov	r0, sl
 80062dc:	4659      	mov	r1, fp
 80062de:	f7fa f905 	bl	80004ec <__aeabi_dsub>
 80062e2:	4632      	mov	r2, r6
 80062e4:	463b      	mov	r3, r7
 80062e6:	f7fa f901 	bl	80004ec <__aeabi_dsub>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	e7da      	b.n	80062aa <__kernel_cos+0xea>
 80062f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006330 <__kernel_cos+0x170>
 80062f8:	e7db      	b.n	80062b2 <__kernel_cos+0xf2>
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w
 8006300:	be8838d4 	.word	0xbe8838d4
 8006304:	bda8fae9 	.word	0xbda8fae9
 8006308:	bdb4b1c4 	.word	0xbdb4b1c4
 800630c:	3e21ee9e 	.word	0x3e21ee9e
 8006310:	809c52ad 	.word	0x809c52ad
 8006314:	3e927e4f 	.word	0x3e927e4f
 8006318:	19cb1590 	.word	0x19cb1590
 800631c:	3efa01a0 	.word	0x3efa01a0
 8006320:	16c15177 	.word	0x16c15177
 8006324:	3f56c16c 	.word	0x3f56c16c
 8006328:	5555554c 	.word	0x5555554c
 800632c:	3fa55555 	.word	0x3fa55555
 8006330:	00000000 	.word	0x00000000
 8006334:	3ff00000 	.word	0x3ff00000
 8006338:	3fe00000 	.word	0x3fe00000
 800633c:	3fd33332 	.word	0x3fd33332
 8006340:	3ff00000 	.word	0x3ff00000
 8006344:	3fe90000 	.word	0x3fe90000
 8006348:	3fd20000 	.word	0x3fd20000
 800634c:	00000000 	.word	0x00000000

08006350 <__kernel_sin>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	ec55 4b10 	vmov	r4, r5, d0
 8006358:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800635c:	b085      	sub	sp, #20
 800635e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006362:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006366:	4680      	mov	r8, r0
 8006368:	d205      	bcs.n	8006376 <__kernel_sin+0x26>
 800636a:	4620      	mov	r0, r4
 800636c:	4629      	mov	r1, r5
 800636e:	f7fa fafd 	bl	800096c <__aeabi_d2iz>
 8006372:	2800      	cmp	r0, #0
 8006374:	d052      	beq.n	800641c <__kernel_sin+0xcc>
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	f7f9 ff87 	bl	8000290 <__aeabi_dmul>
 8006382:	4682      	mov	sl, r0
 8006384:	468b      	mov	fp, r1
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7f9 ff7f 	bl	8000290 <__aeabi_dmul>
 8006392:	a342      	add	r3, pc, #264	@ (adr r3, 800649c <__kernel_sin+0x14c>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	e9cd 0100 	strd	r0, r1, [sp]
 800639c:	4650      	mov	r0, sl
 800639e:	4659      	mov	r1, fp
 80063a0:	f7f9 ff76 	bl	8000290 <__aeabi_dmul>
 80063a4:	a33f      	add	r3, pc, #252	@ (adr r3, 80064a4 <__kernel_sin+0x154>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7fa f89f 	bl	80004ec <__aeabi_dsub>
 80063ae:	4652      	mov	r2, sl
 80063b0:	465b      	mov	r3, fp
 80063b2:	f7f9 ff6d 	bl	8000290 <__aeabi_dmul>
 80063b6:	a33d      	add	r3, pc, #244	@ (adr r3, 80064ac <__kernel_sin+0x15c>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f7fa f898 	bl	80004f0 <__adddf3>
 80063c0:	4652      	mov	r2, sl
 80063c2:	465b      	mov	r3, fp
 80063c4:	f7f9 ff64 	bl	8000290 <__aeabi_dmul>
 80063c8:	a33a      	add	r3, pc, #232	@ (adr r3, 80064b4 <__kernel_sin+0x164>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7fa f88d 	bl	80004ec <__aeabi_dsub>
 80063d2:	4652      	mov	r2, sl
 80063d4:	465b      	mov	r3, fp
 80063d6:	f7f9 ff5b 	bl	8000290 <__aeabi_dmul>
 80063da:	a338      	add	r3, pc, #224	@ (adr r3, 80064bc <__kernel_sin+0x16c>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7fa f886 	bl	80004f0 <__adddf3>
 80063e4:	4606      	mov	r6, r0
 80063e6:	460f      	mov	r7, r1
 80063e8:	f1b8 0f00 	cmp.w	r8, #0
 80063ec:	d11b      	bne.n	8006426 <__kernel_sin+0xd6>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4650      	mov	r0, sl
 80063f4:	4659      	mov	r1, fp
 80063f6:	f7f9 ff4b 	bl	8000290 <__aeabi_dmul>
 80063fa:	a325      	add	r3, pc, #148	@ (adr r3, 8006490 <__kernel_sin+0x140>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7fa f874 	bl	80004ec <__aeabi_dsub>
 8006404:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006408:	f7f9 ff42 	bl	8000290 <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	f7fa f86c 	bl	80004f0 <__adddf3>
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	ec45 4b10 	vmov	d0, r4, r5
 8006420:	b005      	add	sp, #20
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642a:	4b1b      	ldr	r3, [pc, #108]	@ (8006498 <__kernel_sin+0x148>)
 800642c:	2200      	movs	r2, #0
 800642e:	f7f9 ff2f 	bl	8000290 <__aeabi_dmul>
 8006432:	4632      	mov	r2, r6
 8006434:	4680      	mov	r8, r0
 8006436:	4689      	mov	r9, r1
 8006438:	463b      	mov	r3, r7
 800643a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800643e:	f7f9 ff27 	bl	8000290 <__aeabi_dmul>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4640      	mov	r0, r8
 8006448:	4649      	mov	r1, r9
 800644a:	f7fa f84f 	bl	80004ec <__aeabi_dsub>
 800644e:	4652      	mov	r2, sl
 8006450:	465b      	mov	r3, fp
 8006452:	f7f9 ff1d 	bl	8000290 <__aeabi_dmul>
 8006456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645a:	f7fa f847 	bl	80004ec <__aeabi_dsub>
 800645e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006490 <__kernel_sin+0x140>)
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	4606      	mov	r6, r0
 8006466:	460f      	mov	r7, r1
 8006468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800646c:	f7f9 ff10 	bl	8000290 <__aeabi_dmul>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	f7fa f83a 	bl	80004f0 <__adddf3>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	f7fa f832 	bl	80004ec <__aeabi_dsub>
 8006488:	e7c6      	b.n	8006418 <__kernel_sin+0xc8>
 800648a:	bf00      	nop
 800648c:	f3af 8000 	nop.w
 8006490:	55555549 	.word	0x55555549
 8006494:	3fc55555 	.word	0x3fc55555
 8006498:	3fe00000 	.word	0x3fe00000
 800649c:	5acfd57c 	.word	0x5acfd57c
 80064a0:	3de5d93a 	.word	0x3de5d93a
 80064a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80064a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80064ac:	57b1fe7d 	.word	0x57b1fe7d
 80064b0:	3ec71de3 	.word	0x3ec71de3
 80064b4:	19c161d5 	.word	0x19c161d5
 80064b8:	3f2a01a0 	.word	0x3f2a01a0
 80064bc:	1110f8a6 	.word	0x1110f8a6
 80064c0:	3f811111 	.word	0x3f811111
 80064c4:	00000000 	.word	0x00000000

080064c8 <__ieee754_rem_pio2>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	ec57 6b10 	vmov	r6, r7, d0
 80064d0:	4bc5      	ldr	r3, [pc, #788]	@ (80067e8 <__ieee754_rem_pio2+0x320>)
 80064d2:	b08d      	sub	sp, #52	@ 0x34
 80064d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80064d8:	4598      	cmp	r8, r3
 80064da:	4604      	mov	r4, r0
 80064dc:	9704      	str	r7, [sp, #16]
 80064de:	d807      	bhi.n	80064f0 <__ieee754_rem_pio2+0x28>
 80064e0:	2200      	movs	r2, #0
 80064e2:	2300      	movs	r3, #0
 80064e4:	ed80 0b00 	vstr	d0, [r0]
 80064e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80064ec:	2500      	movs	r5, #0
 80064ee:	e028      	b.n	8006542 <__ieee754_rem_pio2+0x7a>
 80064f0:	4bbe      	ldr	r3, [pc, #760]	@ (80067ec <__ieee754_rem_pio2+0x324>)
 80064f2:	4598      	cmp	r8, r3
 80064f4:	d878      	bhi.n	80065e8 <__ieee754_rem_pio2+0x120>
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	4dbd      	ldr	r5, [pc, #756]	@ (80067f0 <__ieee754_rem_pio2+0x328>)
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	4630      	mov	r0, r6
 80064fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 80067b0 <__ieee754_rem_pio2+0x2e8>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	4639      	mov	r1, r7
 8006506:	dd38      	ble.n	800657a <__ieee754_rem_pio2+0xb2>
 8006508:	f7f9 fff0 	bl	80004ec <__aeabi_dsub>
 800650c:	45a8      	cmp	r8, r5
 800650e:	4606      	mov	r6, r0
 8006510:	460f      	mov	r7, r1
 8006512:	d01a      	beq.n	800654a <__ieee754_rem_pio2+0x82>
 8006514:	a3a8      	add	r3, pc, #672	@ (adr r3, 80067b8 <__ieee754_rem_pio2+0x2f0>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7f9 ffe7 	bl	80004ec <__aeabi_dsub>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4680      	mov	r8, r0
 8006524:	4689      	mov	r9, r1
 8006526:	4630      	mov	r0, r6
 8006528:	4639      	mov	r1, r7
 800652a:	f7f9 ffdf 	bl	80004ec <__aeabi_dsub>
 800652e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80067b8 <__ieee754_rem_pio2+0x2f0>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7f9 ffda 	bl	80004ec <__aeabi_dsub>
 8006538:	e9c4 8900 	strd	r8, r9, [r4]
 800653c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006540:	2501      	movs	r5, #1
 8006542:	4628      	mov	r0, r5
 8006544:	b00d      	add	sp, #52	@ 0x34
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	a39d      	add	r3, pc, #628	@ (adr r3, 80067c0 <__ieee754_rem_pio2+0x2f8>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7f9 ffcc 	bl	80004ec <__aeabi_dsub>
 8006554:	a39c      	add	r3, pc, #624	@ (adr r3, 80067c8 <__ieee754_rem_pio2+0x300>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	4606      	mov	r6, r0
 800655c:	460f      	mov	r7, r1
 800655e:	f7f9 ffc5 	bl	80004ec <__aeabi_dsub>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4680      	mov	r8, r0
 8006568:	4689      	mov	r9, r1
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7f9 ffbd 	bl	80004ec <__aeabi_dsub>
 8006572:	a395      	add	r3, pc, #596	@ (adr r3, 80067c8 <__ieee754_rem_pio2+0x300>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	e7dc      	b.n	8006534 <__ieee754_rem_pio2+0x6c>
 800657a:	f7f9 ffb9 	bl	80004f0 <__adddf3>
 800657e:	45a8      	cmp	r8, r5
 8006580:	4606      	mov	r6, r0
 8006582:	460f      	mov	r7, r1
 8006584:	d018      	beq.n	80065b8 <__ieee754_rem_pio2+0xf0>
 8006586:	a38c      	add	r3, pc, #560	@ (adr r3, 80067b8 <__ieee754_rem_pio2+0x2f0>)
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f7f9 ffb0 	bl	80004f0 <__adddf3>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4680      	mov	r8, r0
 8006596:	4689      	mov	r9, r1
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7f9 ffa6 	bl	80004ec <__aeabi_dsub>
 80065a0:	a385      	add	r3, pc, #532	@ (adr r3, 80067b8 <__ieee754_rem_pio2+0x2f0>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7f9 ffa3 	bl	80004f0 <__adddf3>
 80065aa:	f04f 35ff 	mov.w	r5, #4294967295
 80065ae:	e9c4 8900 	strd	r8, r9, [r4]
 80065b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065b6:	e7c4      	b.n	8006542 <__ieee754_rem_pio2+0x7a>
 80065b8:	a381      	add	r3, pc, #516	@ (adr r3, 80067c0 <__ieee754_rem_pio2+0x2f8>)
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f7f9 ff97 	bl	80004f0 <__adddf3>
 80065c2:	a381      	add	r3, pc, #516	@ (adr r3, 80067c8 <__ieee754_rem_pio2+0x300>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	f7f9 ff90 	bl	80004f0 <__adddf3>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4680      	mov	r8, r0
 80065d6:	4689      	mov	r9, r1
 80065d8:	4630      	mov	r0, r6
 80065da:	4639      	mov	r1, r7
 80065dc:	f7f9 ff86 	bl	80004ec <__aeabi_dsub>
 80065e0:	a379      	add	r3, pc, #484	@ (adr r3, 80067c8 <__ieee754_rem_pio2+0x300>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	e7de      	b.n	80065a6 <__ieee754_rem_pio2+0xde>
 80065e8:	4b82      	ldr	r3, [pc, #520]	@ (80067f4 <__ieee754_rem_pio2+0x32c>)
 80065ea:	4598      	cmp	r8, r3
 80065ec:	f200 80d1 	bhi.w	8006792 <__ieee754_rem_pio2+0x2ca>
 80065f0:	f000 f966 	bl	80068c0 <fabs>
 80065f4:	ec57 6b10 	vmov	r6, r7, d0
 80065f8:	a375      	add	r3, pc, #468	@ (adr r3, 80067d0 <__ieee754_rem_pio2+0x308>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7f9 fe45 	bl	8000290 <__aeabi_dmul>
 8006606:	4b7c      	ldr	r3, [pc, #496]	@ (80067f8 <__ieee754_rem_pio2+0x330>)
 8006608:	2200      	movs	r2, #0
 800660a:	f7f9 ff71 	bl	80004f0 <__adddf3>
 800660e:	f7fa f9ad 	bl	800096c <__aeabi_d2iz>
 8006612:	4605      	mov	r5, r0
 8006614:	f7fa f8b8 	bl	8000788 <__aeabi_i2d>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006620:	a363      	add	r3, pc, #396	@ (adr r3, 80067b0 <__ieee754_rem_pio2+0x2e8>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 fe33 	bl	8000290 <__aeabi_dmul>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f7f9 ff5b 	bl	80004ec <__aeabi_dsub>
 8006636:	a360      	add	r3, pc, #384	@ (adr r3, 80067b8 <__ieee754_rem_pio2+0x2f0>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	4682      	mov	sl, r0
 800663e:	468b      	mov	fp, r1
 8006640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006644:	f7f9 fe24 	bl	8000290 <__aeabi_dmul>
 8006648:	2d1f      	cmp	r5, #31
 800664a:	4606      	mov	r6, r0
 800664c:	460f      	mov	r7, r1
 800664e:	dc0c      	bgt.n	800666a <__ieee754_rem_pio2+0x1a2>
 8006650:	4b6a      	ldr	r3, [pc, #424]	@ (80067fc <__ieee754_rem_pio2+0x334>)
 8006652:	1e6a      	subs	r2, r5, #1
 8006654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006658:	4543      	cmp	r3, r8
 800665a:	d006      	beq.n	800666a <__ieee754_rem_pio2+0x1a2>
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	4650      	mov	r0, sl
 8006662:	4659      	mov	r1, fp
 8006664:	f7f9 ff42 	bl	80004ec <__aeabi_dsub>
 8006668:	e00e      	b.n	8006688 <__ieee754_rem_pio2+0x1c0>
 800666a:	463b      	mov	r3, r7
 800666c:	4632      	mov	r2, r6
 800666e:	4650      	mov	r0, sl
 8006670:	4659      	mov	r1, fp
 8006672:	f7f9 ff3b 	bl	80004ec <__aeabi_dsub>
 8006676:	ea4f 5328 	mov.w	r3, r8, asr #20
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006680:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006684:	2b10      	cmp	r3, #16
 8006686:	dc02      	bgt.n	800668e <__ieee754_rem_pio2+0x1c6>
 8006688:	e9c4 0100 	strd	r0, r1, [r4]
 800668c:	e039      	b.n	8006702 <__ieee754_rem_pio2+0x23a>
 800668e:	a34c      	add	r3, pc, #304	@ (adr r3, 80067c0 <__ieee754_rem_pio2+0x2f8>)
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006698:	f7f9 fdfa 	bl	8000290 <__aeabi_dmul>
 800669c:	4606      	mov	r6, r0
 800669e:	460f      	mov	r7, r1
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4650      	mov	r0, sl
 80066a6:	4659      	mov	r1, fp
 80066a8:	f7f9 ff20 	bl	80004ec <__aeabi_dsub>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4680      	mov	r8, r0
 80066b2:	4689      	mov	r9, r1
 80066b4:	4650      	mov	r0, sl
 80066b6:	4659      	mov	r1, fp
 80066b8:	f7f9 ff18 	bl	80004ec <__aeabi_dsub>
 80066bc:	4632      	mov	r2, r6
 80066be:	463b      	mov	r3, r7
 80066c0:	f7f9 ff14 	bl	80004ec <__aeabi_dsub>
 80066c4:	a340      	add	r3, pc, #256	@ (adr r3, 80067c8 <__ieee754_rem_pio2+0x300>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	4606      	mov	r6, r0
 80066cc:	460f      	mov	r7, r1
 80066ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066d2:	f7f9 fddd 	bl	8000290 <__aeabi_dmul>
 80066d6:	4632      	mov	r2, r6
 80066d8:	463b      	mov	r3, r7
 80066da:	f7f9 ff07 	bl	80004ec <__aeabi_dsub>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4606      	mov	r6, r0
 80066e4:	460f      	mov	r7, r1
 80066e6:	4640      	mov	r0, r8
 80066e8:	4649      	mov	r1, r9
 80066ea:	f7f9 feff 	bl	80004ec <__aeabi_dsub>
 80066ee:	9a05      	ldr	r2, [sp, #20]
 80066f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b31      	cmp	r3, #49	@ 0x31
 80066f8:	dc20      	bgt.n	800673c <__ieee754_rem_pio2+0x274>
 80066fa:	e9c4 0100 	strd	r0, r1, [r4]
 80066fe:	46c2      	mov	sl, r8
 8006700:	46cb      	mov	fp, r9
 8006702:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006706:	4650      	mov	r0, sl
 8006708:	4642      	mov	r2, r8
 800670a:	464b      	mov	r3, r9
 800670c:	4659      	mov	r1, fp
 800670e:	f7f9 feed 	bl	80004ec <__aeabi_dsub>
 8006712:	463b      	mov	r3, r7
 8006714:	4632      	mov	r2, r6
 8006716:	f7f9 fee9 	bl	80004ec <__aeabi_dsub>
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006722:	f6bf af0e 	bge.w	8006542 <__ieee754_rem_pio2+0x7a>
 8006726:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800672a:	6063      	str	r3, [r4, #4]
 800672c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006730:	f8c4 8000 	str.w	r8, [r4]
 8006734:	60a0      	str	r0, [r4, #8]
 8006736:	60e3      	str	r3, [r4, #12]
 8006738:	426d      	negs	r5, r5
 800673a:	e702      	b.n	8006542 <__ieee754_rem_pio2+0x7a>
 800673c:	a326      	add	r3, pc, #152	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x310>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006746:	f7f9 fda3 	bl	8000290 <__aeabi_dmul>
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f7f9 fec9 	bl	80004ec <__aeabi_dsub>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7f9 fec1 	bl	80004ec <__aeabi_dsub>
 800676a:	4632      	mov	r2, r6
 800676c:	463b      	mov	r3, r7
 800676e:	f7f9 febd 	bl	80004ec <__aeabi_dsub>
 8006772:	a31b      	add	r3, pc, #108	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x318>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	4606      	mov	r6, r0
 800677a:	460f      	mov	r7, r1
 800677c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006780:	f7f9 fd86 	bl	8000290 <__aeabi_dmul>
 8006784:	4632      	mov	r2, r6
 8006786:	463b      	mov	r3, r7
 8006788:	f7f9 feb0 	bl	80004ec <__aeabi_dsub>
 800678c:	4606      	mov	r6, r0
 800678e:	460f      	mov	r7, r1
 8006790:	e764      	b.n	800665c <__ieee754_rem_pio2+0x194>
 8006792:	4b1b      	ldr	r3, [pc, #108]	@ (8006800 <__ieee754_rem_pio2+0x338>)
 8006794:	4598      	cmp	r8, r3
 8006796:	d935      	bls.n	8006804 <__ieee754_rem_pio2+0x33c>
 8006798:	4632      	mov	r2, r6
 800679a:	463b      	mov	r3, r7
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7f9 fea4 	bl	80004ec <__aeabi_dsub>
 80067a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067a8:	e9c4 0100 	strd	r0, r1, [r4]
 80067ac:	e69e      	b.n	80064ec <__ieee754_rem_pio2+0x24>
 80067ae:	bf00      	nop
 80067b0:	54400000 	.word	0x54400000
 80067b4:	3ff921fb 	.word	0x3ff921fb
 80067b8:	1a626331 	.word	0x1a626331
 80067bc:	3dd0b461 	.word	0x3dd0b461
 80067c0:	1a600000 	.word	0x1a600000
 80067c4:	3dd0b461 	.word	0x3dd0b461
 80067c8:	2e037073 	.word	0x2e037073
 80067cc:	3ba3198a 	.word	0x3ba3198a
 80067d0:	6dc9c883 	.word	0x6dc9c883
 80067d4:	3fe45f30 	.word	0x3fe45f30
 80067d8:	2e000000 	.word	0x2e000000
 80067dc:	3ba3198a 	.word	0x3ba3198a
 80067e0:	252049c1 	.word	0x252049c1
 80067e4:	397b839a 	.word	0x397b839a
 80067e8:	3fe921fb 	.word	0x3fe921fb
 80067ec:	4002d97b 	.word	0x4002d97b
 80067f0:	3ff921fb 	.word	0x3ff921fb
 80067f4:	413921fb 	.word	0x413921fb
 80067f8:	3fe00000 	.word	0x3fe00000
 80067fc:	08007298 	.word	0x08007298
 8006800:	7fefffff 	.word	0x7fefffff
 8006804:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006808:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800680c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006810:	4630      	mov	r0, r6
 8006812:	460f      	mov	r7, r1
 8006814:	f7fa f8aa 	bl	800096c <__aeabi_d2iz>
 8006818:	f7f9 ffb6 	bl	8000788 <__aeabi_i2d>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4630      	mov	r0, r6
 8006822:	4639      	mov	r1, r7
 8006824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006828:	f7f9 fe60 	bl	80004ec <__aeabi_dsub>
 800682c:	4b22      	ldr	r3, [pc, #136]	@ (80068b8 <__ieee754_rem_pio2+0x3f0>)
 800682e:	2200      	movs	r2, #0
 8006830:	f7f9 fd2e 	bl	8000290 <__aeabi_dmul>
 8006834:	460f      	mov	r7, r1
 8006836:	4606      	mov	r6, r0
 8006838:	f7fa f898 	bl	800096c <__aeabi_d2iz>
 800683c:	f7f9 ffa4 	bl	8000788 <__aeabi_i2d>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800684c:	f7f9 fe4e 	bl	80004ec <__aeabi_dsub>
 8006850:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <__ieee754_rem_pio2+0x3f0>)
 8006852:	2200      	movs	r2, #0
 8006854:	f7f9 fd1c 	bl	8000290 <__aeabi_dmul>
 8006858:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800685c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006860:	f04f 0803 	mov.w	r8, #3
 8006864:	2600      	movs	r6, #0
 8006866:	2700      	movs	r7, #0
 8006868:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800686c:	4632      	mov	r2, r6
 800686e:	463b      	mov	r3, r7
 8006870:	46c2      	mov	sl, r8
 8006872:	f108 38ff 	add.w	r8, r8, #4294967295
 8006876:	f7fa f847 	bl	8000908 <__aeabi_dcmpeq>
 800687a:	2800      	cmp	r0, #0
 800687c:	d1f4      	bne.n	8006868 <__ieee754_rem_pio2+0x3a0>
 800687e:	4b0f      	ldr	r3, [pc, #60]	@ (80068bc <__ieee754_rem_pio2+0x3f4>)
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	2302      	movs	r3, #2
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	462a      	mov	r2, r5
 8006888:	4653      	mov	r3, sl
 800688a:	4621      	mov	r1, r4
 800688c:	a806      	add	r0, sp, #24
 800688e:	f000 f81f 	bl	80068d0 <__kernel_rem_pio2>
 8006892:	9b04      	ldr	r3, [sp, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	4605      	mov	r5, r0
 8006898:	f6bf ae53 	bge.w	8006542 <__ieee754_rem_pio2+0x7a>
 800689c:	e9d4 2100 	ldrd	r2, r1, [r4]
 80068a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068a4:	e9c4 2300 	strd	r2, r3, [r4]
 80068a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80068ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80068b4:	e740      	b.n	8006738 <__ieee754_rem_pio2+0x270>
 80068b6:	bf00      	nop
 80068b8:	41700000 	.word	0x41700000
 80068bc:	08007318 	.word	0x08007318

080068c0 <fabs>:
 80068c0:	ec51 0b10 	vmov	r0, r1, d0
 80068c4:	4602      	mov	r2, r0
 80068c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80068ca:	ec43 2b10 	vmov	d0, r2, r3
 80068ce:	4770      	bx	lr

080068d0 <__kernel_rem_pio2>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	ed2d 8b02 	vpush	{d8}
 80068d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80068dc:	f112 0f14 	cmn.w	r2, #20
 80068e0:	9306      	str	r3, [sp, #24]
 80068e2:	9104      	str	r1, [sp, #16]
 80068e4:	4bbe      	ldr	r3, [pc, #760]	@ (8006be0 <__kernel_rem_pio2+0x310>)
 80068e6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80068e8:	9008      	str	r0, [sp, #32]
 80068ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068f6:	bfa8      	it	ge
 80068f8:	1ed4      	subge	r4, r2, #3
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	bfb2      	itee	lt
 80068fe:	2400      	movlt	r4, #0
 8006900:	2318      	movge	r3, #24
 8006902:	fb94 f4f3 	sdivge	r4, r4, r3
 8006906:	f06f 0317 	mvn.w	r3, #23
 800690a:	fb04 3303 	mla	r3, r4, r3, r3
 800690e:	eb03 0b02 	add.w	fp, r3, r2
 8006912:	9b00      	ldr	r3, [sp, #0]
 8006914:	9a05      	ldr	r2, [sp, #20]
 8006916:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006bd0 <__kernel_rem_pio2+0x300>
 800691a:	eb03 0802 	add.w	r8, r3, r2
 800691e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006920:	1aa7      	subs	r7, r4, r2
 8006922:	ae20      	add	r6, sp, #128	@ 0x80
 8006924:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006928:	2500      	movs	r5, #0
 800692a:	4545      	cmp	r5, r8
 800692c:	dd13      	ble.n	8006956 <__kernel_rem_pio2+0x86>
 800692e:	9b06      	ldr	r3, [sp, #24]
 8006930:	aa20      	add	r2, sp, #128	@ 0x80
 8006932:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006936:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	4598      	cmp	r8, r3
 8006942:	dc31      	bgt.n	80069a8 <__kernel_rem_pio2+0xd8>
 8006944:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006bd0 <__kernel_rem_pio2+0x300>
 8006948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800694c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006950:	462f      	mov	r7, r5
 8006952:	2600      	movs	r6, #0
 8006954:	e01b      	b.n	800698e <__kernel_rem_pio2+0xbe>
 8006956:	42ef      	cmn	r7, r5
 8006958:	d407      	bmi.n	800696a <__kernel_rem_pio2+0x9a>
 800695a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800695e:	f7f9 ff13 	bl	8000788 <__aeabi_i2d>
 8006962:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006966:	3501      	adds	r5, #1
 8006968:	e7df      	b.n	800692a <__kernel_rem_pio2+0x5a>
 800696a:	ec51 0b18 	vmov	r0, r1, d8
 800696e:	e7f8      	b.n	8006962 <__kernel_rem_pio2+0x92>
 8006970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006974:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006978:	f7f9 fc8a 	bl	8000290 <__aeabi_dmul>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006984:	f7f9 fdb4 	bl	80004f0 <__adddf3>
 8006988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800698c:	3601      	adds	r6, #1
 800698e:	9b05      	ldr	r3, [sp, #20]
 8006990:	429e      	cmp	r6, r3
 8006992:	f1a7 0708 	sub.w	r7, r7, #8
 8006996:	ddeb      	ble.n	8006970 <__kernel_rem_pio2+0xa0>
 8006998:	ed9d 7b02 	vldr	d7, [sp, #8]
 800699c:	f108 0801 	add.w	r8, r8, #1
 80069a0:	ecaa 7b02 	vstmia	sl!, {d7}
 80069a4:	3508      	adds	r5, #8
 80069a6:	e7ca      	b.n	800693e <__kernel_rem_pio2+0x6e>
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	f8dd 8000 	ldr.w	r8, [sp]
 80069ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80069b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80069b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80069bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80069c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069c4:	ab98      	add	r3, sp, #608	@ 0x260
 80069c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069ca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80069ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069d2:	ac0c      	add	r4, sp, #48	@ 0x30
 80069d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80069d6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80069da:	46a1      	mov	r9, r4
 80069dc:	46c2      	mov	sl, r8
 80069de:	f1ba 0f00 	cmp.w	sl, #0
 80069e2:	f1a5 0508 	sub.w	r5, r5, #8
 80069e6:	dc77      	bgt.n	8006ad8 <__kernel_rem_pio2+0x208>
 80069e8:	4658      	mov	r0, fp
 80069ea:	ed9d 0b02 	vldr	d0, [sp, #8]
 80069ee:	f000 fac7 	bl	8006f80 <scalbn>
 80069f2:	ec57 6b10 	vmov	r6, r7, d0
 80069f6:	2200      	movs	r2, #0
 80069f8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7f9 fc46 	bl	8000290 <__aeabi_dmul>
 8006a04:	ec41 0b10 	vmov	d0, r0, r1
 8006a08:	f000 fb3a 	bl	8007080 <floor>
 8006a0c:	4b75      	ldr	r3, [pc, #468]	@ (8006be4 <__kernel_rem_pio2+0x314>)
 8006a0e:	ec51 0b10 	vmov	r0, r1, d0
 8006a12:	2200      	movs	r2, #0
 8006a14:	f7f9 fc3c 	bl	8000290 <__aeabi_dmul>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f7f9 fd64 	bl	80004ec <__aeabi_dsub>
 8006a24:	460f      	mov	r7, r1
 8006a26:	4606      	mov	r6, r0
 8006a28:	f7f9 ffa0 	bl	800096c <__aeabi_d2iz>
 8006a2c:	9002      	str	r0, [sp, #8]
 8006a2e:	f7f9 feab 	bl	8000788 <__aeabi_i2d>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7f9 fd57 	bl	80004ec <__aeabi_dsub>
 8006a3e:	f1bb 0f00 	cmp.w	fp, #0
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	dd6c      	ble.n	8006b22 <__kernel_rem_pio2+0x252>
 8006a48:	f108 31ff 	add.w	r1, r8, #4294967295
 8006a4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a4e:	9d02      	ldr	r5, [sp, #8]
 8006a50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a54:	f1cb 0018 	rsb	r0, fp, #24
 8006a58:	fa43 f200 	asr.w	r2, r3, r0
 8006a5c:	4415      	add	r5, r2
 8006a5e:	4082      	lsls	r2, r0
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	aa0c      	add	r2, sp, #48	@ 0x30
 8006a64:	9502      	str	r5, [sp, #8]
 8006a66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006a6a:	f1cb 0217 	rsb	r2, fp, #23
 8006a6e:	fa43 f902 	asr.w	r9, r3, r2
 8006a72:	f1b9 0f00 	cmp.w	r9, #0
 8006a76:	dd64      	ble.n	8006b42 <__kernel_rem_pio2+0x272>
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	4615      	mov	r5, r2
 8006a82:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006a86:	4590      	cmp	r8, r2
 8006a88:	f300 80b8 	bgt.w	8006bfc <__kernel_rem_pio2+0x32c>
 8006a8c:	f1bb 0f00 	cmp.w	fp, #0
 8006a90:	dd07      	ble.n	8006aa2 <__kernel_rem_pio2+0x1d2>
 8006a92:	f1bb 0f01 	cmp.w	fp, #1
 8006a96:	f000 80bf 	beq.w	8006c18 <__kernel_rem_pio2+0x348>
 8006a9a:	f1bb 0f02 	cmp.w	fp, #2
 8006a9e:	f000 80c6 	beq.w	8006c2e <__kernel_rem_pio2+0x35e>
 8006aa2:	f1b9 0f02 	cmp.w	r9, #2
 8006aa6:	d14c      	bne.n	8006b42 <__kernel_rem_pio2+0x272>
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	463b      	mov	r3, r7
 8006aac:	494e      	ldr	r1, [pc, #312]	@ (8006be8 <__kernel_rem_pio2+0x318>)
 8006aae:	2000      	movs	r0, #0
 8006ab0:	f7f9 fd1c 	bl	80004ec <__aeabi_dsub>
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	d042      	beq.n	8006b42 <__kernel_rem_pio2+0x272>
 8006abc:	4658      	mov	r0, fp
 8006abe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006bd8 <__kernel_rem_pio2+0x308>
 8006ac2:	f000 fa5d 	bl	8006f80 <scalbn>
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	ec53 2b10 	vmov	r2, r3, d0
 8006ace:	f7f9 fd0d 	bl	80004ec <__aeabi_dsub>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	460f      	mov	r7, r1
 8006ad6:	e034      	b.n	8006b42 <__kernel_rem_pio2+0x272>
 8006ad8:	4b44      	ldr	r3, [pc, #272]	@ (8006bec <__kernel_rem_pio2+0x31c>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae0:	f7f9 fbd6 	bl	8000290 <__aeabi_dmul>
 8006ae4:	f7f9 ff42 	bl	800096c <__aeabi_d2iz>
 8006ae8:	f7f9 fe4e 	bl	8000788 <__aeabi_i2d>
 8006aec:	4b40      	ldr	r3, [pc, #256]	@ (8006bf0 <__kernel_rem_pio2+0x320>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	4606      	mov	r6, r0
 8006af2:	460f      	mov	r7, r1
 8006af4:	f7f9 fbcc 	bl	8000290 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b00:	f7f9 fcf4 	bl	80004ec <__aeabi_dsub>
 8006b04:	f7f9 ff32 	bl	800096c <__aeabi_d2iz>
 8006b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b0c:	f849 0b04 	str.w	r0, [r9], #4
 8006b10:	4639      	mov	r1, r7
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7f9 fcec 	bl	80004f0 <__adddf3>
 8006b18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b20:	e75d      	b.n	80069de <__kernel_rem_pio2+0x10e>
 8006b22:	d107      	bne.n	8006b34 <__kernel_rem_pio2+0x264>
 8006b24:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b28:	aa0c      	add	r2, sp, #48	@ 0x30
 8006b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b2e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006b32:	e79e      	b.n	8006a72 <__kernel_rem_pio2+0x1a2>
 8006b34:	4b2f      	ldr	r3, [pc, #188]	@ (8006bf4 <__kernel_rem_pio2+0x324>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	f7f9 ff04 	bl	8000944 <__aeabi_dcmpge>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d143      	bne.n	8006bc8 <__kernel_rem_pio2+0x2f8>
 8006b40:	4681      	mov	r9, r0
 8006b42:	2200      	movs	r2, #0
 8006b44:	2300      	movs	r3, #0
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 fedd 	bl	8000908 <__aeabi_dcmpeq>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f000 80bf 	beq.w	8006cd2 <__kernel_rem_pio2+0x402>
 8006b54:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b58:	2200      	movs	r2, #0
 8006b5a:	9900      	ldr	r1, [sp, #0]
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	da6e      	bge.n	8006c3e <__kernel_rem_pio2+0x36e>
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	f000 8089 	beq.w	8006c78 <__kernel_rem_pio2+0x3a8>
 8006b66:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b6c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006b70:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0f6      	beq.n	8006b66 <__kernel_rem_pio2+0x296>
 8006b78:	4658      	mov	r0, fp
 8006b7a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006bd8 <__kernel_rem_pio2+0x308>
 8006b7e:	f000 f9ff 	bl	8006f80 <scalbn>
 8006b82:	f108 0301 	add.w	r3, r8, #1
 8006b86:	00da      	lsls	r2, r3, #3
 8006b88:	9205      	str	r2, [sp, #20]
 8006b8a:	ec55 4b10 	vmov	r4, r5, d0
 8006b8e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006b90:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006bec <__kernel_rem_pio2+0x31c>
 8006b94:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006b98:	4646      	mov	r6, r8
 8006b9a:	f04f 0a00 	mov.w	sl, #0
 8006b9e:	2e00      	cmp	r6, #0
 8006ba0:	f280 80cf 	bge.w	8006d42 <__kernel_rem_pio2+0x472>
 8006ba4:	4644      	mov	r4, r8
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	f2c0 80fd 	blt.w	8006da6 <__kernel_rem_pio2+0x4d6>
 8006bac:	4b12      	ldr	r3, [pc, #72]	@ (8006bf8 <__kernel_rem_pio2+0x328>)
 8006bae:	461f      	mov	r7, r3
 8006bb0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006bb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bb6:	9306      	str	r3, [sp, #24]
 8006bb8:	f04f 0a00 	mov.w	sl, #0
 8006bbc:	f04f 0b00 	mov.w	fp, #0
 8006bc0:	2600      	movs	r6, #0
 8006bc2:	eba8 0504 	sub.w	r5, r8, r4
 8006bc6:	e0e2      	b.n	8006d8e <__kernel_rem_pio2+0x4be>
 8006bc8:	f04f 0902 	mov.w	r9, #2
 8006bcc:	e754      	b.n	8006a78 <__kernel_rem_pio2+0x1a8>
 8006bce:	bf00      	nop
	...
 8006bdc:	3ff00000 	.word	0x3ff00000
 8006be0:	08007460 	.word	0x08007460
 8006be4:	40200000 	.word	0x40200000
 8006be8:	3ff00000 	.word	0x3ff00000
 8006bec:	3e700000 	.word	0x3e700000
 8006bf0:	41700000 	.word	0x41700000
 8006bf4:	3fe00000 	.word	0x3fe00000
 8006bf8:	08007420 	.word	0x08007420
 8006bfc:	f854 3b04 	ldr.w	r3, [r4], #4
 8006c00:	b945      	cbnz	r5, 8006c14 <__kernel_rem_pio2+0x344>
 8006c02:	b123      	cbz	r3, 8006c0e <__kernel_rem_pio2+0x33e>
 8006c04:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006c08:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	3201      	adds	r2, #1
 8006c10:	461d      	mov	r5, r3
 8006c12:	e738      	b.n	8006a86 <__kernel_rem_pio2+0x1b6>
 8006c14:	1acb      	subs	r3, r1, r3
 8006c16:	e7f7      	b.n	8006c08 <__kernel_rem_pio2+0x338>
 8006c18:	f108 32ff 	add.w	r2, r8, #4294967295
 8006c1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c26:	a90c      	add	r1, sp, #48	@ 0x30
 8006c28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006c2c:	e739      	b.n	8006aa2 <__kernel_rem_pio2+0x1d2>
 8006c2e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006c32:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006c3c:	e7f3      	b.n	8006c26 <__kernel_rem_pio2+0x356>
 8006c3e:	a90c      	add	r1, sp, #48	@ 0x30
 8006c40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	430a      	orrs	r2, r1
 8006c48:	e787      	b.n	8006b5a <__kernel_rem_pio2+0x28a>
 8006c4a:	3401      	adds	r4, #1
 8006c4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c50:	2a00      	cmp	r2, #0
 8006c52:	d0fa      	beq.n	8006c4a <__kernel_rem_pio2+0x37a>
 8006c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c5a:	eb0d 0503 	add.w	r5, sp, r3
 8006c5e:	9b06      	ldr	r3, [sp, #24]
 8006c60:	aa20      	add	r2, sp, #128	@ 0x80
 8006c62:	4443      	add	r3, r8
 8006c64:	f108 0701 	add.w	r7, r8, #1
 8006c68:	3d98      	subs	r5, #152	@ 0x98
 8006c6a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006c6e:	4444      	add	r4, r8
 8006c70:	42bc      	cmp	r4, r7
 8006c72:	da04      	bge.n	8006c7e <__kernel_rem_pio2+0x3ae>
 8006c74:	46a0      	mov	r8, r4
 8006c76:	e6a2      	b.n	80069be <__kernel_rem_pio2+0xee>
 8006c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c7a:	2401      	movs	r4, #1
 8006c7c:	e7e6      	b.n	8006c4c <__kernel_rem_pio2+0x37c>
 8006c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c80:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006c84:	f7f9 fd80 	bl	8000788 <__aeabi_i2d>
 8006c88:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006f50 <__kernel_rem_pio2+0x680>
 8006c8c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c98:	46b2      	mov	sl, r6
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	9b05      	ldr	r3, [sp, #20]
 8006ca0:	4598      	cmp	r8, r3
 8006ca2:	dd05      	ble.n	8006cb0 <__kernel_rem_pio2+0x3e0>
 8006ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ca8:	3701      	adds	r7, #1
 8006caa:	eca5 7b02 	vstmia	r5!, {d7}
 8006cae:	e7df      	b.n	8006c70 <__kernel_rem_pio2+0x3a0>
 8006cb0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006cb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006cb8:	f7f9 faea 	bl	8000290 <__aeabi_dmul>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc4:	f7f9 fc14 	bl	80004f0 <__adddf3>
 8006cc8:	f108 0801 	add.w	r8, r8, #1
 8006ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd0:	e7e5      	b.n	8006c9e <__kernel_rem_pio2+0x3ce>
 8006cd2:	f1cb 0000 	rsb	r0, fp, #0
 8006cd6:	ec47 6b10 	vmov	d0, r6, r7
 8006cda:	f000 f951 	bl	8006f80 <scalbn>
 8006cde:	ec55 4b10 	vmov	r4, r5, d0
 8006ce2:	4b9d      	ldr	r3, [pc, #628]	@ (8006f58 <__kernel_rem_pio2+0x688>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f7f9 fe2b 	bl	8000944 <__aeabi_dcmpge>
 8006cee:	b300      	cbz	r0, 8006d32 <__kernel_rem_pio2+0x462>
 8006cf0:	4b9a      	ldr	r3, [pc, #616]	@ (8006f5c <__kernel_rem_pio2+0x68c>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 faca 	bl	8000290 <__aeabi_dmul>
 8006cfc:	f7f9 fe36 	bl	800096c <__aeabi_d2iz>
 8006d00:	4606      	mov	r6, r0
 8006d02:	f7f9 fd41 	bl	8000788 <__aeabi_i2d>
 8006d06:	4b94      	ldr	r3, [pc, #592]	@ (8006f58 <__kernel_rem_pio2+0x688>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f7f9 fac1 	bl	8000290 <__aeabi_dmul>
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4602      	mov	r2, r0
 8006d12:	4629      	mov	r1, r5
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7f9 fbe9 	bl	80004ec <__aeabi_dsub>
 8006d1a:	f7f9 fe27 	bl	800096c <__aeabi_d2iz>
 8006d1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d20:	f10b 0b18 	add.w	fp, fp, #24
 8006d24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006d28:	f108 0801 	add.w	r8, r8, #1
 8006d2c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006d30:	e722      	b.n	8006b78 <__kernel_rem_pio2+0x2a8>
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fe19 	bl	800096c <__aeabi_d2iz>
 8006d3a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006d40:	e71a      	b.n	8006b78 <__kernel_rem_pio2+0x2a8>
 8006d42:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d48:	f7f9 fd1e 	bl	8000788 <__aeabi_i2d>
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	462b      	mov	r3, r5
 8006d50:	f7f9 fa9e 	bl	8000290 <__aeabi_dmul>
 8006d54:	4652      	mov	r2, sl
 8006d56:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006d5a:	465b      	mov	r3, fp
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7f9 fa96 	bl	8000290 <__aeabi_dmul>
 8006d64:	3e01      	subs	r6, #1
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
 8006d6a:	e718      	b.n	8006b9e <__kernel_rem_pio2+0x2ce>
 8006d6c:	9906      	ldr	r1, [sp, #24]
 8006d6e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006d72:	9106      	str	r1, [sp, #24]
 8006d74:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006d78:	f7f9 fa8a 	bl	8000290 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4650      	mov	r0, sl
 8006d82:	4659      	mov	r1, fp
 8006d84:	f7f9 fbb4 	bl	80004f0 <__adddf3>
 8006d88:	3601      	adds	r6, #1
 8006d8a:	4682      	mov	sl, r0
 8006d8c:	468b      	mov	fp, r1
 8006d8e:	9b00      	ldr	r3, [sp, #0]
 8006d90:	429e      	cmp	r6, r3
 8006d92:	dc01      	bgt.n	8006d98 <__kernel_rem_pio2+0x4c8>
 8006d94:	42b5      	cmp	r5, r6
 8006d96:	dae9      	bge.n	8006d6c <__kernel_rem_pio2+0x49c>
 8006d98:	ab48      	add	r3, sp, #288	@ 0x120
 8006d9a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d9e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006da2:	3c01      	subs	r4, #1
 8006da4:	e6ff      	b.n	8006ba6 <__kernel_rem_pio2+0x2d6>
 8006da6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	dc0b      	bgt.n	8006dc4 <__kernel_rem_pio2+0x4f4>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dc39      	bgt.n	8006e24 <__kernel_rem_pio2+0x554>
 8006db0:	d05d      	beq.n	8006e6e <__kernel_rem_pio2+0x59e>
 8006db2:	9b02      	ldr	r3, [sp, #8]
 8006db4:	f003 0007 	and.w	r0, r3, #7
 8006db8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006dbc:	ecbd 8b02 	vpop	{d8}
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d1f3      	bne.n	8006db2 <__kernel_rem_pio2+0x4e2>
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006dd0:	eb0d 0403 	add.w	r4, sp, r3
 8006dd4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006dd8:	4625      	mov	r5, r4
 8006dda:	46c2      	mov	sl, r8
 8006ddc:	f1ba 0f00 	cmp.w	sl, #0
 8006de0:	f1a5 0508 	sub.w	r5, r5, #8
 8006de4:	dc6b      	bgt.n	8006ebe <__kernel_rem_pio2+0x5ee>
 8006de6:	4645      	mov	r5, r8
 8006de8:	2d01      	cmp	r5, #1
 8006dea:	f1a4 0408 	sub.w	r4, r4, #8
 8006dee:	f300 8087 	bgt.w	8006f00 <__kernel_rem_pio2+0x630>
 8006df2:	9c05      	ldr	r4, [sp, #20]
 8006df4:	ab48      	add	r3, sp, #288	@ 0x120
 8006df6:	441c      	add	r4, r3
 8006df8:	2000      	movs	r0, #0
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	f1b8 0f01 	cmp.w	r8, #1
 8006e00:	f300 809c 	bgt.w	8006f3c <__kernel_rem_pio2+0x66c>
 8006e04:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006e08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006e0c:	f1b9 0f00 	cmp.w	r9, #0
 8006e10:	f040 80a6 	bne.w	8006f60 <__kernel_rem_pio2+0x690>
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	e9c3 7800 	strd	r7, r8, [r3]
 8006e1a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006e1e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006e22:	e7c6      	b.n	8006db2 <__kernel_rem_pio2+0x4e2>
 8006e24:	9d05      	ldr	r5, [sp, #20]
 8006e26:	ab48      	add	r3, sp, #288	@ 0x120
 8006e28:	441d      	add	r5, r3
 8006e2a:	4644      	mov	r4, r8
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	2c00      	cmp	r4, #0
 8006e32:	da35      	bge.n	8006ea0 <__kernel_rem_pio2+0x5d0>
 8006e34:	f1b9 0f00 	cmp.w	r9, #0
 8006e38:	d038      	beq.n	8006eac <__kernel_rem_pio2+0x5dc>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e40:	9c04      	ldr	r4, [sp, #16]
 8006e42:	e9c4 2300 	strd	r2, r3, [r4]
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006e4e:	f7f9 fb4d 	bl	80004ec <__aeabi_dsub>
 8006e52:	ad4a      	add	r5, sp, #296	@ 0x128
 8006e54:	2401      	movs	r4, #1
 8006e56:	45a0      	cmp	r8, r4
 8006e58:	da2b      	bge.n	8006eb2 <__kernel_rem_pio2+0x5e2>
 8006e5a:	f1b9 0f00 	cmp.w	r9, #0
 8006e5e:	d002      	beq.n	8006e66 <__kernel_rem_pio2+0x596>
 8006e60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e64:	4619      	mov	r1, r3
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e6c:	e7a1      	b.n	8006db2 <__kernel_rem_pio2+0x4e2>
 8006e6e:	9c05      	ldr	r4, [sp, #20]
 8006e70:	ab48      	add	r3, sp, #288	@ 0x120
 8006e72:	441c      	add	r4, r3
 8006e74:	2000      	movs	r0, #0
 8006e76:	2100      	movs	r1, #0
 8006e78:	f1b8 0f00 	cmp.w	r8, #0
 8006e7c:	da09      	bge.n	8006e92 <__kernel_rem_pio2+0x5c2>
 8006e7e:	f1b9 0f00 	cmp.w	r9, #0
 8006e82:	d002      	beq.n	8006e8a <__kernel_rem_pio2+0x5ba>
 8006e84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e88:	4619      	mov	r1, r3
 8006e8a:	9b04      	ldr	r3, [sp, #16]
 8006e8c:	e9c3 0100 	strd	r0, r1, [r3]
 8006e90:	e78f      	b.n	8006db2 <__kernel_rem_pio2+0x4e2>
 8006e92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e96:	f7f9 fb2b 	bl	80004f0 <__adddf3>
 8006e9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e9e:	e7eb      	b.n	8006e78 <__kernel_rem_pio2+0x5a8>
 8006ea0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006ea4:	f7f9 fb24 	bl	80004f0 <__adddf3>
 8006ea8:	3c01      	subs	r4, #1
 8006eaa:	e7c1      	b.n	8006e30 <__kernel_rem_pio2+0x560>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	e7c6      	b.n	8006e40 <__kernel_rem_pio2+0x570>
 8006eb2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006eb6:	f7f9 fb1b 	bl	80004f0 <__adddf3>
 8006eba:	3401      	adds	r4, #1
 8006ebc:	e7cb      	b.n	8006e56 <__kernel_rem_pio2+0x586>
 8006ebe:	ed95 7b00 	vldr	d7, [r5]
 8006ec2:	ed8d 7b00 	vstr	d7, [sp]
 8006ec6:	ed95 7b02 	vldr	d7, [r5, #8]
 8006eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ece:	ec53 2b17 	vmov	r2, r3, d7
 8006ed2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ed6:	f7f9 fb0b 	bl	80004f0 <__adddf3>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4606      	mov	r6, r0
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee6:	f7f9 fb01 	bl	80004ec <__aeabi_dsub>
 8006eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eee:	f7f9 faff 	bl	80004f0 <__adddf3>
 8006ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ef6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006efa:	e9c5 6700 	strd	r6, r7, [r5]
 8006efe:	e76d      	b.n	8006ddc <__kernel_rem_pio2+0x50c>
 8006f00:	ed94 7b00 	vldr	d7, [r4]
 8006f04:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006f08:	ec51 0b17 	vmov	r0, r1, d7
 8006f0c:	4652      	mov	r2, sl
 8006f0e:	465b      	mov	r3, fp
 8006f10:	ed8d 7b00 	vstr	d7, [sp]
 8006f14:	f7f9 faec 	bl	80004f0 <__adddf3>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	460f      	mov	r7, r1
 8006f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f24:	f7f9 fae2 	bl	80004ec <__aeabi_dsub>
 8006f28:	4652      	mov	r2, sl
 8006f2a:	465b      	mov	r3, fp
 8006f2c:	f7f9 fae0 	bl	80004f0 <__adddf3>
 8006f30:	3d01      	subs	r5, #1
 8006f32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f36:	e9c4 6700 	strd	r6, r7, [r4]
 8006f3a:	e755      	b.n	8006de8 <__kernel_rem_pio2+0x518>
 8006f3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f40:	f7f9 fad6 	bl	80004f0 <__adddf3>
 8006f44:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f48:	e758      	b.n	8006dfc <__kernel_rem_pio2+0x52c>
 8006f4a:	bf00      	nop
 8006f4c:	f3af 8000 	nop.w
	...
 8006f58:	41700000 	.word	0x41700000
 8006f5c:	3e700000 	.word	0x3e700000
 8006f60:	9b04      	ldr	r3, [sp, #16]
 8006f62:	9a04      	ldr	r2, [sp, #16]
 8006f64:	601f      	str	r7, [r3, #0]
 8006f66:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006f6a:	605c      	str	r4, [r3, #4]
 8006f6c:	609d      	str	r5, [r3, #8]
 8006f6e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f72:	60d3      	str	r3, [r2, #12]
 8006f74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f78:	6110      	str	r0, [r2, #16]
 8006f7a:	6153      	str	r3, [r2, #20]
 8006f7c:	e719      	b.n	8006db2 <__kernel_rem_pio2+0x4e2>
 8006f7e:	bf00      	nop

08006f80 <scalbn>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	ec55 4b10 	vmov	r4, r5, d0
 8006f86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	b991      	cbnz	r1, 8006fb6 <scalbn+0x36>
 8006f90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006f94:	4323      	orrs	r3, r4
 8006f96:	d03d      	beq.n	8007014 <scalbn+0x94>
 8006f98:	4b35      	ldr	r3, [pc, #212]	@ (8007070 <scalbn+0xf0>)
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f7f9 f976 	bl	8000290 <__aeabi_dmul>
 8006fa4:	4b33      	ldr	r3, [pc, #204]	@ (8007074 <scalbn+0xf4>)
 8006fa6:	429e      	cmp	r6, r3
 8006fa8:	4604      	mov	r4, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	da0f      	bge.n	8006fce <scalbn+0x4e>
 8006fae:	a328      	add	r3, pc, #160	@ (adr r3, 8007050 <scalbn+0xd0>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	e01e      	b.n	8006ff4 <scalbn+0x74>
 8006fb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	d10b      	bne.n	8006fd6 <scalbn+0x56>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	f7f9 fa94 	bl	80004f0 <__adddf3>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
 8006fcc:	e022      	b.n	8007014 <scalbn+0x94>
 8006fce:	460b      	mov	r3, r1
 8006fd0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006fd4:	3936      	subs	r1, #54	@ 0x36
 8006fd6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006fda:	4296      	cmp	r6, r2
 8006fdc:	dd0d      	ble.n	8006ffa <scalbn+0x7a>
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007058 <scalbn+0xd8>)
 8006fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe6:	da02      	bge.n	8006fee <scalbn+0x6e>
 8006fe8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007060 <scalbn+0xe0>)
 8006fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fee:	a31a      	add	r3, pc, #104	@ (adr r3, 8007058 <scalbn+0xd8>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f7f9 f94c 	bl	8000290 <__aeabi_dmul>
 8006ff8:	e7e6      	b.n	8006fc8 <scalbn+0x48>
 8006ffa:	1872      	adds	r2, r6, r1
 8006ffc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007000:	428a      	cmp	r2, r1
 8007002:	dcec      	bgt.n	8006fde <scalbn+0x5e>
 8007004:	2a00      	cmp	r2, #0
 8007006:	dd08      	ble.n	800701a <scalbn+0x9a>
 8007008:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800700c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007010:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007014:	ec45 4b10 	vmov	d0, r4, r5
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800701e:	da08      	bge.n	8007032 <scalbn+0xb2>
 8007020:	2d00      	cmp	r5, #0
 8007022:	a10b      	add	r1, pc, #44	@ (adr r1, 8007050 <scalbn+0xd0>)
 8007024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007028:	dac1      	bge.n	8006fae <scalbn+0x2e>
 800702a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007068 <scalbn+0xe8>)
 800702c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007030:	e7bd      	b.n	8006fae <scalbn+0x2e>
 8007032:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007036:	3236      	adds	r2, #54	@ 0x36
 8007038:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800703c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007040:	4620      	mov	r0, r4
 8007042:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <scalbn+0xf8>)
 8007044:	4629      	mov	r1, r5
 8007046:	2200      	movs	r2, #0
 8007048:	e7d4      	b.n	8006ff4 <scalbn+0x74>
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w
 8007050:	c2f8f359 	.word	0xc2f8f359
 8007054:	01a56e1f 	.word	0x01a56e1f
 8007058:	8800759c 	.word	0x8800759c
 800705c:	7e37e43c 	.word	0x7e37e43c
 8007060:	8800759c 	.word	0x8800759c
 8007064:	fe37e43c 	.word	0xfe37e43c
 8007068:	c2f8f359 	.word	0xc2f8f359
 800706c:	81a56e1f 	.word	0x81a56e1f
 8007070:	43500000 	.word	0x43500000
 8007074:	ffff3cb0 	.word	0xffff3cb0
 8007078:	3c900000 	.word	0x3c900000
 800707c:	00000000 	.word	0x00000000

08007080 <floor>:
 8007080:	ec51 0b10 	vmov	r0, r1, d0
 8007084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007090:	2e13      	cmp	r6, #19
 8007092:	460c      	mov	r4, r1
 8007094:	4605      	mov	r5, r0
 8007096:	4680      	mov	r8, r0
 8007098:	dc34      	bgt.n	8007104 <floor+0x84>
 800709a:	2e00      	cmp	r6, #0
 800709c:	da17      	bge.n	80070ce <floor+0x4e>
 800709e:	a332      	add	r3, pc, #200	@ (adr r3, 8007168 <floor+0xe8>)
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f7f9 fa24 	bl	80004f0 <__adddf3>
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	f7f9 fc54 	bl	8000958 <__aeabi_dcmpgt>
 80070b0:	b150      	cbz	r0, 80070c8 <floor+0x48>
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	da55      	bge.n	8007162 <floor+0xe2>
 80070b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80070ba:	432c      	orrs	r4, r5
 80070bc:	2500      	movs	r5, #0
 80070be:	42ac      	cmp	r4, r5
 80070c0:	4c2b      	ldr	r4, [pc, #172]	@ (8007170 <floor+0xf0>)
 80070c2:	bf08      	it	eq
 80070c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80070c8:	4621      	mov	r1, r4
 80070ca:	4628      	mov	r0, r5
 80070cc:	e023      	b.n	8007116 <floor+0x96>
 80070ce:	4f29      	ldr	r7, [pc, #164]	@ (8007174 <floor+0xf4>)
 80070d0:	4137      	asrs	r7, r6
 80070d2:	ea01 0307 	and.w	r3, r1, r7
 80070d6:	4303      	orrs	r3, r0
 80070d8:	d01d      	beq.n	8007116 <floor+0x96>
 80070da:	a323      	add	r3, pc, #140	@ (adr r3, 8007168 <floor+0xe8>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 fa06 	bl	80004f0 <__adddf3>
 80070e4:	2200      	movs	r2, #0
 80070e6:	2300      	movs	r3, #0
 80070e8:	f7f9 fc36 	bl	8000958 <__aeabi_dcmpgt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d0eb      	beq.n	80070c8 <floor+0x48>
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	bfbe      	ittt	lt
 80070f4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80070f8:	4133      	asrlt	r3, r6
 80070fa:	18e4      	addlt	r4, r4, r3
 80070fc:	ea24 0407 	bic.w	r4, r4, r7
 8007100:	2500      	movs	r5, #0
 8007102:	e7e1      	b.n	80070c8 <floor+0x48>
 8007104:	2e33      	cmp	r6, #51	@ 0x33
 8007106:	dd0a      	ble.n	800711e <floor+0x9e>
 8007108:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800710c:	d103      	bne.n	8007116 <floor+0x96>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	f7f9 f9ed 	bl	80004f0 <__adddf3>
 8007116:	ec41 0b10 	vmov	d0, r0, r1
 800711a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800711e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007122:	f04f 37ff 	mov.w	r7, #4294967295
 8007126:	40df      	lsrs	r7, r3
 8007128:	4207      	tst	r7, r0
 800712a:	d0f4      	beq.n	8007116 <floor+0x96>
 800712c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007168 <floor+0xe8>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f9dd 	bl	80004f0 <__adddf3>
 8007136:	2200      	movs	r2, #0
 8007138:	2300      	movs	r3, #0
 800713a:	f7f9 fc0d 	bl	8000958 <__aeabi_dcmpgt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d0c2      	beq.n	80070c8 <floor+0x48>
 8007142:	2c00      	cmp	r4, #0
 8007144:	da0a      	bge.n	800715c <floor+0xdc>
 8007146:	2e14      	cmp	r6, #20
 8007148:	d101      	bne.n	800714e <floor+0xce>
 800714a:	3401      	adds	r4, #1
 800714c:	e006      	b.n	800715c <floor+0xdc>
 800714e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007152:	2301      	movs	r3, #1
 8007154:	40b3      	lsls	r3, r6
 8007156:	441d      	add	r5, r3
 8007158:	4545      	cmp	r5, r8
 800715a:	d3f6      	bcc.n	800714a <floor+0xca>
 800715c:	ea25 0507 	bic.w	r5, r5, r7
 8007160:	e7b2      	b.n	80070c8 <floor+0x48>
 8007162:	2500      	movs	r5, #0
 8007164:	462c      	mov	r4, r5
 8007166:	e7af      	b.n	80070c8 <floor+0x48>
 8007168:	8800759c 	.word	0x8800759c
 800716c:	7e37e43c 	.word	0x7e37e43c
 8007170:	bff00000 	.word	0xbff00000
 8007174:	000fffff 	.word	0x000fffff

08007178 <_init>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr

08007184 <_fini>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr
