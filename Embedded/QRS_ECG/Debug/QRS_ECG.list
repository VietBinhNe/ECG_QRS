
QRS_ECG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005070  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005208  08005208  00006208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005244  08005244  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005244  08005244  00006244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800524c  0800524c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005250  08005250  00006250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005254  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f28  2000000c  08005260  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f34  08005260  00007f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f202  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237a  00000000  00000000  0001623e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000185b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b15  00000000  00000000  000193d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184ce  00000000  00000000  00019eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dd4  00000000  00000000  000323bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a2ea  00000000  00000000  0004418f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  000de4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e20ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080051f0 	.word	0x080051f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080051f0 	.word	0x080051f0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	@ 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2iz>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007bc:	d215      	bcs.n	80007ea <__aeabi_d2iz+0x36>
 80007be:	d511      	bpl.n	80007e4 <__aeabi_d2iz+0x30>
 80007c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d912      	bls.n	80007f0 <__aeabi_d2iz+0x3c>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007da:	fa23 f002 	lsr.w	r0, r3, r2
 80007de:	bf18      	it	ne
 80007e0:	4240      	negne	r0, r0
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ee:	d105      	bne.n	80007fc <__aeabi_d2iz+0x48>
 80007f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007f4:	bf08      	it	eq
 80007f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b96a 	b.w	8000b30 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	460c      	mov	r4, r1
 800087c:	2b00      	cmp	r3, #0
 800087e:	d14e      	bne.n	800091e <__udivmoddi4+0xaa>
 8000880:	4694      	mov	ip, r2
 8000882:	458c      	cmp	ip, r1
 8000884:	4686      	mov	lr, r0
 8000886:	fab2 f282 	clz	r2, r2
 800088a:	d962      	bls.n	8000952 <__udivmoddi4+0xde>
 800088c:	b14a      	cbz	r2, 80008a2 <__udivmoddi4+0x2e>
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	4091      	lsls	r1, r2
 8000894:	fa20 f303 	lsr.w	r3, r0, r3
 8000898:	fa0c fc02 	lsl.w	ip, ip, r2
 800089c:	4319      	orrs	r1, r3
 800089e:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f f68c 	uxth.w	r6, ip
 80008aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb07 1114 	mls	r1, r7, r4, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb04 f106 	mul.w	r1, r4, r6
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ca:	f080 8112 	bcs.w	8000af2 <__udivmoddi4+0x27e>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 810f 	bls.w	8000af2 <__udivmoddi4+0x27e>
 80008d4:	3c02      	subs	r4, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a59      	subs	r1, r3, r1
 80008da:	fa1f f38e 	uxth.w	r3, lr
 80008de:	fbb1 f0f7 	udiv	r0, r1, r7
 80008e2:	fb07 1110 	mls	r1, r7, r0, r1
 80008e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ea:	fb00 f606 	mul.w	r6, r0, r6
 80008ee:	429e      	cmp	r6, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x94>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008fa:	f080 80fc 	bcs.w	8000af6 <__udivmoddi4+0x282>
 80008fe:	429e      	cmp	r6, r3
 8000900:	f240 80f9 	bls.w	8000af6 <__udivmoddi4+0x282>
 8000904:	4463      	add	r3, ip
 8000906:	3802      	subs	r0, #2
 8000908:	1b9b      	subs	r3, r3, r6
 800090a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800090e:	2100      	movs	r1, #0
 8000910:	b11d      	cbz	r5, 800091a <__udivmoddi4+0xa6>
 8000912:	40d3      	lsrs	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	e9c5 3200 	strd	r3, r2, [r5]
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d905      	bls.n	800092e <__udivmoddi4+0xba>
 8000922:	b10d      	cbz	r5, 8000928 <__udivmoddi4+0xb4>
 8000924:	e9c5 0100 	strd	r0, r1, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	4608      	mov	r0, r1
 800092c:	e7f5      	b.n	800091a <__udivmoddi4+0xa6>
 800092e:	fab3 f183 	clz	r1, r3
 8000932:	2900      	cmp	r1, #0
 8000934:	d146      	bne.n	80009c4 <__udivmoddi4+0x150>
 8000936:	42a3      	cmp	r3, r4
 8000938:	d302      	bcc.n	8000940 <__udivmoddi4+0xcc>
 800093a:	4290      	cmp	r0, r2
 800093c:	f0c0 80f0 	bcc.w	8000b20 <__udivmoddi4+0x2ac>
 8000940:	1a86      	subs	r6, r0, r2
 8000942:	eb64 0303 	sbc.w	r3, r4, r3
 8000946:	2001      	movs	r0, #1
 8000948:	2d00      	cmp	r5, #0
 800094a:	d0e6      	beq.n	800091a <__udivmoddi4+0xa6>
 800094c:	e9c5 6300 	strd	r6, r3, [r5]
 8000950:	e7e3      	b.n	800091a <__udivmoddi4+0xa6>
 8000952:	2a00      	cmp	r2, #0
 8000954:	f040 8090 	bne.w	8000a78 <__udivmoddi4+0x204>
 8000958:	eba1 040c 	sub.w	r4, r1, ip
 800095c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000960:	fa1f f78c 	uxth.w	r7, ip
 8000964:	2101      	movs	r1, #1
 8000966:	fbb4 f6f8 	udiv	r6, r4, r8
 800096a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800096e:	fb08 4416 	mls	r4, r8, r6, r4
 8000972:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000976:	fb07 f006 	mul.w	r0, r7, r6
 800097a:	4298      	cmp	r0, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x11c>
 800097e:	eb1c 0303 	adds.w	r3, ip, r3
 8000982:	f106 34ff 	add.w	r4, r6, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x11a>
 8000988:	4298      	cmp	r0, r3
 800098a:	f200 80cd 	bhi.w	8000b28 <__udivmoddi4+0x2b4>
 800098e:	4626      	mov	r6, r4
 8000990:	1a1c      	subs	r4, r3, r0
 8000992:	fa1f f38e 	uxth.w	r3, lr
 8000996:	fbb4 f0f8 	udiv	r0, r4, r8
 800099a:	fb08 4410 	mls	r4, r8, r0, r4
 800099e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a2:	fb00 f707 	mul.w	r7, r0, r7
 80009a6:	429f      	cmp	r7, r3
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x148>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b2:	d202      	bcs.n	80009ba <__udivmoddi4+0x146>
 80009b4:	429f      	cmp	r7, r3
 80009b6:	f200 80b0 	bhi.w	8000b1a <__udivmoddi4+0x2a6>
 80009ba:	4620      	mov	r0, r4
 80009bc:	1bdb      	subs	r3, r3, r7
 80009be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c2:	e7a5      	b.n	8000910 <__udivmoddi4+0x9c>
 80009c4:	f1c1 0620 	rsb	r6, r1, #32
 80009c8:	408b      	lsls	r3, r1
 80009ca:	fa22 f706 	lsr.w	r7, r2, r6
 80009ce:	431f      	orrs	r7, r3
 80009d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009d4:	fa04 f301 	lsl.w	r3, r4, r1
 80009d8:	ea43 030c 	orr.w	r3, r3, ip
 80009dc:	40f4      	lsrs	r4, r6
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	0c38      	lsrs	r0, r7, #16
 80009e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009e8:	fbb4 fef0 	udiv	lr, r4, r0
 80009ec:	fa1f fc87 	uxth.w	ip, r7
 80009f0:	fb00 441e 	mls	r4, r0, lr, r4
 80009f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009f8:	fb0e f90c 	mul.w	r9, lr, ip
 80009fc:	45a1      	cmp	r9, r4
 80009fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000a02:	d90a      	bls.n	8000a1a <__udivmoddi4+0x1a6>
 8000a04:	193c      	adds	r4, r7, r4
 8000a06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a0a:	f080 8084 	bcs.w	8000b16 <__udivmoddi4+0x2a2>
 8000a0e:	45a1      	cmp	r9, r4
 8000a10:	f240 8081 	bls.w	8000b16 <__udivmoddi4+0x2a2>
 8000a14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a18:	443c      	add	r4, r7
 8000a1a:	eba4 0409 	sub.w	r4, r4, r9
 8000a1e:	fa1f f983 	uxth.w	r9, r3
 8000a22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a26:	fb00 4413 	mls	r4, r0, r3, r4
 8000a2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d907      	bls.n	8000a46 <__udivmoddi4+0x1d2>
 8000a36:	193c      	adds	r4, r7, r4
 8000a38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a3c:	d267      	bcs.n	8000b0e <__udivmoddi4+0x29a>
 8000a3e:	45a4      	cmp	ip, r4
 8000a40:	d965      	bls.n	8000b0e <__udivmoddi4+0x29a>
 8000a42:	3b02      	subs	r3, #2
 8000a44:	443c      	add	r4, r7
 8000a46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a4e:	eba4 040c 	sub.w	r4, r4, ip
 8000a52:	429c      	cmp	r4, r3
 8000a54:	46ce      	mov	lr, r9
 8000a56:	469c      	mov	ip, r3
 8000a58:	d351      	bcc.n	8000afe <__udivmoddi4+0x28a>
 8000a5a:	d04e      	beq.n	8000afa <__udivmoddi4+0x286>
 8000a5c:	b155      	cbz	r5, 8000a74 <__udivmoddi4+0x200>
 8000a5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a62:	eb64 040c 	sbc.w	r4, r4, ip
 8000a66:	fa04 f606 	lsl.w	r6, r4, r6
 8000a6a:	40cb      	lsrs	r3, r1
 8000a6c:	431e      	orrs	r6, r3
 8000a6e:	40cc      	lsrs	r4, r1
 8000a70:	e9c5 6400 	strd	r6, r4, [r5]
 8000a74:	2100      	movs	r1, #0
 8000a76:	e750      	b.n	800091a <__udivmoddi4+0xa6>
 8000a78:	f1c2 0320 	rsb	r3, r2, #32
 8000a7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a84:	fa24 f303 	lsr.w	r3, r4, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	430c      	orrs	r4, r1
 8000a8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a94:	fa1f f78c 	uxth.w	r7, ip
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000aa0:	0c23      	lsrs	r3, r4, #16
 8000aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa6:	fb00 f107 	mul.w	r1, r0, r7
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x24c>
 8000aae:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ab6:	d22c      	bcs.n	8000b12 <__udivmoddi4+0x29e>
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d92a      	bls.n	8000b12 <__udivmoddi4+0x29e>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a5b      	subs	r3, r3, r1
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ac8:	fb08 3311 	mls	r3, r8, r1, r3
 8000acc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad0:	fb01 f307 	mul.w	r3, r1, r7
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x276>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ae0:	d213      	bcs.n	8000b0a <__udivmoddi4+0x296>
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	d911      	bls.n	8000b0a <__udivmoddi4+0x296>
 8000ae6:	3902      	subs	r1, #2
 8000ae8:	4464      	add	r4, ip
 8000aea:	1ae4      	subs	r4, r4, r3
 8000aec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000af0:	e739      	b.n	8000966 <__udivmoddi4+0xf2>
 8000af2:	4604      	mov	r4, r0
 8000af4:	e6f0      	b.n	80008d8 <__udivmoddi4+0x64>
 8000af6:	4608      	mov	r0, r1
 8000af8:	e706      	b.n	8000908 <__udivmoddi4+0x94>
 8000afa:	45c8      	cmp	r8, r9
 8000afc:	d2ae      	bcs.n	8000a5c <__udivmoddi4+0x1e8>
 8000afe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b06:	3801      	subs	r0, #1
 8000b08:	e7a8      	b.n	8000a5c <__udivmoddi4+0x1e8>
 8000b0a:	4631      	mov	r1, r6
 8000b0c:	e7ed      	b.n	8000aea <__udivmoddi4+0x276>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	e799      	b.n	8000a46 <__udivmoddi4+0x1d2>
 8000b12:	4630      	mov	r0, r6
 8000b14:	e7d4      	b.n	8000ac0 <__udivmoddi4+0x24c>
 8000b16:	46d6      	mov	lr, sl
 8000b18:	e77f      	b.n	8000a1a <__udivmoddi4+0x1a6>
 8000b1a:	4463      	add	r3, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	e74d      	b.n	80009bc <__udivmoddi4+0x148>
 8000b20:	4606      	mov	r6, r0
 8000b22:	4623      	mov	r3, r4
 8000b24:	4608      	mov	r0, r1
 8000b26:	e70f      	b.n	8000948 <__udivmoddi4+0xd4>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	e730      	b.n	8000990 <__udivmoddi4+0x11c>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_idiv0>:
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <cb_init>:
 */
static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte);

/* Function definitions ----------------------------------------------- */
uint32_t cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
    if (cb == NULL || buf == NULL || size >= CB_MAX_SIZE)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <cb_init+0x20>
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <cb_init+0x20>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000b52:	d302      	bcc.n	8000b5a <cb_init+0x26>
        return CB_ERROR;
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	e012      	b.n	8000b80 <cb_init+0x4c>

    cb->data = buf;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	601a      	str	r2, [r3, #0]
    cb->size = size;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	605a      	str	r2, [r3, #4]
    cb->writer = 0;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
    cb->reader = 0;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
    cb->overflow = 0;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
    cb->active = 1;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	751a      	strb	r2, [r3, #20]

    return CB_SUCCESS;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <cb_read>:

    return CB_SUCCESS;
}

uint32_t cb_read(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
    int data_count = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00a      	beq.n	8000bbc <cb_read+0x30>
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d007      	beq.n	8000bbc <cb_read+0x30>
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	7d1b      	ldrb	r3, [r3, #20]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <cb_read+0x36>
        return CB_ERROR;
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	e025      	b.n	8000c0e <cb_read+0x82>

    cb->active = 0;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	751a      	strb	r2, [r3, #20]
    data_count = cb_data_count(cb);
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f000 f872 	bl	8000cb2 <cb_data_count>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	617b      	str	r3, [r7, #20]
    if (data_count >= nbytes)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d802      	bhi.n	8000be0 <cb_read+0x54>
        num_avail_bytes = nbytes;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	e001      	b.n	8000be4 <cb_read+0x58>
    else
        num_avail_bytes = data_count;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < num_avail_bytes; i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	e009      	b.n	8000bfe <cb_read+0x72>
        cb_read_byte(cb, (uint8_t *)buf + i);
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f000 f8e6 	bl	8000dc4 <cb_read_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbf1      	blt.n	8000bea <cb_read+0x5e>

    cb->active = 1;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000c0c:	69fb      	ldr	r3, [r7, #28]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <cb_write>:

uint32_t cb_write(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b088      	sub	sp, #32
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
    int space_count = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00a      	beq.n	8000c46 <cb_write+0x30>
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <cb_write+0x30>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	7d1b      	ldrb	r3, [r3, #20]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <cb_write+0x36>
        return CB_ERROR;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e02e      	b.n	8000caa <cb_write+0x94>

    cb->active = 0;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	751a      	strb	r2, [r3, #20]
    space_count = cb_space_count(cb);
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 f856 	bl	8000d04 <cb_space_count>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	617b      	str	r3, [r7, #20]
    if (space_count >= nbytes)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d805      	bhi.n	8000c70 <cb_write+0x5a>
    {
        num_avail_bytes = nbytes;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	61fb      	str	r3, [r7, #28]
        cb->overflow = 0;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	e006      	b.n	8000c7e <cb_write+0x68>
    }
    else
    {
        num_avail_bytes = space_count;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	61fb      	str	r3, [r7, #28]
        cb->overflow = nbytes - space_count;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	1ad2      	subs	r2, r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
    }

    for (int i = 0; i < num_avail_bytes; i++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	e00a      	b.n	8000c9a <cb_write+0x84>
        cb_write_byte(cb, *((uint8_t *)buf + i));
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f000 f86e 	bl	8000d70 <cb_write_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	3301      	adds	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbf0      	blt.n	8000c84 <cb_write+0x6e>

    cb->active = 1;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000ca8:	69fb      	ldr	r3, [r7, #28]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <cb_data_count>:

uint32_t cb_data_count(cbuffer_t *cb)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <cb_data_count+0x18>
        return CB_ERROR;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	e016      	b.n	8000cf8 <cb_data_count+0x46>

    if (cb->writer >= cb->reader)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d306      	bcc.n	8000ce4 <cb_data_count+0x32>
        res = cb->writer - cb->reader;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e008      	b.n	8000cf6 <cb_data_count+0x44>
    else
        res = cb->size - cb->reader + cb->writer;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	1ad2      	subs	r2, r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]

    return res;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <cb_space_count>:

uint32_t cb_space_count(cbuffer_t *cb)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <cb_space_count+0x18>
        return CB_ERROR;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e023      	b.n	8000d64 <cb_space_count+0x60>

    if (cb->reader > cb->writer)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d907      	bls.n	8000d38 <cb_space_count+0x34>
        res = cb->reader - cb->writer - 1;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	3b01      	subs	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e014      	b.n	8000d62 <cb_space_count+0x5e>
    else if (cb->reader < cb->writer)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d20a      	bcs.n	8000d5a <cb_space_count+0x56>
        res = cb->size - cb->writer + cb->reader - 1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	1ad2      	subs	r2, r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	3b01      	subs	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e003      	b.n	8000d62 <cb_space_count+0x5e>
    else
        res = cb->size - 1;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]

    return res;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <cb_write_byte>:

/* Private definitions ----------------------------------------------- */
static uint32_t cb_write_byte(cbuffer_t *cb, uint8_t byte)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
    uint32_t next = cb->writer + 1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
    if (next == cb->size)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d101      	bne.n	8000d92 <cb_write_byte+0x22>
        next = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]

    if (next == cb->reader)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d102      	bne.n	8000da2 <cb_write_byte+0x32>
        return CB_ERROR;
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	e00a      	b.n	8000db8 <cb_write_byte+0x48>

    *(cb->data + cb->writer) = byte;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	701a      	strb	r2, [r3, #0]
    cb->writer = next;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	609a      	str	r2, [r3, #8]
    return CB_SUCCESS;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <cb_read_byte>:

static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
    uint32_t next = cb->reader + 1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
    if (cb->reader == cb->writer)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d102      	bne.n	8000de8 <cb_read_byte+0x24>
        return CB_ERROR;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e012      	b.n	8000e0e <cb_read_byte+0x4a>

    if (next == cb->size)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d101      	bne.n	8000df6 <cb_read_byte+0x32>
        next = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]

    *byte = *(cb->data + cb->reader);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	701a      	strb	r2, [r3, #0]
    cb->reader = next;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	60da      	str	r2, [r3, #12]
    return CB_SUCCESS;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <MovingAverageFilter_Init>:
/* Private function prototypes ---------------------------------------- */
/* None */

/* Function definitions ----------------------------------------------- */
void MovingAverageFilter_Init(MovingAverageFilter* filter)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e007      	b.n	8000e38 <MovingAverageFilter_Init+0x1e>
        filter->buffer[i] = 0;
 8000e28:	7bfa      	ldrb	r2, [r7, #15]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	3301      	adds	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d9f4      	bls.n	8000e28 <MovingAverageFilter_Init+0xe>
    }
    filter->index = 0;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	719a      	strb	r2, [r3, #6]
    filter->is_full = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	71da      	strb	r2, [r3, #7]
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <BandpassFilter_Init>:
    }
    return (uint16_t)(sum / MOVING_AVERAGE_WINDOW_SIZE);
}

void BandpassFilter_Init(BandpassFilter* filter)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < BANDPASS_LOWPASS_WINDOW_SIZE; i++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e007      	b.n	8000e74 <BandpassFilter_Init+0x1e>
        filter->lowpass_buffer[i] = 0;
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < BANDPASS_LOWPASS_WINDOW_SIZE; i++) {
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d9f4      	bls.n	8000e64 <BandpassFilter_Init+0xe>
    }
    for (uint16_t i = 0; i < BANDPASS_HIGHPASS_WINDOW_SIZE; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	81bb      	strh	r3, [r7, #12]
 8000e7e:	e009      	b.n	8000e94 <BandpassFilter_Init+0x3e>
        filter->highpass_buffer[i] = 0;
 8000e80:	89bb      	ldrh	r3, [r7, #12]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	3304      	adds	r3, #4
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
    for (uint16_t i = 0; i < BANDPASS_HIGHPASS_WINDOW_SIZE; i++) {
 8000e8e:	89bb      	ldrh	r3, [r7, #12]
 8000e90:	3301      	adds	r3, #1
 8000e92:	81bb      	strh	r3, [r7, #12]
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e98:	d9f2      	bls.n	8000e80 <BandpassFilter_Init+0x2a>
    }
    filter->lowpass_index = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
    filter->highpass_index = 0;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f8a3 2216 	strh.w	r2, [r3, #534]	@ 0x216
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <BandpassFilter_Apply>:

int32_t BandpassFilter_Apply(BandpassFilter* filter, int32_t new_sample)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    // Low-pass filter (cutoff ~40 Hz at 200 Hz)
    for (uint8_t i = BANDPASS_LOWPASS_WINDOW_SIZE - 1; i > 0; i--) {
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	77fb      	strb	r3, [r7, #31]
 8000ec6:	e00b      	b.n	8000ee0 <BandpassFilter_Apply+0x28>
        filter->lowpass_buffer[i] = filter->lowpass_buffer[i - 1];
 8000ec8:	7ffb      	ldrb	r3, [r7, #31]
 8000eca:	1e59      	subs	r1, r3, #1
 8000ecc:	7ffa      	ldrb	r2, [r7, #31]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = BANDPASS_LOWPASS_WINDOW_SIZE - 1; i > 0; i--) {
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	77fb      	strb	r3, [r7, #31]
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <BandpassFilter_Apply+0x10>
    }
    filter->lowpass_buffer[0] = new_sample;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	601a      	str	r2, [r3, #0]

    int32_t lowpass = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < BANDPASS_LOWPASS_WINDOW_SIZE; i++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75fb      	strb	r3, [r7, #23]
 8000ef4:	e009      	b.n	8000f0a <BandpassFilter_Apply+0x52>
        lowpass += filter->lowpass_buffer[i];
 8000ef6:	7dfa      	ldrb	r2, [r7, #23]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4413      	add	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < BANDPASS_LOWPASS_WINDOW_SIZE; i++) {
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	3301      	adds	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d9f2      	bls.n	8000ef6 <BandpassFilter_Apply+0x3e>
    }
    lowpass /= BANDPASS_LOWPASS_WINDOW_SIZE;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	4a22      	ldr	r2, [pc, #136]	@ (8000f9c <BandpassFilter_Apply+0xe4>)
 8000f14:	fb82 1203 	smull	r1, r2, r2, r3
 8000f18:	1052      	asrs	r2, r2, #1
 8000f1a:	17db      	asrs	r3, r3, #31
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	61bb      	str	r3, [r7, #24]

    // High-pass filter (cutoff ~0.5 Hz at 200 Hz)
    for (uint16_t i = BANDPASS_HIGHPASS_WINDOW_SIZE - 1; i > 0; i--) {
 8000f20:	237f      	movs	r3, #127	@ 0x7f
 8000f22:	82bb      	strh	r3, [r7, #20]
 8000f24:	e00f      	b.n	8000f46 <BandpassFilter_Apply+0x8e>
        filter->highpass_buffer[i] = filter->highpass_buffer[i - 1];
 8000f26:	8abb      	ldrh	r3, [r7, #20]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	8ab8      	ldrh	r0, [r7, #20]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	1d03      	adds	r3, r0, #4
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	605a      	str	r2, [r3, #4]
    for (uint16_t i = BANDPASS_HIGHPASS_WINDOW_SIZE - 1; i > 0; i--) {
 8000f40:	8abb      	ldrh	r3, [r7, #20]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	82bb      	strh	r3, [r7, #20]
 8000f46:	8abb      	ldrh	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1ec      	bne.n	8000f26 <BandpassFilter_Apply+0x6e>
    }
    filter->highpass_buffer[0] = lowpass;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	615a      	str	r2, [r3, #20]

    // Calculate the average of the previous 128 samples
    int32_t lowpass_average = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < BANDPASS_HIGHPASS_WINDOW_SIZE; i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	81fb      	strh	r3, [r7, #14]
 8000f5a:	e00b      	b.n	8000f74 <BandpassFilter_Apply+0xbc>
        lowpass_average += filter->highpass_buffer[i];
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	3304      	adds	r3, #4
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < BANDPASS_HIGHPASS_WINDOW_SIZE; i++) {
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	3301      	adds	r3, #1
 8000f72:	81fb      	strh	r3, [r7, #14]
 8000f74:	89fb      	ldrh	r3, [r7, #14]
 8000f76:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f78:	d9f0      	bls.n	8000f5c <BandpassFilter_Apply+0xa4>
    }
    lowpass_average /= BANDPASS_HIGHPASS_WINDOW_SIZE;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da00      	bge.n	8000f82 <BandpassFilter_Apply+0xca>
 8000f80:	337f      	adds	r3, #127	@ 0x7f
 8000f82:	11db      	asrs	r3, r3, #7
 8000f84:	613b      	str	r3, [r7, #16]

    // High-pass filter: y[n] = x[n] - (1/128) * sum(x[n-k])
    int32_t highpass = lowpass - lowpass_average;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	60bb      	str	r3, [r7, #8]

    return highpass;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3724      	adds	r7, #36	@ 0x24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	66666667 	.word	0x66666667

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b0ce      	sub	sp, #312	@ 0x138
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f001 f8d7 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f94b 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 fa99 	bl	80014e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb2:	f000 fa77 	bl	80014a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fb6:	f000 f9ad 	bl	8001314 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000fba:	f000 fa49 	bl	8001450 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fbe:	f000 f9fb 	bl	80013b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MovingAverageFilter_Init(&adc_filter);
 8000fc2:	488f      	ldr	r0, [pc, #572]	@ (8001200 <main+0x260>)
 8000fc4:	f7ff ff29 	bl	8000e1a <MovingAverageFilter_Init>
  BandpassFilter_Init(&bandpass_filter);
 8000fc8:	488e      	ldr	r0, [pc, #568]	@ (8001204 <main+0x264>)
 8000fca:	f7ff ff44 	bl	8000e56 <BandpassFilter_Init>
  cb_init(&adc_buffer, adc_buffer_data, sizeof(adc_buffer_data));
 8000fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd2:	498d      	ldr	r1, [pc, #564]	@ (8001208 <main+0x268>)
 8000fd4:	488d      	ldr	r0, [pc, #564]	@ (800120c <main+0x26c>)
 8000fd6:	f7ff fdad 	bl	8000b34 <cb_init>
  QRSDetector_Init(&qrs_detector);
 8000fda:	488d      	ldr	r0, [pc, #564]	@ (8001210 <main+0x270>)
 8000fdc:	f000 fab0 	bl	8001540 <QRSDetector_Init>
  memset(qrs_flags, 0, sizeof(qrs_flags));
 8000fe0:	2240      	movs	r2, #64	@ 0x40
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	488b      	ldr	r0, [pc, #556]	@ (8001214 <main+0x274>)
 8000fe6:	f004 f8d7 	bl	8005198 <memset>
  qrs_flag_index = 0;
 8000fea:	4b8b      	ldr	r3, [pc, #556]	@ (8001218 <main+0x278>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  memset(first_10s_filtered, 0, sizeof(first_10s_filtered));
 8000ff0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4889      	ldr	r0, [pc, #548]	@ (800121c <main+0x27c>)
 8000ff8:	f004 f8ce 	bl	8005198 <memset>
  memset(first_10s_qrs_flags, 0, sizeof(first_10s_qrs_flags));
 8000ffc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001000:	2100      	movs	r1, #0
 8001002:	4887      	ldr	r0, [pc, #540]	@ (8001220 <main+0x280>)
 8001004:	f004 f8c8 	bl	8005198 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 8001008:	4886      	ldr	r0, [pc, #536]	@ (8001224 <main+0x284>)
 800100a:	f003 f8c5 	bl	8004198 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 800100e:	2201      	movs	r2, #1
 8001010:	4985      	ldr	r1, [pc, #532]	@ (8001228 <main+0x288>)
 8001012:	4886      	ldr	r0, [pc, #536]	@ (800122c <main+0x28c>)
 8001014:	f001 fa14 	bl	8002440 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8001018:	4884      	ldr	r0, [pc, #528]	@ (800122c <main+0x28c>)
 800101a:	f001 f953 	bl	80022c4 <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(send_flag == 1)
 800101e:	4b84      	ldr	r3, [pc, #528]	@ (8001230 <main+0x290>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d1fb      	bne.n	800101e <main+0x7e>
	  {
		  send_flag = 0;
 8001026:	4b82      	ldr	r3, [pc, #520]	@ (8001230 <main+0x290>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
		  uint8_t temp_buffer[256]; // 64 samples x 4 bytes (2 bytes raw + 2 bytes bandpass)
		  uint32_t bytes_read = cb_read(&adc_buffer, temp_buffer, 256);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001032:	4619      	mov	r1, r3
 8001034:	4875      	ldr	r0, [pc, #468]	@ (800120c <main+0x26c>)
 8001036:	f7ff fda9 	bl	8000b8c <cb_read>
 800103a:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
			if(bytes_read == 256)
 800103e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001046:	f040 80c0 	bne.w	80011ca <main+0x22a>
			{
				// Prepare data to send: Start byte + 64 raw samples (2 bytes each) + 64 bandpass samples (2 bytes each) + 64 QRS flags (1 byte each) + End byte
				int idx = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
				sendBuffer[idx++] = START_BYTE; // Start byte
 8001050:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800105a:	4a76      	ldr	r2, [pc, #472]	@ (8001234 <main+0x294>)
 800105c:	21aa      	movs	r1, #170	@ 0xaa
 800105e:	54d1      	strb	r1, [r2, r3]

				// Send 64 raw samples (2 bytes each)
				for (int i = 0; i < 64; i++)
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001066:	e032      	b.n	80010ce <main+0x12e>
				{
					uint16_t raw_value = (temp_buffer[i * 4] << 8) | temp_buffer[i * 4 + 1];
 8001068:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001072:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	3301      	adds	r3, #1
 8001084:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001088:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800108c:	5ccb      	ldrb	r3, [r1, r3]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21b      	sxth	r3, r3
 8001094:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
					sendBuffer[idx++] = (raw_value >> 8) & 0xFF;
 8001098:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b299      	uxth	r1, r3
 80010a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80010aa:	b2c9      	uxtb	r1, r1
 80010ac:	4a61      	ldr	r2, [pc, #388]	@ (8001234 <main+0x294>)
 80010ae:	54d1      	strb	r1, [r2, r3]
					sendBuffer[idx++] = raw_value & 0xFF;
 80010b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80010ba:	f8b7 2120 	ldrh.w	r2, [r7, #288]	@ 0x120
 80010be:	b2d1      	uxtb	r1, r2
 80010c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001234 <main+0x294>)
 80010c2:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 64; i++)
 80010c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010c8:	3301      	adds	r3, #1
 80010ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80010ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010d4:	ddc8      	ble.n	8001068 <main+0xc8>
				}

				// Send 64 bandpass samples (2 bytes each)
				for (int i = 0; i < 64; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80010dc:	e032      	b.n	8001144 <main+0x1a4>
				{
					int16_t bp_value = (temp_buffer[i * 4 + 2] << 8) | temp_buffer[i * 4 + 3];
 80010de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80010ea:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	3303      	adds	r3, #3
 80010fc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001100:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8001104:	5ccb      	ldrb	r3, [r1, r3]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
					sendBuffer[idx++] = (bp_value >> 8) & 0xFF;
 800110e:	f9b7 3122 	ldrsh.w	r3, [r7, #290]	@ 0x122
 8001112:	121b      	asrs	r3, r3, #8
 8001114:	b219      	sxth	r1, r3
 8001116:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001120:	b2c9      	uxtb	r1, r1
 8001122:	4a44      	ldr	r2, [pc, #272]	@ (8001234 <main+0x294>)
 8001124:	54d1      	strb	r1, [r2, r3]
					sendBuffer[idx++] = bp_value & 0xFF;
 8001126:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001130:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 8001134:	b2d1      	uxtb	r1, r2
 8001136:	4a3f      	ldr	r2, [pc, #252]	@ (8001234 <main+0x294>)
 8001138:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 64; i++)
 800113a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800113e:	3301      	adds	r3, #1
 8001140:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001144:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001148:	2b3f      	cmp	r3, #63	@ 0x3f
 800114a:	ddc8      	ble.n	80010de <main+0x13e>
				}

				// Send 64 QRS flags (1 byte each) - Use first_10s_qrs_flags if available
				for (int i = 0; i < 64; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001152:	e01d      	b.n	8001190 <main+0x1f0>
				{
					if (first_10s_ready && qrs_flag_index < 2000)
 8001154:	4b38      	ldr	r3, [pc, #224]	@ (8001238 <main+0x298>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00c      	beq.n	8001176 <main+0x1d6>
					{
						sendBuffer[idx++] = first_10s_qrs_flags[qrs_flag_index];
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <main+0x278>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800116c:	4a2c      	ldr	r2, [pc, #176]	@ (8001220 <main+0x280>)
 800116e:	5c51      	ldrb	r1, [r2, r1]
 8001170:	4a30      	ldr	r2, [pc, #192]	@ (8001234 <main+0x294>)
 8001172:	54d1      	strb	r1, [r2, r3]
 8001174:	e007      	b.n	8001186 <main+0x1e6>
					}
					else
					{
						sendBuffer[idx++] = 0;
 8001176:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001180:	4a2c      	ldr	r2, [pc, #176]	@ (8001234 <main+0x294>)
 8001182:	2100      	movs	r1, #0
 8001184:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 64; i++)
 8001186:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800118a:	3301      	adds	r3, #1
 800118c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001190:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001194:	2b3f      	cmp	r3, #63	@ 0x3f
 8001196:	dddd      	ble.n	8001154 <main+0x1b4>
					}
				}

				sendBuffer[idx++] = END_BYTE; // End byte
 8001198:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80011a2:	4a24      	ldr	r2, [pc, #144]	@ (8001234 <main+0x294>)
 80011a4:	21bb      	movs	r1, #187	@ 0xbb
 80011a6:	54d1      	strb	r1, [r2, r3]

				// Send data via UART
				HAL_UART_Transmit(&huart2, sendBuffer, idx, 200);
 80011a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	23c8      	movs	r3, #200	@ 0xc8
 80011b0:	4920      	ldr	r1, [pc, #128]	@ (8001234 <main+0x294>)
 80011b2:	4822      	ldr	r0, [pc, #136]	@ (800123c <main+0x29c>)
 80011b4:	f003 fc34 	bl	8004a20 <HAL_UART_Transmit>

				// Reset QRS flags
				memset(qrs_flags, 0, sizeof(qrs_flags));
 80011b8:	2240      	movs	r2, #64	@ 0x40
 80011ba:	2100      	movs	r1, #0
 80011bc:	4815      	ldr	r0, [pc, #84]	@ (8001214 <main+0x274>)
 80011be:	f003 ffeb 	bl	8005198 <memset>
				qrs_flag_index = 0;
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <main+0x278>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e729      	b.n	800101e <main+0x7e>
			}
			else
			{
				char error_msg[] = "Error reading from buffer\n";
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <main+0x2a0>)
 80011cc:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 80011d0:	461d      	mov	r5, r3
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011da:	c403      	stmia	r4!, {r0, r1}
 80011dc:	8022      	strh	r2, [r4, #0]
 80011de:	3402      	adds	r4, #2
 80011e0:	0c13      	lsrs	r3, r2, #16
 80011e2:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 200);
 80011e4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7fe fff5 	bl	80001d8 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 80011f6:	23c8      	movs	r3, #200	@ 0xc8
 80011f8:	4810      	ldr	r0, [pc, #64]	@ (800123c <main+0x29c>)
 80011fa:	f003 fc11 	bl	8004a20 <HAL_UART_Transmit>
	  if(send_flag == 1)
 80011fe:	e70e      	b.n	800101e <main+0x7e>
 8001200:	20000028 	.word	0x20000028
 8001204:	20000030 	.word	0x20000030
 8001208:	20000260 	.word	0x20000260
 800120c:	20000248 	.word	0x20000248
 8001210:	20000460 	.word	0x20000460
 8001214:	20000568 	.word	0x20000568
 8001218:	200005a8 	.word	0x200005a8
 800121c:	200005ac 	.word	0x200005ac
 8001220:	200024ec 	.word	0x200024ec
 8001224:	20002d6c 	.word	0x20002d6c
 8001228:	20002f2c 	.word	0x20002f2c
 800122c:	20002cc4 	.word	0x20002cc4
 8001230:	20002f28 	.word	0x20002f28
 8001234:	20002dfc 	.word	0x20002dfc
 8001238:	20002cc0 	.word	0x20002cc0
 800123c:	20002db4 	.word	0x20002db4
 8001240:	08005208 	.word	0x08005208

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	@ 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 ffa0 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <SystemClock_Config+0xc8>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a26      	ldr	r2, [pc, #152]	@ (800130c <SystemClock_Config+0xc8>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b24      	ldr	r3, [pc, #144]	@ (800130c <SystemClock_Config+0xc8>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <SystemClock_Config+0xcc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a20      	ldr	r2, [pc, #128]	@ (8001310 <SystemClock_Config+0xcc>)
 800128e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <SystemClock_Config+0xcc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2310      	movs	r3, #16
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ac:	2302      	movs	r3, #2
 80012ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b4:	2308      	movs	r3, #8
 80012b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012b8:	2364      	movs	r3, #100	@ 0x64
 80012ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80012c0:	2308      	movs	r3, #8
 80012c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fa7d 	bl	80037c8 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d4:	f000 f92e 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2103      	movs	r1, #3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fcdf 	bl	8003cb8 <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001300:	f000 f918 	bl	8001534 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3750      	adds	r7, #80	@ 0x50
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <MX_ADC1_Init+0x9c>)
 800132a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <MX_ADC1_Init+0x98>)
 800132e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001332:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <MX_ADC1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001342:	2201      	movs	r2, #1
 8001344:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001356:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <MX_ADC1_Init+0xa0>)
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_ADC1_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001362:	2201      	movs	r2, #1
 8001364:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001370:	2201      	movs	r2, #1
 8001372:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001376:	f000 ff61 	bl	800223c <HAL_ADC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 f8d8 	bl	8001534 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800138c:	2307      	movs	r3, #7
 800138e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_ADC1_Init+0x98>)
 8001396:	f001 f961 	bl	800265c <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013a0:	f000 f8c8 	bl	8001534 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20002cc4 	.word	0x20002cc4
 80013b0:	40012000 	.word	0x40012000
 80013b4:	0f000001 	.word	0x0f000001

080013b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_TIM2_Init+0x94>)
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1999;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_TIM2_Init+0x94>)
 80013de:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80013e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b19      	ldr	r3, [pc, #100]	@ (800144c <MX_TIM2_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_TIM2_Init+0x94>)
 80013ec:	22fa      	movs	r2, #250	@ 0xfa
 80013ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_TIM2_Init+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_TIM2_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fc:	4813      	ldr	r0, [pc, #76]	@ (800144c <MX_TIM2_Init+0x94>)
 80013fe:	f002 fe7b 	bl	80040f8 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001408:	f000 f894 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <MX_TIM2_Init+0x94>)
 800141a:	f003 f80f 	bl	800443c <HAL_TIM_ConfigClockSource>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001424:	f000 f886 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_TIM2_Init+0x94>)
 8001436:	f003 fa21 	bl	800487c <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001440:	f000 f878 	bl	8001534 <Error_Handler>
  }
}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20002d6c 	.word	0x20002d6c

08001450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <MX_USART2_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_USART2_UART_Init+0x4c>)
 8001488:	f003 fa7a 	bl	8004980 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f000 f84f 	bl	8001534 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20002db4 	.word	0x20002db4
 80014a0:	40004400 	.word	0x40004400

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_DMA_Init+0x3c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <MX_DMA_Init+0x3c>)
 80014b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_DMA_Init+0x3c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2038      	movs	r0, #56	@ 0x38
 80014cc:	f001 fc51 	bl	8002d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014d0:	2038      	movs	r0, #56	@ 0x38
 80014d2:	f001 fc6a 	bl	8002daa <HAL_NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_GPIO_Init+0x4c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001530 <MX_GPIO_Init+0x4c>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <MX_GPIO_Init+0x4c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_GPIO_Init+0x4c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <MX_GPIO_Init+0x4c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_GPIO_Init+0x4c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  __disable_irq();
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <Error_Handler+0x8>

08001540 <QRSDetector_Init>:
static void update_rr_intervals(QRSDetector* detector, uint32_t rr);
static int32_t calculate_slope(QRSDetector* detector);

/* Function definitions ----------------------------------------------- */
void QRSDetector_Init(QRSDetector* detector)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 5; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e007      	b.n	800155e <QRSDetector_Init+0x1e>
        detector->deriv_buffer[i] = 0;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2100      	movs	r1, #0
 8001554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 5; i++) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3301      	adds	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d9f4      	bls.n	800154e <QRSDetector_Init+0xe>
    }
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	73bb      	strb	r3, [r7, #14]
 8001568:	e009      	b.n	800157e <QRSDetector_Init+0x3e>
        detector->integ_buffer[i] = 0;
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	3304      	adds	r3, #4
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	73bb      	strb	r3, [r7, #14]
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	2b27      	cmp	r3, #39	@ 0x27
 8001582:	d9f2      	bls.n	800156a <QRSDetector_Init+0x2a>
    }

    detector->integ_index = 0;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    detector->signal_level = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    detector->noise_level = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    detector->threshold_i1 = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    detector->threshold_i2 = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    detector->last_peak_time = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    detector->sample_count = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    detector->learning_phase = 1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    for (uint8_t i = 0; i < 8; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	737b      	strb	r3, [r7, #13]
 80015c8:	e009      	b.n	80015de <QRSDetector_Init+0x9e>
        detector->rr_intervals[i] = 0;
 80015ca:	7b7b      	ldrb	r3, [r7, #13]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	3334      	adds	r3, #52	@ 0x34
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < 8; i++) {
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	3301      	adds	r3, #1
 80015dc:	737b      	strb	r3, [r7, #13]
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	2b07      	cmp	r3, #7
 80015e2:	d9f2      	bls.n	80015ca <QRSDetector_Init+0x8a>
    }
    detector->rr_index = 0;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
    detector->rr_average1 = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    detector->rr_average2 = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    detector->rr_count = 0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

    detector->last_qrs_slope = 0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <QRSDetector_Detect>:

void QRSDetector_Detect(QRSDetector* detector, const int32_t* filtered_data, uint8_t* qrs_flags)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b090      	sub	sp, #64	@ 0x40
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
    // Reset detector state
    QRSDetector_Init(detector);
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff ff8b 	bl	8001540 <QRSDetector_Init>

    uint8_t learning_phase_2 = 0;  // Flag for second learning phase (RR interval initialization)
 800162a:	2300      	movs	r3, #0
 800162c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t detected_peaks = 0;    // Counter for detected QRS peaks in learning phase 2
 8001630:	2300      	movs	r3, #0
 8001632:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    // Process each sample in the 10-second filtered data
    for (uint32_t i = 0; i < QRS_10S_SAMPLES; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800163a:	e193      	b.n	8001964 <QRSDetector_Detect+0x34c>
        int32_t filtered = filtered_data[i];
 800163c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34

        // Step 1: Compute derivative
        int32_t deriv = derivative(detector, filtered);
 8001648:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f9a2 	bl	8001994 <derivative>
 8001650:	6338      	str	r0, [r7, #48]	@ 0x30

        // Step 2: Square the signal
        int32_t squared = squaring(deriv);
 8001652:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001654:	f000 f9c1 	bl	80019da <squaring>
 8001658:	62f8      	str	r0, [r7, #44]	@ 0x2c

        // Step 3: Apply moving window integration
        int32_t integrated = moving_window_integration(detector, squared);
 800165a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f9c9 	bl	80019f4 <moving_window_integration>
 8001662:	62b8      	str	r0, [r7, #40]	@ 0x28

        // Step 4: Learning phase (first 4 seconds)
        if (detector->learning_phase) {
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d074      	beq.n	8001758 <QRSDetector_Detect+0x140>
            detector->sample_count++;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            if (detector->sample_count < QRS_LEARNING_SAMPLES) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001682:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001686:	d217      	bcs.n	80016b8 <QRSDetector_Detect+0xa0>
                if (integrated > detector->signal_level) detector->signal_level = integrated;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800168e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001690:	429a      	cmp	r2, r3
 8001692:	dd03      	ble.n	800169c <QRSDetector_Detect+0x84>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001698:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                detector->noise_level += integrated;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80016a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a4:	441a      	add	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
                qrs_flags[i] = 0;
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b0:	4413      	add	r3, r2
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
                continue;
 80016b6:	e152      	b.n	800195e <QRSDetector_Detect+0x346>
            } else {
                detector->noise_level /= QRS_LEARNING_SAMPLES;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80016be:	4ab4      	ldr	r2, [pc, #720]	@ (8001990 <QRSDetector_Detect+0x378>)
 80016c0:	fb82 1203 	smull	r1, r2, r2, r3
 80016c4:	1212      	asrs	r2, r2, #8
 80016c6:	17db      	asrs	r3, r3, #31
 80016c8:	1ad2      	subs	r2, r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
                // Do not divide signal_level by 2 to avoid reducing threshold too much
                detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f802 	bl	80006e0 <__aeabi_i2d>
 80016dc:	4604      	mov	r4, r0
 80016de:	460d      	mov	r5, r1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fff6 	bl	80006e0 <__aeabi_i2d>
 80016f4:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001978 <QRSDetector_Detect+0x360>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe fd75 	bl	80001e8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe fe9f 	bl	8000448 <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff f84f 	bl	80007b4 <__aeabi_d2iz>
 8001716:	4602      	mov	r2, r0
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ffdb 	bl	80006e0 <__aeabi_i2d>
 800172a:	a395      	add	r3, pc, #596	@ (adr r3, 8001980 <QRSDetector_Detect+0x368>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe fd5a 	bl	80001e8 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff f83a 	bl	80007b4 <__aeabi_d2iz>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                detector->learning_phase = 0;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
                detector->sample_count = 0;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            }
        }

        // Step 5: Peak detection
        uint8_t is_qrs = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (integrated > detector->threshold_i1) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001766:	429a      	cmp	r2, r3
 8001768:	f340 8098 	ble.w	800189c <QRSDetector_Detect+0x284>
            uint32_t time_since_last = detector->sample_count - detector->last_peak_time;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	61fb      	str	r3, [r7, #28]

            // Check refractory period
            if (time_since_last < QRS_REFRACTORY_PERIOD) {
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b27      	cmp	r3, #39	@ 0x27
 8001780:	d80a      	bhi.n	8001798 <QRSDetector_Detect+0x180>
                update_thresholds(detector, integrated, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f97a 	bl	8001a80 <update_thresholds>
                qrs_flags[i] = 0;
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001790:	4413      	add	r3, r2
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e0db      	b.n	8001950 <QRSDetector_Detect+0x338>
            } else {
                // T-wave discrimination
                if (time_since_last < QRS_TWAVE_PERIOD && detector->last_qrs_slope > 0) {
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b47      	cmp	r3, #71	@ 0x47
 800179c:	d84d      	bhi.n	800183a <QRSDetector_Detect+0x222>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd48      	ble.n	800183a <QRSDetector_Detect+0x222>
                    int32_t current_slope = calculate_slope(detector);
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 fac9 	bl	8001d40 <calculate_slope>
 80017ae:	61b8      	str	r0, [r7, #24]
                    if (current_slope < detector->last_qrs_slope / 2) {
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80017b6:	0fda      	lsrs	r2, r3, #31
 80017b8:	4413      	add	r3, r2
 80017ba:	105b      	asrs	r3, r3, #1
 80017bc:	461a      	mov	r2, r3
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4293      	cmp	r3, r2
 80017c2:	da0a      	bge.n	80017da <QRSDetector_Detect+0x1c2>
                        update_thresholds(detector, integrated, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f959 	bl	8001a80 <update_thresholds>
                        qrs_flags[i] = 0;
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d2:	4413      	add	r3, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
                if (time_since_last < QRS_TWAVE_PERIOD && detector->last_qrs_slope > 0) {
 80017d8:	e0b9      	b.n	800194e <QRSDetector_Detect+0x336>
                    } else {
                        // Valid QRS peak
                        is_qrs = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                        detector->last_qrs_slope = current_slope;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
                        update_thresholds(detector, integrated, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f947 	bl	8001a80 <update_thresholds>
                        uint32_t rr = time_since_last;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	617b      	str	r3, [r7, #20]
                        update_rr_intervals(detector, rr);
 80017f6:	6979      	ldr	r1, [r7, #20]
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f9e9 	bl	8001bd0 <update_rr_intervals>
                        detector->last_peak_time = detector->sample_count;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                        qrs_flags[i] = 1;
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180e:	4413      	add	r3, r2
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]

                        // Second learning phase: Initialize RR intervals with first 2 peaks
                        if (!learning_phase_2) {
 8001814:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 8098 	bne.w	800194e <QRSDetector_Detect+0x336>
                            detected_peaks++;
 800181e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001822:	3301      	adds	r3, #1
 8001824:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                            if (detected_peaks == 2) {
 8001828:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800182c:	2b02      	cmp	r3, #2
 800182e:	f040 808e 	bne.w	800194e <QRSDetector_Detect+0x336>
                                learning_phase_2 = 1;  // Second learning phase complete
 8001832:	2301      	movs	r3, #1
 8001834:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                if (time_since_last < QRS_TWAVE_PERIOD && detector->last_qrs_slope > 0) {
 8001838:	e089      	b.n	800194e <QRSDetector_Detect+0x336>
                            }
                        }
                    }
                } else {
                    // Valid QRS peak
                    is_qrs = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    detector->last_qrs_slope = calculate_slope(detector);
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fa7d 	bl	8001d40 <calculate_slope>
 8001846:	4602      	mov	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
                    update_thresholds(detector, integrated, 1);
 800184e:	2201      	movs	r2, #1
 8001850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f914 	bl	8001a80 <update_thresholds>
                    uint32_t rr = time_since_last;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	613b      	str	r3, [r7, #16]
                    update_rr_intervals(detector, rr);
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f9b6 	bl	8001bd0 <update_rr_intervals>
                    detector->last_peak_time = detector->sample_count;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                    qrs_flags[i] = 1;
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001874:	4413      	add	r3, r2
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]

                    // Second learning phase: Initialize RR intervals with first 2 peaks
                    if (!learning_phase_2) {
 800187a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800187e:	2b00      	cmp	r3, #0
 8001880:	d166      	bne.n	8001950 <QRSDetector_Detect+0x338>
                        detected_peaks++;
 8001882:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001886:	3301      	adds	r3, #1
 8001888:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
                        if (detected_peaks == 2) {
 800188c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001890:	2b02      	cmp	r3, #2
 8001892:	d15d      	bne.n	8001950 <QRSDetector_Detect+0x338>
                            learning_phase_2 = 1;  // Second learning phase complete
 8001894:	2301      	movs	r3, #1
 8001896:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800189a:	e059      	b.n	8001950 <QRSDetector_Detect+0x338>
                        }
                    }
                }
            }
        } else if (detector->rr_average1 > 0 &&
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d04d      	beq.n	8001942 <QRSDetector_Detect+0x32a>
                   (detector->sample_count - detector->last_peak_time) > (uint32_t)(QRS_SEARCHBACK_FACTOR * detector->rr_average1)) {
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80018b2:	1ad4      	subs	r4, r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe ff00 	bl	80006c0 <__aeabi_ui2d>
 80018c0:	a331      	add	r3, pc, #196	@ (adr r3, 8001988 <QRSDetector_Detect+0x370>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe fc8f 	bl	80001e8 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7fe ff97 	bl	8000804 <__aeabi_d2uiz>
 80018d6:	4603      	mov	r3, r0
        } else if (detector->rr_average1 > 0 &&
 80018d8:	429c      	cmp	r4, r3
 80018da:	d932      	bls.n	8001942 <QRSDetector_Detect+0x32a>
            if (integrated > detector->threshold_i2) {
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80018e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dd26      	ble.n	8001936 <QRSDetector_Detect+0x31e>
                is_qrs = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                detector->last_qrs_slope = calculate_slope(detector);
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fa26 	bl	8001d40 <calculate_slope>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
                update_thresholds(detector, integrated, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f8bd 	bl	8001a80 <update_thresholds>
                uint32_t rr = detector->sample_count - detector->last_peak_time;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	623b      	str	r3, [r7, #32]
                update_rr_intervals(detector, rr);
 8001916:	6a39      	ldr	r1, [r7, #32]
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f959 	bl	8001bd0 <update_rr_intervals>
                detector->last_peak_time = detector->sample_count;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                qrs_flags[i] = 1;
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800192e:	4413      	add	r3, r2
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
            if (integrated > detector->threshold_i2) {
 8001934:	e00c      	b.n	8001950 <QRSDetector_Detect+0x338>
            } else {
                qrs_flags[i] = 0;
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800193a:	4413      	add	r3, r2
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
            if (integrated > detector->threshold_i2) {
 8001940:	e006      	b.n	8001950 <QRSDetector_Detect+0x338>
            }
        } else {
            qrs_flags[i] = 0;
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001946:	4413      	add	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e000      	b.n	8001950 <QRSDetector_Detect+0x338>
                if (time_since_last < QRS_TWAVE_PERIOD && detector->last_qrs_slope > 0) {
 800194e:	bf00      	nop
        }

        detector->sample_count++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    for (uint32_t i = 0; i < QRS_10S_SAMPLES; i++) {
 800195e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001960:	3301      	adds	r3, #1
 8001962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001966:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800196a:	f4ff ae67 	bcc.w	800163c <QRSDetector_Detect+0x24>
    }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3740      	adds	r7, #64	@ 0x40
 8001974:	46bd      	mov	sp, r7
 8001976:	bdb0      	pop	{r4, r5, r7, pc}
 8001978:	9999999a 	.word	0x9999999a
 800197c:	3fd99999 	.word	0x3fd99999
 8001980:	33333333 	.word	0x33333333
 8001984:	3fe33333 	.word	0x3fe33333
 8001988:	cccccccd 	.word	0xcccccccd
 800198c:	3ff4cccc 	.word	0x3ff4cccc
 8001990:	51eb851f 	.word	0x51eb851f

08001994 <derivative>:

/* Private definitions ----------------------------------------------- */
static int32_t derivative(QRSDetector* detector, int32_t filtered)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 4; i > 0; i--) {
 800199e:	2304      	movs	r3, #4
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e00b      	b.n	80019bc <derivative+0x28>
        detector->deriv_buffer[i] = detector->deriv_buffer[i - 1];
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	1e59      	subs	r1, r3, #1
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 4; i > 0; i--) {
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <derivative+0x10>
    }
    detector->deriv_buffer[0] = filtered;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	601a      	str	r2, [r3, #0]

    // Five-point derivative (based on Pan-Tompkins)
    int32_t deriv = (1 / 8) * (-detector->deriv_buffer[4] - 2 * detector->deriv_buffer[3] + 2 * detector->deriv_buffer[1] + detector->deriv_buffer[0]);
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
    return deriv;
 80019cc:	68bb      	ldr	r3, [r7, #8]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <squaring>:

static int32_t squaring(int32_t deriv)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
    return deriv * deriv;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	fb03 f303 	mul.w	r3, r3, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <moving_window_integration>:

static int32_t moving_window_integration(QRSDetector* detector, int32_t squared)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
    detector->integ_buffer[detector->integ_index] = squared;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
    detector->integ_index = (detector->integ_index + 1) % QRS_WINDOW_SIZE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <moving_window_integration+0x84>)
 8001a1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a1e:	1119      	asrs	r1, r3, #4
 8001a20:	17d3      	asrs	r3, r2, #31
 8001a22:	1ac9      	subs	r1, r1, r3
 8001a24:	460b      	mov	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1ad1      	subs	r1, r2, r3
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    int32_t sum = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	72fb      	strb	r3, [r7, #11]
 8001a3e:	e00b      	b.n	8001a58 <moving_window_integration+0x64>
        sum += detector->integ_buffer[i];
 8001a40:	7afb      	ldrb	r3, [r7, #11]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) {
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	3301      	adds	r3, #1
 8001a56:	72fb      	strb	r3, [r7, #11]
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	2b27      	cmp	r3, #39	@ 0x27
 8001a5c:	d9f0      	bls.n	8001a40 <moving_window_integration+0x4c>
    }
    return sum / QRS_WINDOW_SIZE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <moving_window_integration+0x84>)
 8001a62:	fb82 1203 	smull	r1, r2, r2, r3
 8001a66:	1112      	asrs	r2, r2, #4
 8001a68:	17db      	asrs	r3, r3, #31
 8001a6a:	1ad3      	subs	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	66666667 	.word	0x66666667
 8001a7c:	00000000 	.word	0x00000000

08001a80 <update_thresholds>:

static void update_thresholds(QRSDetector* detector, int32_t peak, uint8_t is_qrs)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	71fb      	strb	r3, [r7, #7]
    if (is_qrs) {
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d028      	beq.n	8001ae6 <update_thresholds+0x66>
        detector->signal_level = 0.125 * peak + 0.875 * detector->signal_level;
 8001a94:	68b8      	ldr	r0, [r7, #8]
 8001a96:	f7fe fe23 	bl	80006e0 <__aeabi_i2d>
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001aa2:	f7fe fba1 	bl	80001e8 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4614      	mov	r4, r2
 8001aac:	461d      	mov	r5, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fe13 	bl	80006e0 <__aeabi_i2d>
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	4b42      	ldr	r3, [pc, #264]	@ (8001bc8 <update_thresholds+0x148>)
 8001ac0:	f7fe fb92 	bl	80001e8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fcbc 	bl	8000448 <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe fe6c 	bl	80007b4 <__aeabi_d2iz>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001ae4:	e027      	b.n	8001b36 <update_thresholds+0xb6>
    } else {
        detector->noise_level = 0.125 * peak + 0.875 * detector->noise_level;
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7fe fdfa 	bl	80006e0 <__aeabi_i2d>
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001af4:	f7fe fb78 	bl	80001e8 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4614      	mov	r4, r2
 8001afe:	461d      	mov	r5, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fdea 	bl	80006e0 <__aeabi_i2d>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc8 <update_thresholds+0x148>)
 8001b12:	f7fe fb69 	bl	80001e8 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fc93 	bl	8000448 <__adddf3>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7fe fe43 	bl	80007b4 <__aeabi_d2iz>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    }

    detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fdcf 	bl	80006e0 <__aeabi_i2d>
 8001b42:	4604      	mov	r4, r0
 8001b44:	460d      	mov	r5, r1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fdc3 	bl	80006e0 <__aeabi_i2d>
 8001b5a:	a317      	add	r3, pc, #92	@ (adr r3, 8001bb8 <update_thresholds+0x138>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb42 	bl	80001e8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fc6c 	bl	8000448 <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7fe fe1c 	bl	80007b4 <__aeabi_d2iz>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fda8 	bl	80006e0 <__aeabi_i2d>
 8001b90:	a30b      	add	r3, pc, #44	@ (adr r3, 8001bc0 <update_thresholds+0x140>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fb27 	bl	80001e8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe fe07 	bl	80007b4 <__aeabi_d2iz>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	9999999a 	.word	0x9999999a
 8001bbc:	3fd99999 	.word	0x3fd99999
 8001bc0:	33333333 	.word	0x33333333
 8001bc4:	3fe33333 	.word	0x3fe33333
 8001bc8:	3fec0000 	.word	0x3fec0000
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <update_rr_intervals>:

static void update_rr_intervals(QRSDetector* detector, uint32_t rr)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    detector->rr_intervals[detector->rr_index] = rr;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	3334      	adds	r3, #52	@ 0x34
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	605a      	str	r2, [r3, #4]
    detector->rr_index = (detector->rr_index + 1) % 8;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	425a      	negs	r2, r3
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	f002 0207 	and.w	r2, r2, #7
 8001bfe:	bf58      	it	pl
 8001c00:	4253      	negpl	r3, r2
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
    if (detector->rr_count < 8) {
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d807      	bhi.n	8001c24 <update_rr_intervals+0x54>
        detector->rr_count++;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    }

    uint32_t sum1 = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	74fb      	strb	r3, [r7, #19]
 8001c2c:	e00b      	b.n	8001c46 <update_rr_intervals+0x76>
        sum1 += detector->rr_intervals[i];
 8001c2e:	7cfb      	ldrb	r3, [r7, #19]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	3334      	adds	r3, #52	@ 0x34
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001c40:	7cfb      	ldrb	r3, [r7, #19]
 8001c42:	3301      	adds	r3, #1
 8001c44:	74fb      	strb	r3, [r7, #19]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8001c4c:	7cfa      	ldrb	r2, [r7, #19]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3ed      	bcc.n	8001c2e <update_rr_intervals+0x5e>
    }
    detector->rr_average1 = sum1 / detector->rr_count;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8001c58:	461a      	mov	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

    uint32_t sum2 = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
    uint8_t count2 = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	72bb      	strb	r3, [r7, #10]
 8001c72:	e042      	b.n	8001cfa <update_rr_intervals+0x12a>
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 8001c74:	7abb      	ldrb	r3, [r7, #10]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	3334      	adds	r3, #52	@ 0x34
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	685c      	ldr	r4, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fd1a 	bl	80006c0 <__aeabi_ui2d>
 8001c8c:	a328      	add	r3, pc, #160	@ (adr r3, 8001d30 <update_rr_intervals+0x160>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	f7fe faa9 	bl	80001e8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe fdb1 	bl	8000804 <__aeabi_d2uiz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	429c      	cmp	r4, r3
 8001ca6:	d325      	bcc.n	8001cf4 <update_rr_intervals+0x124>
            detector->rr_intervals[i] <= (uint32_t)(QRS_RR_LIMIT_HIGH * detector->rr_average1)) {
 8001ca8:	7abb      	ldrb	r3, [r7, #10]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	3334      	adds	r3, #52	@ 0x34
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	685c      	ldr	r4, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fd00 	bl	80006c0 <__aeabi_ui2d>
 8001cc0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001d38 <update_rr_intervals+0x168>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fa8f 	bl	80001e8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe fd97 	bl	8000804 <__aeabi_d2uiz>
 8001cd6:	4603      	mov	r3, r0
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 8001cd8:	429c      	cmp	r4, r3
 8001cda:	d80b      	bhi.n	8001cf4 <update_rr_intervals+0x124>
            sum2 += detector->rr_intervals[i];
 8001cdc:	7abb      	ldrb	r3, [r7, #10]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	3334      	adds	r3, #52	@ 0x34
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
            count2++;
 8001cee:	7afb      	ldrb	r3, [r7, #11]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001cf4:	7abb      	ldrb	r3, [r7, #10]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	72bb      	strb	r3, [r7, #10]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8001d00:	7aba      	ldrb	r2, [r7, #10]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d3b6      	bcc.n	8001c74 <update_rr_intervals+0xa4>
        }
    }
    detector->rr_average2 = (count2 > 0) ? (sum2 / count2) : detector->rr_average1;
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <update_rr_intervals+0x146>
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	e002      	b.n	8001d1c <update_rr_intervals+0x14c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
}
 8001d22:	bf00      	nop
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	d70a3d71 	.word	0xd70a3d71
 8001d34:	3fed70a3 	.word	0x3fed70a3
 8001d38:	28f5c28f 	.word	0x28f5c28f
 8001d3c:	3ff28f5c 	.word	0x3ff28f5c

08001d40 <calculate_slope>:

static int32_t calculate_slope(QRSDetector* detector)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    int32_t slope = detector->deriv_buffer[0] - detector->deriv_buffer[2];
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	60fb      	str	r3, [r7, #12]
    return (slope > 0) ? slope : -slope;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bfb8      	it	lt
 8001d5a:	425b      	neglt	r3, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <HAL_MspInit+0x4c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <HAL_MspInit+0x4c>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <HAL_MspInit+0x4c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_MspInit+0x4c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <HAL_MspInit+0x4c>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_MspInit+0x4c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001da6:	2007      	movs	r0, #7
 8001da8:	f000 ffd8 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	@ 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8001e94 <HAL_ADC_MspInit+0xdc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d157      	bne.n	8001e8a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_ADC_MspInit+0xe0>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e98 <HAL_ADC_MspInit+0xe0>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dea:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <HAL_ADC_MspInit+0xe0>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <HAL_ADC_MspInit+0xe0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a26      	ldr	r2, [pc, #152]	@ (8001e98 <HAL_ADC_MspInit+0xe0>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_ADC_MspInit+0xe0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e16:	2303      	movs	r3, #3
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	481d      	ldr	r0, [pc, #116]	@ (8001e9c <HAL_ADC_MspInit+0xe4>)
 8001e26:	f001 fb4b 	bl	80034c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea4 <HAL_ADC_MspInit+0xec>)
 8001e2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e42:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e6e:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e70:	f000 ffb6 	bl	8002de0 <HAL_DMA_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e7a:	f7ff fb5b 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e82:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_ADC_MspInit+0xe8>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40012000 	.word	0x40012000
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	20002d0c 	.word	0x20002d0c
 8001ea4:	40026410 	.word	0x40026410

08001ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d115      	bne.n	8001ee6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	201c      	movs	r0, #28
 8001edc:	f000 ff49 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ee0:	201c      	movs	r0, #28
 8001ee2:	f000 ff62 	bl	8002daa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_UART_MspInit+0x84>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12b      	bne.n	8001f6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_UART_MspInit+0x88>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <HAL_UART_MspInit+0x88>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_UART_MspInit+0x88>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <HAL_UART_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a10      	ldr	r2, [pc, #64]	@ (8001f7c <HAL_UART_MspInit+0x88>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_UART_MspInit+0x88>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f4e:	230c      	movs	r3, #12
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <HAL_UART_MspInit+0x8c>)
 8001f6a:	f001 faa9 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	@ 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40004400 	.word	0x40004400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020000 	.word	0x40020000

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <NMI_Handler+0x4>

08001f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001fda:	f000 f90f 	bl	80021fc <HAL_IncTick>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
  // Use raw ADC value directly
  uint16_t raw_value = (uint16_t)ADC_value;
 8001fea:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <TIM2_IRQHandler+0xc0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	81fb      	strh	r3, [r7, #14]

  // Apply bandpass filter to get filtered signal
  int32_t bandpass = BandpassFilter_Apply(&bandpass_filter, raw_value);
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	482c      	ldr	r0, [pc, #176]	@ (80020a8 <TIM2_IRQHandler+0xc4>)
 8001ff6:	f7fe ff5f 	bl	8000eb8 <BandpassFilter_Apply>
 8001ffa:	60b8      	str	r0, [r7, #8]

  // Store filtered value for the first 10 seconds
  if (first_10s_count < 2000) {
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <TIM2_IRQHandler+0xc8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002004:	d217      	bcs.n	8002036 <TIM2_IRQHandler+0x52>
    first_10s_filtered[first_10s_count] = bandpass;
 8002006:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <TIM2_IRQHandler+0xc8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4929      	ldr	r1, [pc, #164]	@ (80020b0 <TIM2_IRQHandler+0xcc>)
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    first_10s_count++;
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <TIM2_IRQHandler+0xc8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	4a24      	ldr	r2, [pc, #144]	@ (80020ac <TIM2_IRQHandler+0xc8>)
 800201a:	6013      	str	r3, [r2, #0]
    if (first_10s_count == 2000) {
 800201c:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <TIM2_IRQHandler+0xc8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002024:	d107      	bne.n	8002036 <TIM2_IRQHandler+0x52>
      // Detect QRS on the first 10 seconds of filtered data
      QRSDetector_Detect(&qrs_detector, first_10s_filtered, first_10s_qrs_flags);
 8002026:	4a23      	ldr	r2, [pc, #140]	@ (80020b4 <TIM2_IRQHandler+0xd0>)
 8002028:	4921      	ldr	r1, [pc, #132]	@ (80020b0 <TIM2_IRQHandler+0xcc>)
 800202a:	4823      	ldr	r0, [pc, #140]	@ (80020b8 <TIM2_IRQHandler+0xd4>)
 800202c:	f7ff faf4 	bl	8001618 <QRSDetector_Detect>
      first_10s_ready = 1;
 8002030:	4b22      	ldr	r3, [pc, #136]	@ (80020bc <TIM2_IRQHandler+0xd8>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
    }
  }

  // Store raw and filtered values into Circular Buffer
  // Each sample: 2 bytes for raw_value, 2 bytes for bandpass
  uint8_t raw_high_byte = (raw_value >> 8) & 0xFF;
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	b29b      	uxth	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	71fb      	strb	r3, [r7, #7]
  uint8_t raw_low_byte = raw_value & 0xFF;
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	71bb      	strb	r3, [r7, #6]
  uint8_t bp_high_byte = (bandpass >> 8) & 0xFF;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	121b      	asrs	r3, r3, #8
 800204a:	b2db      	uxtb	r3, r3
 800204c:	717b      	strb	r3, [r7, #5]
  uint8_t bp_low_byte = bandpass & 0xFF;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	713b      	strb	r3, [r7, #4]

  cb_write(&adc_buffer, &raw_high_byte, 1);
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	2201      	movs	r2, #1
 8002058:	4619      	mov	r1, r3
 800205a:	4819      	ldr	r0, [pc, #100]	@ (80020c0 <TIM2_IRQHandler+0xdc>)
 800205c:	f7fe fddb 	bl	8000c16 <cb_write>
  cb_write(&adc_buffer, &raw_low_byte, 1);
 8002060:	1dbb      	adds	r3, r7, #6
 8002062:	2201      	movs	r2, #1
 8002064:	4619      	mov	r1, r3
 8002066:	4816      	ldr	r0, [pc, #88]	@ (80020c0 <TIM2_IRQHandler+0xdc>)
 8002068:	f7fe fdd5 	bl	8000c16 <cb_write>
  cb_write(&adc_buffer, &bp_high_byte, 1);
 800206c:	1d7b      	adds	r3, r7, #5
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	4813      	ldr	r0, [pc, #76]	@ (80020c0 <TIM2_IRQHandler+0xdc>)
 8002074:	f7fe fdcf 	bl	8000c16 <cb_write>
  cb_write(&adc_buffer, &bp_low_byte, 1);
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2201      	movs	r2, #1
 800207c:	4619      	mov	r1, r3
 800207e:	4810      	ldr	r0, [pc, #64]	@ (80020c0 <TIM2_IRQHandler+0xdc>)
 8002080:	f7fe fdc9 	bl	8000c16 <cb_write>

  // Check the amount of data in the buffer
  if (cb_data_count(&adc_buffer) >= 256) // 256 bytes = 64 samples (each sample 4 bytes: 2 bytes raw + 2 bytes bandpass)
 8002084:	480e      	ldr	r0, [pc, #56]	@ (80020c0 <TIM2_IRQHandler+0xdc>)
 8002086:	f7fe fe14 	bl	8000cb2 <cb_data_count>
 800208a:	4603      	mov	r3, r0
 800208c:	2bff      	cmp	r3, #255	@ 0xff
 800208e:	d902      	bls.n	8002096 <TIM2_IRQHandler+0xb2>
  {
    send_flag = 1; // Set flag to send data in main
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <TIM2_IRQHandler+0xe0>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
  }

  HAL_TIM_IRQHandler(&htim2);
 8002096:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <TIM2_IRQHandler+0xe4>)
 8002098:	f002 f8e0 	bl	800425c <HAL_TIM_IRQHandler>
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20002f2c 	.word	0x20002f2c
 80020a8:	20000030 	.word	0x20000030
 80020ac:	20002cbc 	.word	0x20002cbc
 80020b0:	200005ac 	.word	0x200005ac
 80020b4:	200024ec 	.word	0x200024ec
 80020b8:	20000460 	.word	0x20000460
 80020bc:	20002cc0 	.word	0x20002cc0
 80020c0:	20000248 	.word	0x20000248
 80020c4:	20002f28 	.word	0x20002f28
 80020c8:	20002d6c 	.word	0x20002d6c

080020cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <DMA2_Stream0_IRQHandler+0x10>)
 80020d2:	f000 ff8b 	bl	8002fec <HAL_DMA_IRQHandler>
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20002d0c 	.word	0x20002d0c

080020e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <SystemInit+0x20>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <SystemInit+0x20>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800213c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002108:	f7ff ffea 	bl	80020e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	@ (8002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	@ (8002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	@ (8002150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002132:	f003 f839 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe ff33 	bl	8000fa0 <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800213c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002148:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 800214c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002150:	20002f34 	.word	0x20002f34

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <HAL_Init+0x40>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_Init+0x40>)
 800216e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	@ (8002198 <HAL_Init+0x40>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 fdeb 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 f808 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff fdec 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fe03 	bl	8002dc6 <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 fdcb 	bl	8002d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	@ (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000008 	.word	0x20000008
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20002f30 	.word	0x20002f30

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20002f30 	.word	0x20002f30

0800223c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e033      	b.n	80022ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fdac 	bl	8001db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002282:	f023 0302 	bic.w	r3, r3, #2
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fb16 	bl	80028c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_ADC_Start_IT+0x1a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0a1      	b.n	8002422 <HAL_ADC_Start_IT+0x15e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d018      	beq.n	8002326 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002304:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_ADC_Start_IT+0x16c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a4a      	ldr	r2, [pc, #296]	@ (8002434 <HAL_ADC_Start_IT+0x170>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9a      	lsrs	r2, r3, #18
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002318:	e002      	b.n	8002320 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d169      	bne.n	8002408 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800235e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002372:	d106      	bne.n	8002382 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	f023 0206 	bic.w	r2, r3, #6
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <HAL_ADC_Start_IT+0x174>)
 8002392:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800239c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023ac:	f043 0320 	orr.w	r3, r3, #32
 80023b0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d129      	bne.n	8002420 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e020      	b.n	8002420 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a16      	ldr	r2, [pc, #88]	@ (800243c <HAL_ADC_Start_IT+0x178>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d11b      	bne.n	8002420 <HAL_ADC_Start_IT+0x15c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d114      	bne.n	8002420 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	e00b      	b.n	8002420 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0210 	orr.w	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000
 8002434:	431bde83 	.word	0x431bde83
 8002438:	40012300 	.word	0x40012300
 800243c:	40012000 	.word	0x40012000

08002440 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADC_Start_DMA+0x1e>
 800245a:	2302      	movs	r3, #2
 800245c:	e0ce      	b.n	80025fc <HAL_ADC_Start_DMA+0x1bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d018      	beq.n	80024a6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002484:	4b5f      	ldr	r3, [pc, #380]	@ (8002604 <HAL_ADC_Start_DMA+0x1c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a5f      	ldr	r2, [pc, #380]	@ (8002608 <HAL_ADC_Start_DMA+0x1c8>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0c9a      	lsrs	r2, r3, #18
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002498:	e002      	b.n	80024a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3b01      	subs	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f9      	bne.n	800249a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b4:	d107      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024c4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f040 8086 	bne.w	80025e2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002500:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002514:	d106      	bne.n	8002524 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f023 0206 	bic.w	r2, r3, #6
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	645a      	str	r2, [r3, #68]	@ 0x44
 8002522:	e002      	b.n	800252a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002532:	4b36      	ldr	r3, [pc, #216]	@ (800260c <HAL_ADC_Start_DMA+0x1cc>)
 8002534:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253a:	4a35      	ldr	r2, [pc, #212]	@ (8002610 <HAL_ADC_Start_DMA+0x1d0>)
 800253c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002542:	4a34      	ldr	r2, [pc, #208]	@ (8002614 <HAL_ADC_Start_DMA+0x1d4>)
 8002544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	4a33      	ldr	r2, [pc, #204]	@ (8002618 <HAL_ADC_Start_DMA+0x1d8>)
 800254c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002556:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002566:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002576:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	334c      	adds	r3, #76	@ 0x4c
 8002582:	4619      	mov	r1, r3
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f000 fcd8 	bl	8002f3c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10f      	bne.n	80025b8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d129      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	e020      	b.n	80025fa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a17      	ldr	r2, [pc, #92]	@ (800261c <HAL_ADC_Start_DMA+0x1dc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d11b      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1ba>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d114      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e00b      	b.n	80025fa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f043 0210 	orr.w	r2, r3, #16
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000000 	.word	0x20000000
 8002608:	431bde83 	.word	0x431bde83
 800260c:	40012300 	.word	0x40012300
 8002610:	08002ab9 	.word	0x08002ab9
 8002614:	08002b73 	.word	0x08002b73
 8002618:	08002b8f 	.word	0x08002b8f
 800261c:	40012000 	.word	0x40012000

08002620 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e113      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x244>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d925      	bls.n	80026d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4403      	add	r3, r0
 80026c6:	3b1e      	subs	r3, #30
 80026c8:	409a      	lsls	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	e022      	b.n	800271a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	2207      	movs	r2, #7
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	4603      	mov	r3, r0
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4403      	add	r3, r0
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d824      	bhi.n	800276c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b05      	subs	r3, #5
 8002734:	221f      	movs	r2, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b05      	subs	r3, #5
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34
 800276a:	e04c      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d824      	bhi.n	80027be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b23      	subs	r3, #35	@ 0x23
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b23      	subs	r3, #35	@ 0x23
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80027bc:	e023      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b41      	subs	r3, #65	@ 0x41
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b41      	subs	r3, #65	@ 0x41
 80027fa:	fa00 f203 	lsl.w	r2, r0, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002806:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <HAL_ADC_ConfigChannel+0x250>)
 8002808:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a28      	ldr	r2, [pc, #160]	@ (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10f      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d10b      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12b      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x1f4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b11      	cmp	r3, #17
 800284e:	d122      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002872:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <HAL_ADC_ConfigChannel+0x260>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	0c9a      	lsrs	r2, r3, #18
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002888:	e002      	b.n	8002890 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3b01      	subs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f9      	bne.n	800288a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012300 	.word	0x40012300
 80028b0:	40012000 	.word	0x40012000
 80028b4:	10000012 	.word	0x10000012
 80028b8:	20000000 	.word	0x20000000
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c8:	4b79      	ldr	r3, [pc, #484]	@ (8002ab0 <ADC_Init+0x1f0>)
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800293a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	4a58      	ldr	r2, [pc, #352]	@ (8002ab4 <ADC_Init+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e00f      	b.n	80029be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0202 	bic.w	r2, r2, #2
 80029cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
 80029d8:	005a      	lsls	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	3b01      	subs	r3, #1
 8002a18:	035a      	lsls	r2, r3, #13
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e007      	b.n	8002a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	051a      	lsls	r2, r3, #20
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a76:	025a      	lsls	r2, r3, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	029a      	lsls	r2, r3, #10
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40012300 	.word	0x40012300
 8002ab4:	0f000001 	.word	0x0f000001

08002ab8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d13c      	bne.n	8002b4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d12b      	bne.n	8002b44 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d127      	bne.n	8002b44 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d119      	bne.n	8002b44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0220 	bic.w	r2, r2, #32
 8002b1e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fd6b 	bl	8002620 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b4a:	e00e      	b.n	8002b6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff fd75 	bl	8002648 <HAL_ADC_ErrorCallback>
}
 8002b5e:	e004      	b.n	8002b6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff fd57 	bl	8002634 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2240      	movs	r2, #64	@ 0x40
 8002ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f043 0204 	orr.w	r2, r3, #4
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff fd4a 	bl	8002648 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bee:	4a04      	ldr	r2, [pc, #16]	@ (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	60d3      	str	r3, [r2, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4907      	ldr	r1, [pc, #28]	@ (8002c58 <__NVIC_EnableIRQ+0x38>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	@ (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	@ (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	@ 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f7ff ff8e 	bl	8002c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff29 	bl	8002bbc <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff3e 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff8e 	bl	8002cb0 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5d 	bl	8002c5c <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff31 	bl	8002c20 <__NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ffa2 	bl	8002d18 <SysTick_Config>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff fa1a 	bl	8002224 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e099      	b.n	8002f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1c:	e00f      	b.n	8002e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e1e:	f7ff fa01 	bl	8002224 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d908      	bls.n	8002e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2203      	movs	r2, #3
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e078      	b.n	8002f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e8      	bne.n	8002e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4b38      	ldr	r3, [pc, #224]	@ (8002f38 <HAL_DMA_Init+0x158>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d107      	bne.n	8002ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0307 	bic.w	r3, r3, #7
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d117      	bne.n	8002f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fa6f 	bl	80033c8 <DMA_CheckFifoParam>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002efe:	2301      	movs	r3, #1
 8002f00:	e016      	b.n	8002f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa26 	bl	800335c <DMA_CalcBaseAndBitshift>
 8002f10:	4603      	mov	r3, r0
 8002f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	223f      	movs	r2, #63	@ 0x3f
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	f010803f 	.word	0xf010803f

08002f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_DMA_Start_IT+0x26>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e040      	b.n	8002fe4 <HAL_DMA_Start_IT+0xa8>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d12f      	bne.n	8002fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f9b8 	bl	8003300 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	223f      	movs	r2, #63	@ 0x3f
 8002f96:	409a      	lsls	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0216 	orr.w	r2, r2, #22
 8002faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e005      	b.n	8002fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8003234 <HAL_DMA_IRQHandler+0x248>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a8e      	ldr	r2, [pc, #568]	@ (8003238 <HAL_DMA_IRQHandler+0x24c>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	2208      	movs	r2, #8
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	2208      	movs	r2, #8
 8003046:	409a      	lsls	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d012      	beq.n	800308e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307a:	2201      	movs	r2, #1
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	f043 0202 	orr.w	r2, r3, #2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	2204      	movs	r2, #4
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d012      	beq.n	80030c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b0:	2204      	movs	r2, #4
 80030b2:	409a      	lsls	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	2210      	movs	r2, #16
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d043      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d03c      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	2210      	movs	r2, #16
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d018      	beq.n	800312e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d024      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
 800311a:	e01f      	b.n	800315c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01b      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
 800312c:	e016      	b.n	800315c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d107      	bne.n	800314c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0208 	bic.w	r2, r2, #8
 800314a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	2220      	movs	r2, #32
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 808f 	beq.w	800328c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8087 	beq.w	800328c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003182:	2220      	movs	r2, #32
 8003184:	409a      	lsls	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b05      	cmp	r3, #5
 8003194:	d136      	bne.n	8003204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0216 	bic.w	r2, r2, #22
 80031a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <HAL_DMA_IRQHandler+0x1da>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0208 	bic.w	r2, r2, #8
 80031d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	223f      	movs	r2, #63	@ 0x3f
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d07e      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
        }
        return;
 8003202:	e079      	b.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01d      	beq.n	800324e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003224:	2b00      	cmp	r3, #0
 8003226:	d031      	beq.n	800328c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e02c      	b.n	800328c <HAL_DMA_IRQHandler+0x2a0>
 8003232:	bf00      	nop
 8003234:	20000000 	.word	0x20000000
 8003238:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d023      	beq.n	800328c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
 800324c:	e01e      	b.n	800328c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10f      	bne.n	800327c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0210 	bic.w	r2, r2, #16
 800326a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003290:	2b00      	cmp	r3, #0
 8003292:	d032      	beq.n	80032fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d022      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2205      	movs	r2, #5
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d307      	bcc.n	80032d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f2      	bne.n	80032b8 <HAL_DMA_IRQHandler+0x2cc>
 80032d2:	e000      	b.n	80032d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
 80032f6:	e000      	b.n	80032fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80032f8:	bf00      	nop
    }
  }
}
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800331c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b40      	cmp	r3, #64	@ 0x40
 800332c:	d108      	bne.n	8003340 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800333e:	e007      	b.n	8003350 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3b10      	subs	r3, #16
 800336c:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <DMA_CalcBaseAndBitshift+0x64>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003376:	4a13      	ldr	r2, [pc, #76]	@ (80033c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d909      	bls.n	800339e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	1d1a      	adds	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	659a      	str	r2, [r3, #88]	@ 0x58
 800339c:	e007      	b.n	80033ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	aaaaaaab 	.word	0xaaaaaaab
 80033c4:	0800523c 	.word	0x0800523c

080033c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11f      	bne.n	8003422 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d856      	bhi.n	8003496 <DMA_CheckFifoParam+0xce>
 80033e8:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <DMA_CheckFifoParam+0x28>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003413 	.word	0x08003413
 80033f8:	08003401 	.word	0x08003401
 80033fc:	08003497 	.word	0x08003497
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d046      	beq.n	800349a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003410:	e043      	b.n	800349a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800341a:	d140      	bne.n	800349e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003420:	e03d      	b.n	800349e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342a:	d121      	bne.n	8003470 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d837      	bhi.n	80034a2 <DMA_CheckFifoParam+0xda>
 8003432:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <DMA_CheckFifoParam+0x70>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	08003449 	.word	0x08003449
 800343c:	0800344f 	.word	0x0800344f
 8003440:	08003449 	.word	0x08003449
 8003444:	08003461 	.word	0x08003461
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      break;
 800344c:	e030      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d025      	beq.n	80034a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345e:	e022      	b.n	80034a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003468:	d11f      	bne.n	80034aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800346e:	e01c      	b.n	80034aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d903      	bls.n	800347e <DMA_CheckFifoParam+0xb6>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d003      	beq.n	8003484 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800347c:	e018      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
      break;
 8003482:	e015      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e00b      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      break;
 8003496:	bf00      	nop
 8003498:	e00a      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e008      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      break;
 800349e:	bf00      	nop
 80034a0:	e006      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
 80034a4:	e004      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      break;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ae:	bf00      	nop
    }
  } 
  
  return status; 
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	@ 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	e159      	b.n	8003790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034dc:	2201      	movs	r2, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	f040 8148 	bne.w	800378a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d005      	beq.n	8003512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350e:	2b02      	cmp	r3, #2
 8003510:	d130      	bne.n	8003574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2203      	movs	r2, #3
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 0201 	and.w	r2, r3, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b03      	cmp	r3, #3
 800357e:	d017      	beq.n	80035b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d123      	bne.n	8003604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	69b9      	ldr	r1, [r7, #24]
 8003600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a2 	beq.w	800378a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b57      	ldr	r3, [pc, #348]	@ (80037a8 <HAL_GPIO_Init+0x2e8>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_GPIO_Init+0x2e8>)
 8003650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003654:	6453      	str	r3, [r2, #68]	@ 0x44
 8003656:	4b54      	ldr	r3, [pc, #336]	@ (80037a8 <HAL_GPIO_Init+0x2e8>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003662:	4a52      	ldr	r2, [pc, #328]	@ (80037ac <HAL_GPIO_Init+0x2ec>)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	3302      	adds	r3, #2
 800366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	220f      	movs	r2, #15
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a49      	ldr	r2, [pc, #292]	@ (80037b0 <HAL_GPIO_Init+0x2f0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d019      	beq.n	80036c2 <HAL_GPIO_Init+0x202>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a48      	ldr	r2, [pc, #288]	@ (80037b4 <HAL_GPIO_Init+0x2f4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_Init+0x1fe>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a47      	ldr	r2, [pc, #284]	@ (80037b8 <HAL_GPIO_Init+0x2f8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_GPIO_Init+0x1fa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a46      	ldr	r2, [pc, #280]	@ (80037bc <HAL_GPIO_Init+0x2fc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <HAL_GPIO_Init+0x1f6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a45      	ldr	r2, [pc, #276]	@ (80037c0 <HAL_GPIO_Init+0x300>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_GPIO_Init+0x1f2>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e008      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036b2:	2307      	movs	r3, #7
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036b6:	2303      	movs	r3, #3
 80036b8:	e004      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036c2:	2300      	movs	r3, #0
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f002 0203 	and.w	r2, r2, #3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4093      	lsls	r3, r2
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d4:	4935      	ldr	r1, [pc, #212]	@ (80037ac <HAL_GPIO_Init+0x2ec>)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	3302      	adds	r3, #2
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036e2:	4b38      	ldr	r3, [pc, #224]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003706:	4a2f      	ldr	r2, [pc, #188]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800370c:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003730:	4a24      	ldr	r2, [pc, #144]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003736:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800375a:	4a1a      	ldr	r2, [pc, #104]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003760:	4b18      	ldr	r3, [pc, #96]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003784:	4a0f      	ldr	r2, [pc, #60]	@ (80037c4 <HAL_GPIO_Init+0x304>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	f67f aea2 	bls.w	80034dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3724      	adds	r7, #36	@ 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	40020400 	.word	0x40020400
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40020c00 	.word	0x40020c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e267      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d075      	beq.n	80038d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037e6:	4b88      	ldr	r3, [pc, #544]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d00c      	beq.n	800380c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b85      	ldr	r3, [pc, #532]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d112      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fe:	4b82      	ldr	r3, [pc, #520]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05b      	beq.n	80038d0 <HAL_RCC_OscConfig+0x108>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d157      	bne.n	80038d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e242      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x74>
 800382e:	4b76      	ldr	r3, [pc, #472]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a75      	ldr	r2, [pc, #468]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x98>
 8003846:	4b70      	ldr	r3, [pc, #448]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6d      	ldr	r3, [pc, #436]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6c      	ldr	r2, [pc, #432]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 8003860:	4b69      	ldr	r3, [pc, #420]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a68      	ldr	r2, [pc, #416]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b66      	ldr	r3, [pc, #408]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fcd0 	bl	8002224 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe fccc 	bl	8002224 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	@ 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e207      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xc0>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fcbc 	bl	8002224 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fcb8 	bl	8002224 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e1f3      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b51      	ldr	r3, [pc, #324]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0xe8>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038de:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b44      	ldr	r3, [pc, #272]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1c7      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4937      	ldr	r1, [pc, #220]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b34      	ldr	r3, [pc, #208]	@ (8003a0c <HAL_RCC_OscConfig+0x244>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fe fc71 	bl	8002224 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7fe fc6d 	bl	8002224 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1a8      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4925      	ldr	r1, [pc, #148]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e015      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_RCC_OscConfig+0x244>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fe fc50 	bl	8002224 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7fe fc4c 	bl	8002224 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e187      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d036      	beq.n	8003a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe fc30 	bl	8002224 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fc2c 	bl	8002224 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e167      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80039dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x200>
 80039e6:	e01b      	b.n	8003a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fe fc19 	bl	8002224 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	e00e      	b.n	8003a14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f6:	f7fe fc15 	bl	8002224 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d907      	bls.n	8003a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e150      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470000 	.word	0x42470000
 8003a10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a14:	4b88      	ldr	r3, [pc, #544]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ea      	bne.n	80039f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8097 	beq.w	8003b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b81      	ldr	r3, [pc, #516]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	4b7d      	ldr	r3, [pc, #500]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	4a7c      	ldr	r2, [pc, #496]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b77      	ldr	r3, [pc, #476]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d118      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6a:	4b74      	ldr	r3, [pc, #464]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a73      	ldr	r2, [pc, #460]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fbd5 	bl	8002224 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fe fbd1 	bl	8002224 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e10c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4b6a      	ldr	r3, [pc, #424]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x2ea>
 8003aa4:	4b64      	ldr	r3, [pc, #400]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a63      	ldr	r2, [pc, #396]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x30c>
 8003aba:	4b5f      	ldr	r3, [pc, #380]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	4a5e      	ldr	r2, [pc, #376]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a5b      	ldr	r2, [pc, #364]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ad4:	4b58      	ldr	r3, [pc, #352]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	4a57      	ldr	r2, [pc, #348]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae0:	4b55      	ldr	r3, [pc, #340]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	4a54      	ldr	r2, [pc, #336]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fe fb96 	bl	8002224 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fe fb92 	bl	8002224 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0cb      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b12:	4b49      	ldr	r3, [pc, #292]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <HAL_RCC_OscConfig+0x334>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7fe fb80 	bl	8002224 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fe fb7c 	bl	8002224 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0b5      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	4a38      	ldr	r2, [pc, #224]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a1 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b66:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d05c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d141      	bne.n	8003bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe fb50 	bl	8002224 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fe fb4c 	bl	8002224 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e087      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	491b      	ldr	r1, [pc, #108]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fb25 	bl	8002224 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe fb21 	bl	8002224 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e05c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x416>
 8003bfc:	e054      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fe fb0e 	bl	8002224 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe fb0a 	bl	8002224 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e045      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x444>
 8003c2a:	e03d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e038      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x4ec>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d121      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d11a      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0cc      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b68      	ldr	r3, [pc, #416]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d90c      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b65      	ldr	r3, [pc, #404]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b63      	ldr	r3, [pc, #396]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0b8      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d0c:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a58      	ldr	r2, [pc, #352]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a52      	ldr	r2, [pc, #328]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d30:	4b50      	ldr	r3, [pc, #320]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	494d      	ldr	r1, [pc, #308]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d044      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d119      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e067      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b37      	ldr	r3, [pc, #220]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4934      	ldr	r1, [pc, #208]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da8:	f7fe fa3c 	bl	8002224 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7fe fa38 	bl	8002224 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e04f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d20c      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e032      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4916      	ldr	r1, [pc, #88]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2a:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	490e      	ldr	r1, [pc, #56]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e3e:	f000 f821 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e42:	4602      	mov	r2, r0
 8003e44:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	490a      	ldr	r1, [pc, #40]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	5ccb      	ldrb	r3, [r1, r3]
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a09      	ldr	r2, [pc, #36]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe f99c 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023c00 	.word	0x40023c00
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08005224 	.word	0x08005224
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	20000004 	.word	0x20000004

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e88:	b094      	sub	sp, #80	@ 0x50
 8003e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e9c:	4b79      	ldr	r3, [pc, #484]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	f200 80e1 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb6:	e0db      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b73      	ldr	r3, [pc, #460]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ebc:	e0db      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ebe:	4b73      	ldr	r3, [pc, #460]	@ (800408c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ec2:	e0d8      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ecc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ece:	4b6d      	ldr	r3, [pc, #436]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d063      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b6a      	ldr	r3, [pc, #424]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	f04f 0000 	mov.w	r0, #0
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	0159      	lsls	r1, r3, #5
 8003f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f08:	0150      	lsls	r0, r2, #5
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4621      	mov	r1, r4
 8003f10:	1a51      	subs	r1, r2, r1
 8003f12:	6139      	str	r1, [r7, #16]
 8003f14:	4629      	mov	r1, r5
 8003f16:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f28:	4659      	mov	r1, fp
 8003f2a:	018b      	lsls	r3, r1, #6
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f32:	4651      	mov	r1, sl
 8003f34:	018a      	lsls	r2, r1, #6
 8003f36:	4651      	mov	r1, sl
 8003f38:	ebb2 0801 	subs.w	r8, r2, r1
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f56:	4690      	mov	r8, r2
 8003f58:	4699      	mov	r9, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb18 0303 	adds.w	r3, r8, r3
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	462b      	mov	r3, r5
 8003f64:	eb49 0303 	adc.w	r3, r9, r3
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f76:	4629      	mov	r1, r5
 8003f78:	024b      	lsls	r3, r1, #9
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f80:	4621      	mov	r1, r4
 8003f82:	024a      	lsls	r2, r1, #9
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f94:	f7fc fc56 	bl	8000844 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa0:	e058      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	4611      	mov	r1, r2
 8003fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fce:	0150      	lsls	r0, r2, #5
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fda:	4649      	mov	r1, r9
 8003fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	00eb      	lsls	r3, r5, #3
 8004006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400a:	00e2      	lsls	r2, r4, #3
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
 8004010:	4643      	mov	r3, r8
 8004012:	18e3      	adds	r3, r4, r3
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	464b      	mov	r3, r9
 8004018:	eb45 0303 	adc.w	r3, r5, r3
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800402a:	4629      	mov	r1, r5
 800402c:	028b      	lsls	r3, r1, #10
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004034:	4621      	mov	r1, r4
 8004036:	028a      	lsls	r2, r1, #10
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403e:	2200      	movs	r2, #0
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	61fa      	str	r2, [r7, #28]
 8004044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004048:	f7fc fbfc 	bl	8000844 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4613      	mov	r3, r2
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800406e:	e002      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x204>)
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004078:	4618      	mov	r0, r3
 800407a:	3750      	adds	r7, #80	@ 0x50
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000000 	.word	0x20000000

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	@ (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	08005234 	.word	0x08005234

080040d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040d4:	f7ff ffdc 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0b5b      	lsrs	r3, r3, #13
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	@ (80040f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08005234 	.word	0x08005234

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e041      	b.n	800418e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd fec2 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fa7a 	bl	8004630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e044      	b.n	800423a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_TIM_Base_Start_IT+0xb0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041da:	d013      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <HAL_TIM_Base_Start_IT+0xb4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a19      	ldr	r2, [pc, #100]	@ (8004250 <HAL_TIM_Base_Start_IT+0xb8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <HAL_TIM_Base_Start_IT+0xbc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a16      	ldr	r2, [pc, #88]	@ (8004258 <HAL_TIM_Base_Start_IT+0xc0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d111      	bne.n	8004228 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b06      	cmp	r3, #6
 8004214:	d010      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	e007      	b.n	8004238 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000

0800425c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0202 	mvn.w	r2, #2
 8004290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f9a3 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f995 	bl	80045de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f9a6 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0204 	mvn.w	r2, #4
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f97d 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f96f 	bl	80045de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f980 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f957 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f949 	bl	80045de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f95a 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0210 	mvn.w	r2, #16
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2208      	movs	r2, #8
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f931 	bl	80045f2 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f923 	bl	80045de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f934 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0201 	mvn.w	r2, #1
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f901 	bl	80045ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fac0 	bl	800496c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f905 	bl	800461a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0220 	mvn.w	r2, #32
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa92 	bl	8004958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIM_ConfigClockSource+0x1c>
 8004454:	2302      	movs	r3, #2
 8004456:	e0b4      	b.n	80045c2 <HAL_TIM_ConfigClockSource+0x186>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800447e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004490:	d03e      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0xd4>
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004496:	f200 8087 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	f000 8086 	beq.w	80045ae <HAL_TIM_ConfigClockSource+0x172>
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a6:	d87f      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b70      	cmp	r3, #112	@ 0x70
 80044aa:	d01a      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0xa6>
 80044ac:	2b70      	cmp	r3, #112	@ 0x70
 80044ae:	d87b      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b60      	cmp	r3, #96	@ 0x60
 80044b2:	d050      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x11a>
 80044b4:	2b60      	cmp	r3, #96	@ 0x60
 80044b6:	d877      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 80044b8:	2b50      	cmp	r3, #80	@ 0x50
 80044ba:	d03c      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0xfa>
 80044bc:	2b50      	cmp	r3, #80	@ 0x50
 80044be:	d873      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 80044c0:	2b40      	cmp	r3, #64	@ 0x40
 80044c2:	d058      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x13a>
 80044c4:	2b40      	cmp	r3, #64	@ 0x40
 80044c6:	d86f      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 80044c8:	2b30      	cmp	r3, #48	@ 0x30
 80044ca:	d064      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x15a>
 80044cc:	2b30      	cmp	r3, #48	@ 0x30
 80044ce:	d86b      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d060      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x15a>
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d867      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05c      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x15a>
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d05a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x15a>
 80044e0:	e062      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f2:	f000 f9a3 	bl	800483c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]
      break;
 800450e:	e04f      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004520:	f000 f98c 	bl	800483c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004532:	609a      	str	r2, [r3, #8]
      break;
 8004534:	e03c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004542:	461a      	mov	r2, r3
 8004544:	f000 f900 	bl	8004748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2150      	movs	r1, #80	@ 0x50
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f959 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 8004554:	e02c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004562:	461a      	mov	r2, r3
 8004564:	f000 f91f 	bl	80047a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2160      	movs	r1, #96	@ 0x60
 800456e:	4618      	mov	r0, r3
 8004570:	f000 f949 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 8004574:	e01c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	461a      	mov	r2, r3
 8004584:	f000 f8e0 	bl	8004748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2140      	movs	r1, #64	@ 0x40
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f939 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 8004594:	e00c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f000 f930 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 80045a6:	e003      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e000      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3a      	ldr	r2, [pc, #232]	@ (800472c <TIM_Base_SetConfig+0xfc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00f      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464e:	d00b      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a37      	ldr	r2, [pc, #220]	@ (8004730 <TIM_Base_SetConfig+0x100>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a36      	ldr	r2, [pc, #216]	@ (8004734 <TIM_Base_SetConfig+0x104>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a35      	ldr	r2, [pc, #212]	@ (8004738 <TIM_Base_SetConfig+0x108>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d108      	bne.n	800467a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2b      	ldr	r2, [pc, #172]	@ (800472c <TIM_Base_SetConfig+0xfc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01b      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d017      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a28      	ldr	r2, [pc, #160]	@ (8004730 <TIM_Base_SetConfig+0x100>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a27      	ldr	r2, [pc, #156]	@ (8004734 <TIM_Base_SetConfig+0x104>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00f      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a26      	ldr	r2, [pc, #152]	@ (8004738 <TIM_Base_SetConfig+0x108>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a25      	ldr	r2, [pc, #148]	@ (800473c <TIM_Base_SetConfig+0x10c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a24      	ldr	r2, [pc, #144]	@ (8004740 <TIM_Base_SetConfig+0x110>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a23      	ldr	r2, [pc, #140]	@ (8004744 <TIM_Base_SetConfig+0x114>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <TIM_Base_SetConfig+0xfc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	611a      	str	r2, [r3, #16]
  }
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0201 	bic.w	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 030a 	bic.w	r3, r3, #10
 8004784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b087      	sub	sp, #28
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0210 	bic.w	r2, r3, #16
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	f043 0307 	orr.w	r3, r3, #7
 8004828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	431a      	orrs	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	609a      	str	r2, [r3, #8]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004890:	2302      	movs	r3, #2
 8004892:	e050      	b.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d013      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a18      	ldr	r2, [pc, #96]	@ (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a16      	ldr	r2, [pc, #88]	@ (800494c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a13      	ldr	r2, [pc, #76]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10c      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4313      	orrs	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40014000 	.word	0x40014000

08004958 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e042      	b.n	8004a18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fd faa4 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2224      	movs	r2, #36	@ 0x24
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f973 	bl	8004cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	@ 0x28
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d175      	bne.n	8004b2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Transmit+0x2c>
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e06e      	b.n	8004b2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2221      	movs	r2, #33	@ 0x21
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a5e:	f7fd fbe1 	bl	8002224 <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a78:	d108      	bne.n	8004a8c <HAL_UART_Transmit+0x6c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	e003      	b.n	8004a94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a94:	e02e      	b.n	8004af4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2180      	movs	r1, #128	@ 0x80
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f848 	bl	8004b36 <UART_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e03a      	b.n	8004b2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	e007      	b.n	8004ae6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1cb      	bne.n	8004a96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2140      	movs	r1, #64	@ 0x40
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f814 	bl	8004b36 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e006      	b.n	8004b2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e000      	b.n	8004b2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b46:	e03b      	b.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d037      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b50:	f7fd fb68 	bl	8002224 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	6a3a      	ldr	r2, [r7, #32]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e03a      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d023      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b80      	cmp	r3, #128	@ 0x80
 8004b7c:	d020      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d01d      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d116      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f81d 	bl	8004be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e00f      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d0b4      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b095      	sub	sp, #84	@ 0x54
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c10:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3314      	adds	r3, #20
 8004c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3314      	adds	r3, #20
 8004c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d119      	bne.n	8004c94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0310 	bic.w	r3, r3, #16
 8004c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c80:	61ba      	str	r2, [r7, #24]
 8004c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6979      	ldr	r1, [r7, #20]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ca2:	bf00      	nop
 8004ca4:	3754      	adds	r7, #84	@ 0x54
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb4:	b0c0      	sub	sp, #256	@ 0x100
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	ea40 0301 	orr.w	r3, r0, r1
 8004cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d08:	f021 010c 	bic.w	r1, r1, #12
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d16:	430b      	orrs	r3, r1
 8004d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	ea40 0301 	orr.w	r3, r0, r1
 8004d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f7c <UART_SetConfig+0x2cc>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d005      	beq.n	8004d50 <UART_SetConfig+0xa0>
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f80 <UART_SetConfig+0x2d0>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d104      	bne.n	8004d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7ff f9be 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 8004d54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d58:	e003      	b.n	8004d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7ff f9a5 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d6c:	f040 810c 	bne.w	8004f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d92:	4621      	mov	r1, r4
 8004d94:	eb12 0801 	adds.w	r8, r2, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb43 0901 	adc.w	r9, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db2:	4690      	mov	r8, r2
 8004db4:	4699      	mov	r9, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb18 0303 	adds.w	r3, r8, r3
 8004dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	eb49 0303 	adc.w	r3, r9, r3
 8004dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dde:	460b      	mov	r3, r1
 8004de0:	18db      	adds	r3, r3, r3
 8004de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004de4:	4613      	mov	r3, r2
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004df4:	f7fb fd26 	bl	8000844 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b61      	ldr	r3, [pc, #388]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	011c      	lsls	r4, r3, #4
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e20:	415b      	adcs	r3, r3
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e28:	4641      	mov	r1, r8
 8004e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb43 0b01 	adc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e48:	4692      	mov	sl, r2
 8004e4a:	469b      	mov	fp, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e56:	464b      	mov	r3, r9
 8004e58:	eb4b 0303 	adc.w	r3, fp, r3
 8004e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e74:	460b      	mov	r3, r1
 8004e76:	18db      	adds	r3, r3, r3
 8004e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	eb42 0303 	adc.w	r3, r2, r3
 8004e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e8a:	f7fb fcdb 	bl	8000844 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004e96:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2264      	movs	r2, #100	@ 0x64
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eaa:	4b36      	ldr	r3, [pc, #216]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004eac:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004eb8:	441c      	add	r4, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f30:	460b      	mov	r3, r1
 8004f32:	18db      	adds	r3, r3, r3
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f36:	4613      	mov	r3, r2
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f46:	f7fb fc7d 	bl	8000844 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	@ 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	3332      	adds	r3, #50	@ 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <UART_SetConfig+0x2d4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 0207 	and.w	r2, r3, #7
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f78:	e106      	b.n	8005188 <UART_SetConfig+0x4d8>
 8004f7a:	bf00      	nop
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	40011400 	.word	0x40011400
 8004f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	6239      	str	r1, [r7, #32]
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004faa:	4641      	mov	r1, r8
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	eb43 0501 	adc.w	r5, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	00eb      	lsls	r3, r5, #3
 8004fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc2:	00e2      	lsls	r2, r4, #3
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4643      	mov	r3, r8
 8004fca:	18e3      	adds	r3, r4, r3
 8004fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	eb45 0303 	adc.w	r3, r5, r3
 8004fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005000:	4621      	mov	r1, r4
 8005002:	008a      	lsls	r2, r1, #2
 8005004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005008:	f7fb fc1c 	bl	8000844 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4b60      	ldr	r3, [pc, #384]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005012:	fba3 2302 	umull	r2, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	011c      	lsls	r4, r3, #4
 800501a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	61b9      	str	r1, [r7, #24]
 8005034:	415b      	adcs	r3, r3
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6139      	str	r1, [r7, #16]
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005070:	464b      	mov	r3, r9
 8005072:	460a      	mov	r2, r1
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005086:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005094:	4649      	mov	r1, r9
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	4641      	mov	r1, r8
 800509a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509e:	4641      	mov	r1, r8
 80050a0:	008a      	lsls	r2, r1, #2
 80050a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050a6:	f7fb fbcd 	bl	8000844 <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	4b38      	ldr	r3, [pc, #224]	@ (8005194 <UART_SetConfig+0x4e4>)
 80050b2:	fba3 2301 	umull	r2, r3, r3, r1
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2264      	movs	r2, #100	@ 0x64
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	3332      	adds	r3, #50	@ 0x32
 80050c4:	4a33      	ldr	r2, [pc, #204]	@ (8005194 <UART_SetConfig+0x4e4>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d0:	441c      	add	r4, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80050da:	677a      	str	r2, [r7, #116]	@ 0x74
 80050dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050e0:	4642      	mov	r2, r8
 80050e2:	464b      	mov	r3, r9
 80050e4:	1891      	adds	r1, r2, r2
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	415b      	adcs	r3, r3
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f0:	4641      	mov	r1, r8
 80050f2:	1851      	adds	r1, r2, r1
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	4649      	mov	r1, r9
 80050f8:	414b      	adcs	r3, r1
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005108:	4659      	mov	r1, fp
 800510a:	00cb      	lsls	r3, r1, #3
 800510c:	4651      	mov	r1, sl
 800510e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005112:	4651      	mov	r1, sl
 8005114:	00ca      	lsls	r2, r1, #3
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	4603      	mov	r3, r0
 800511c:	4642      	mov	r2, r8
 800511e:	189b      	adds	r3, r3, r2
 8005120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005122:	464b      	mov	r3, r9
 8005124:	460a      	mov	r2, r1
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	663b      	str	r3, [r7, #96]	@ 0x60
 8005136:	667a      	str	r2, [r7, #100]	@ 0x64
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005144:	4649      	mov	r1, r9
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	4641      	mov	r1, r8
 800514a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514e:	4641      	mov	r1, r8
 8005150:	008a      	lsls	r2, r1, #2
 8005152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005156:	f7fb fb75 	bl	8000844 <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005160:	fba3 1302 	umull	r1, r3, r3, r2
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	2164      	movs	r1, #100	@ 0x64
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	3332      	adds	r3, #50	@ 0x32
 8005172:	4a08      	ldr	r2, [pc, #32]	@ (8005194 <UART_SetConfig+0x4e4>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4422      	add	r2, r4
 8005186:	609a      	str	r2, [r3, #8]
}
 8005188:	bf00      	nop
 800518a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800518e:	46bd      	mov	sp, r7
 8005190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005194:	51eb851f 	.word	0x51eb851f

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	@ (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	@ (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	@ (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	@ (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 f818 	bl	80051f0 <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	0800524c 	.word	0x0800524c
 80051e4:	0800524c 	.word	0x0800524c
 80051e8:	0800524c 	.word	0x0800524c
 80051ec:	08005250 	.word	0x08005250

080051f0 <_init>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr

080051fc <_fini>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr
