
QRS_ECG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005914  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005ab4  08005ab4  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b74  08005b74  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b74  08005b74  00006b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b7c  08005b7c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b7c  08005b7c  00006b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b80  08005b80  00006b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  2000005c  08005be0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  08005be0  000078a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f674  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002477  00000000  00000000  00016700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00018b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b05  00000000  00000000  000199b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d0  00000000  00000000  0001a4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122a0  00000000  00000000  00032c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a684  00000000  00000000  00044f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df5a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004174  00000000  00000000  000df5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000e3760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a9c 	.word	0x08005a9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005a9c 	.word	0x08005a9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <cb_init>:
 */
static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte);

/* Function definitions ----------------------------------------------- */
uint32_t cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
    if (cb == NULL || buf == NULL || size >= CB_MAX_SIZE)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <cb_init+0x20>
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <cb_init+0x20>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bfa:	d302      	bcc.n	8000c02 <cb_init+0x26>
        return CB_ERROR;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	e012      	b.n	8000c28 <cb_init+0x4c>

    cb->data = buf;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	601a      	str	r2, [r3, #0]
    cb->size = size;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]
    cb->writer = 0;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
    cb->reader = 0;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    cb->overflow = 0;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
    cb->active = 1;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2201      	movs	r2, #1
 8000c24:	751a      	strb	r2, [r3, #20]

    return CB_SUCCESS;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <cb_read>:

    return CB_SUCCESS;
}

uint32_t cb_read(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
    int data_count = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00a      	beq.n	8000c64 <cb_read+0x30>
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <cb_read+0x30>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	7d1b      	ldrb	r3, [r3, #20]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f083 0301 	eor.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <cb_read+0x36>
        return CB_ERROR;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	e025      	b.n	8000cb6 <cb_read+0x82>

    cb->active = 0;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	751a      	strb	r2, [r3, #20]
    data_count = cb_data_count(cb);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f872 	bl	8000d5a <cb_data_count>
 8000c76:	4603      	mov	r3, r0
 8000c78:	617b      	str	r3, [r7, #20]
    if (data_count >= nbytes)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d802      	bhi.n	8000c88 <cb_read+0x54>
        num_avail_bytes = nbytes;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	e001      	b.n	8000c8c <cb_read+0x58>
    else
        num_avail_bytes = data_count;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < num_avail_bytes; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	e009      	b.n	8000ca6 <cb_read+0x72>
        cb_read_byte(cb, (uint8_t *)buf + i);
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 f8e6 	bl	8000e6c <cb_read_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dbf1      	blt.n	8000c92 <cb_read+0x5e>

    cb->active = 1;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000cb4:	69fb      	ldr	r3, [r7, #28]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <cb_write>:

uint32_t cb_write(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b088      	sub	sp, #32
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
    int space_count = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
    int num_avail_bytes = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    if (cb == NULL || buf == NULL || !cb->active)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00a      	beq.n	8000cee <cb_write+0x30>
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <cb_write+0x30>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	7d1b      	ldrb	r3, [r3, #20]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f083 0301 	eor.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <cb_write+0x36>
        return CB_ERROR;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e02e      	b.n	8000d52 <cb_write+0x94>

    cb->active = 0;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	751a      	strb	r2, [r3, #20]
    space_count = cb_space_count(cb);
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f000 f856 	bl	8000dac <cb_space_count>
 8000d00:	4603      	mov	r3, r0
 8000d02:	617b      	str	r3, [r7, #20]
    if (space_count >= nbytes)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d805      	bhi.n	8000d18 <cb_write+0x5a>
    {
        num_avail_bytes = nbytes;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	61fb      	str	r3, [r7, #28]
        cb->overflow = 0;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	e006      	b.n	8000d26 <cb_write+0x68>
    }
    else
    {
        num_avail_bytes = space_count;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	61fb      	str	r3, [r7, #28]
        cb->overflow = nbytes - space_count;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	1ad2      	subs	r2, r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	611a      	str	r2, [r3, #16]
    }

    for (int i = 0; i < num_avail_bytes; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	e00a      	b.n	8000d42 <cb_write+0x84>
        cb_write_byte(cb, *((uint8_t *)buf + i));
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f86e 	bl	8000e18 <cb_write_byte>
    for (int i = 0; i < num_avail_bytes; i++)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbf0      	blt.n	8000d2c <cb_write+0x6e>

    cb->active = 1;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	751a      	strb	r2, [r3, #20]
    return num_avail_bytes;
 8000d50:	69fb      	ldr	r3, [r7, #28]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <cb_data_count>:

uint32_t cb_data_count(cbuffer_t *cb)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <cb_data_count+0x18>
        return CB_ERROR;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	e016      	b.n	8000da0 <cb_data_count+0x46>

    if (cb->writer >= cb->reader)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d306      	bcc.n	8000d8c <cb_data_count+0x32>
        res = cb->writer - cb->reader;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e008      	b.n	8000d9e <cb_data_count+0x44>
    else
        res = cb->size - cb->reader + cb->writer;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	1ad2      	subs	r2, r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]

    return res;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <cb_space_count>:

uint32_t cb_space_count(cbuffer_t *cb)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    int res = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
    if (cb == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <cb_space_count+0x18>
        return CB_ERROR;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e023      	b.n	8000e0c <cb_space_count+0x60>

    if (cb->reader > cb->writer)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d907      	bls.n	8000de0 <cb_space_count+0x34>
        res = cb->reader - cb->writer - 1;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e014      	b.n	8000e0a <cb_space_count+0x5e>
    else if (cb->reader < cb->writer)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d20a      	bcs.n	8000e02 <cb_space_count+0x56>
        res = cb->size - cb->writer + cb->reader - 1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e003      	b.n	8000e0a <cb_space_count+0x5e>
    else
        res = cb->size - 1;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]

    return res;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <cb_write_byte>:

/* Private definitions ----------------------------------------------- */
static uint32_t cb_write_byte(cbuffer_t *cb, uint8_t byte)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
    uint32_t next = cb->writer + 1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
    if (next == cb->size)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d101      	bne.n	8000e3a <cb_write_byte+0x22>
        next = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]

    if (next == cb->reader)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d102      	bne.n	8000e4a <cb_write_byte+0x32>
        return CB_ERROR;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	e00a      	b.n	8000e60 <cb_write_byte+0x48>

    *(cb->data + cb->writer) = byte;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4413      	add	r3, r2
 8000e54:	78fa      	ldrb	r2, [r7, #3]
 8000e56:	701a      	strb	r2, [r3, #0]
    cb->writer = next;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	609a      	str	r2, [r3, #8]
    return CB_SUCCESS;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <cb_read_byte>:

static uint32_t cb_read_byte(cbuffer_t *cb, uint8_t *byte)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    uint32_t next = cb->reader + 1;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
    if (cb->reader == cb->writer)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d102      	bne.n	8000e90 <cb_read_byte+0x24>
        return CB_ERROR;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e012      	b.n	8000eb6 <cb_read_byte+0x4a>

    if (next == cb->size)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d101      	bne.n	8000e9e <cb_read_byte+0x32>
        next = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]

    *byte = *(cb->data + cb->reader);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	701a      	strb	r2, [r3, #0]
    cb->reader = next;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	60da      	str	r2, [r3, #12]
    return CB_SUCCESS;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <MovingAverageFilter_Init>:
/* Private function prototypes ---------------------------------------- */
/* None */

/* Function definitions ----------------------------------------------- */
void MovingAverageFilter_Init(MovingAverageFilter* filter)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e007      	b.n	8000ee0 <MovingAverageFilter_Init+0x1e>
        filter->buffer[i] = 0;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d9f4      	bls.n	8000ed0 <MovingAverageFilter_Init+0xe>
    }
    filter->index = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	719a      	strb	r2, [r3, #6]
    filter->is_full = 0;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	71da      	strb	r2, [r3, #7]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <MovingAverageFilter_Apply>:

uint16_t MovingAverageFilter_Apply(MovingAverageFilter* filter, uint16_t new_sample)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
    filter->buffer[filter->index] = new_sample;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	799b      	ldrb	r3, [r3, #6]
 8000f10:	4619      	mov	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	887a      	ldrh	r2, [r7, #2]
 8000f16:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    filter->index++;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	799b      	ldrb	r3, [r3, #6]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	719a      	strb	r2, [r3, #6]

    if (filter->index >= MOVING_AVERAGE_WINDOW_SIZE) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	799b      	ldrb	r3, [r3, #6]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d905      	bls.n	8000f3a <MovingAverageFilter_Apply+0x3a>
        filter->index = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	719a      	strb	r2, [r3, #6]
        filter->is_full = 1;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	71da      	strb	r2, [r3, #7]
    }

    if (!filter->is_full) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <MovingAverageFilter_Apply+0x46>
        return new_sample;
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	e018      	b.n	8000f78 <MovingAverageFilter_Apply+0x78>
    }

    uint32_t sum = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	72fb      	strb	r3, [r7, #11]
 8000f4e:	e00a      	b.n	8000f66 <MovingAverageFilter_Apply+0x66>
        sum += filter->buffer[i];
 8000f50:	7afa      	ldrb	r2, [r7, #11]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW_SIZE; i++) {
 8000f60:	7afb      	ldrb	r3, [r7, #11]
 8000f62:	3301      	adds	r3, #1
 8000f64:	72fb      	strb	r3, [r7, #11]
 8000f66:	7afb      	ldrb	r3, [r7, #11]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d9f1      	bls.n	8000f50 <MovingAverageFilter_Apply+0x50>
    }
    return (uint16_t)(sum / MOVING_AVERAGE_WINDOW_SIZE);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <MovingAverageFilter_Apply+0x84>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	b29b      	uxth	r3, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	aaaaaaab 	.word	0xaaaaaaab

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f001 f8c5 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f8f3 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 fa43 	bl	8001420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9a:	f000 fa21 	bl	80013e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f9e:	f000 f955 	bl	800124c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000fa2:	f000 f9f3 	bl	800138c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fa6:	f000 f9a3 	bl	80012f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MovingAverageFilter_Init(&adc_filter);
 8000faa:	4863      	ldr	r0, [pc, #396]	@ (8001138 <main+0x1b0>)
 8000fac:	f7ff ff89 	bl	8000ec2 <MovingAverageFilter_Init>
  cb_init(&adc_buffer, adc_buffer_data, sizeof(adc_buffer_data));
 8000fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb4:	4961      	ldr	r1, [pc, #388]	@ (800113c <main+0x1b4>)
 8000fb6:	4862      	ldr	r0, [pc, #392]	@ (8001140 <main+0x1b8>)
 8000fb8:	f7ff fe10 	bl	8000bdc <cb_init>
  QRSDetector_Init(&qrs_detector);
 8000fbc:	4861      	ldr	r0, [pc, #388]	@ (8001144 <main+0x1bc>)
 8000fbe:	f000 fa5d 	bl	800147c <QRSDetector_Init>
  memset(qrs_flags, 0, sizeof(qrs_flags));
 8000fc2:	2240      	movs	r2, #64	@ 0x40
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4860      	ldr	r0, [pc, #384]	@ (8001148 <main+0x1c0>)
 8000fc8:	f004 f8e8 	bl	800519c <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fcc:	485f      	ldr	r0, [pc, #380]	@ (800114c <main+0x1c4>)
 8000fce:	f003 f8c5 	bl	800415c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	495e      	ldr	r1, [pc, #376]	@ (8001150 <main+0x1c8>)
 8000fd6:	485f      	ldr	r0, [pc, #380]	@ (8001154 <main+0x1cc>)
 8000fd8:	f001 fa14 	bl	8002404 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1); // dma knows when the conversion done
 8000fdc:	485d      	ldr	r0, [pc, #372]	@ (8001154 <main+0x1cc>)
 8000fde:	f001 f953 	bl	8002288 <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(send_flag == 1)
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8001158 <main+0x1d0>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d1fb      	bne.n	8000fe2 <main+0x5a>
	  {
		  send_flag = 0;
 8000fea:	4b5b      	ldr	r3, [pc, #364]	@ (8001158 <main+0x1d0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
		  memset(sendBuffer, 0, sizeof(sendBuffer));
 8000ff0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4859      	ldr	r0, [pc, #356]	@ (800115c <main+0x1d4>)
 8000ff8:	f004 f8d0 	bl	800519c <memset>
		  uint8_t temp_buffer[128]; // 64 mẫu x 2 byte
		  uint32_t bytes_read = cb_read(&adc_buffer, temp_buffer, 128);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	4619      	mov	r1, r3
 8001002:	484f      	ldr	r0, [pc, #316]	@ (8001140 <main+0x1b8>)
 8001004:	f7ff fe16 	bl	8000c34 <cb_read>
 8001008:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
			if(bytes_read == 128)
 800100c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001010:	2b80      	cmp	r3, #128	@ 0x80
 8001012:	d175      	bne.n	8001100 <main+0x178>
			{
				for (int i = 0; i < 64; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800101a:	e026      	b.n	800106a <main+0xe2>
				      {
				        uint16_t value = (temp_buffer[i * 2] << 8) | temp_buffer[i * 2 + 1];
 800101c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	33b0      	adds	r3, #176	@ 0xb0
 8001024:	443b      	add	r3, r7
 8001026:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	3301      	adds	r3, #1
 8001036:	33b0      	adds	r3, #176	@ 0xb0
 8001038:	443b      	add	r3, r7
 800103a:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
				        sprintf(&sendBuffer[strlen(sendBuffer)], "%u,", value);
 8001048:	4844      	ldr	r0, [pc, #272]	@ (800115c <main+0x1d4>)
 800104a:	f7ff f8c9 	bl	80001e0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	4a42      	ldr	r2, [pc, #264]	@ (800115c <main+0x1d4>)
 8001052:	4413      	add	r3, r2
 8001054:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001058:	4941      	ldr	r1, [pc, #260]	@ (8001160 <main+0x1d8>)
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f87e 	bl	800515c <siprintf>
				for (int i = 0; i < 64; i++)
 8001060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001064:	3301      	adds	r3, #1
 8001066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800106a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800106e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001070:	ddd4      	ble.n	800101c <main+0x94>
				      }
				      // Gửi cờ QRS (64 bit: 0 hoặc 1)
				      for (int i = 0; i < 64; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001078:	e021      	b.n	80010be <main+0x136>
				      {
				        sprintf(&sendBuffer[strlen(sendBuffer)], "%u", qrs_flags[i]);
 800107a:	4838      	ldr	r0, [pc, #224]	@ (800115c <main+0x1d4>)
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	4a36      	ldr	r2, [pc, #216]	@ (800115c <main+0x1d4>)
 8001084:	1898      	adds	r0, r3, r2
 8001086:	4a30      	ldr	r2, [pc, #192]	@ (8001148 <main+0x1c0>)
 8001088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4934      	ldr	r1, [pc, #208]	@ (8001164 <main+0x1dc>)
 8001094:	f004 f862 	bl	800515c <siprintf>
				        if (i < 63) {
 8001098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800109c:	2b3e      	cmp	r3, #62	@ 0x3e
 800109e:	dc09      	bgt.n	80010b4 <main+0x12c>
				          sprintf(&sendBuffer[strlen(sendBuffer)], ",");
 80010a0:	482e      	ldr	r0, [pc, #184]	@ (800115c <main+0x1d4>)
 80010a2:	f7ff f89d 	bl	80001e0 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <main+0x1d4>)
 80010aa:	4413      	add	r3, r2
 80010ac:	492e      	ldr	r1, [pc, #184]	@ (8001168 <main+0x1e0>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f854 	bl	800515c <siprintf>
				      for (int i = 0; i < 64; i++)
 80010b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010b8:	3301      	adds	r3, #1
 80010ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80010be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010c4:	ddd9      	ble.n	800107a <main+0xf2>
				        }
				      }
				      sprintf(&sendBuffer[strlen(sendBuffer)], "\n");
 80010c6:	4825      	ldr	r0, [pc, #148]	@ (800115c <main+0x1d4>)
 80010c8:	f7ff f88a 	bl	80001e0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a23      	ldr	r2, [pc, #140]	@ (800115c <main+0x1d4>)
 80010d0:	4413      	add	r3, r2
 80010d2:	4926      	ldr	r1, [pc, #152]	@ (800116c <main+0x1e4>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 f841 	bl	800515c <siprintf>
				      HAL_UART_Transmit(&huart2, (uint8_t*)sendBuffer, strlen(sendBuffer), 200);
 80010da:	4820      	ldr	r0, [pc, #128]	@ (800115c <main+0x1d4>)
 80010dc:	f7ff f880 	bl	80001e0 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	23c8      	movs	r3, #200	@ 0xc8
 80010e6:	491d      	ldr	r1, [pc, #116]	@ (800115c <main+0x1d4>)
 80010e8:	4821      	ldr	r0, [pc, #132]	@ (8001170 <main+0x1e8>)
 80010ea:	f003 fc7b 	bl	80049e4 <HAL_UART_Transmit>

				      // Xóa mảng cờ QRS sau khi gửi
				      memset(qrs_flags, 0, sizeof(qrs_flags));
 80010ee:	2240      	movs	r2, #64	@ 0x40
 80010f0:	2100      	movs	r1, #0
 80010f2:	4815      	ldr	r0, [pc, #84]	@ (8001148 <main+0x1c0>)
 80010f4:	f004 f852 	bl	800519c <memset>
				      qrs_flag_index = 0;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <main+0x1ec>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e770      	b.n	8000fe2 <main+0x5a>
			}
			else
			{
				char error_msg[] = "Error reading from buffer\n";
 8001100:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <main+0x1f0>)
 8001102:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8001106:	461d      	mov	r5, r3
 8001108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001110:	c403      	stmia	r4!, {r0, r1}
 8001112:	8022      	strh	r2, [r4, #0]
 8001114:	3402      	adds	r4, #2
 8001116:	0c13      	lsrs	r3, r2, #16
 8001118:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 200);
 800111a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f85e 	bl	80001e0 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800112c:	23c8      	movs	r3, #200	@ 0xc8
 800112e:	4810      	ldr	r0, [pc, #64]	@ (8001170 <main+0x1e8>)
 8001130:	f003 fc58 	bl	80049e4 <HAL_UART_Transmit>
	  if(send_flag == 1)
 8001134:	e755      	b.n	8000fe2 <main+0x5a>
 8001136:	bf00      	nop
 8001138:	20000454 	.word	0x20000454
 800113c:	20000474 	.word	0x20000474
 8001140:	2000045c 	.word	0x2000045c
 8001144:	20000674 	.word	0x20000674
 8001148:	20000078 	.word	0x20000078
 800114c:	20000164 	.word	0x20000164
 8001150:	20000450 	.word	0x20000450
 8001154:	200000bc 	.word	0x200000bc
 8001158:	2000044c 	.word	0x2000044c
 800115c:	200001f4 	.word	0x200001f4
 8001160:	08005ab4 	.word	0x08005ab4
 8001164:	08005ab8 	.word	0x08005ab8
 8001168:	08005abc 	.word	0x08005abc
 800116c:	08005ac0 	.word	0x08005ac0
 8001170:	200001ac 	.word	0x200001ac
 8001174:	200000b8 	.word	0x200000b8
 8001178:	08005ac4 	.word	0x08005ac4

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2230      	movs	r2, #48	@ 0x30
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f004 f806 	bl	800519c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <SystemClock_Config+0xc8>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <SystemClock_Config+0xc8>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <SystemClock_Config+0xc8>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <SystemClock_Config+0xcc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a20      	ldr	r2, [pc, #128]	@ (8001248 <SystemClock_Config+0xcc>)
 80011c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <SystemClock_Config+0xcc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2310      	movs	r3, #16
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ec:	2308      	movs	r3, #8
 80011ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011f0:	2364      	movs	r3, #100	@ 0x64
 80011f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80011f8:	2308      	movs	r3, #8
 80011fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fac3 	bl	800378c <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800120c:	f000 f930 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2103      	movs	r1, #3
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fd25 	bl	8003c7c <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001238:	f000 f91a 	bl	8001470 <Error_Handler>
  }
}
 800123c:	bf00      	nop
 800123e:	3750      	adds	r7, #80	@ 0x50
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <MX_ADC1_Init+0x98>)
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <MX_ADC1_Init+0x9c>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <MX_ADC1_Init+0x98>)
 8001266:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800126a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <MX_ADC1_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_ADC1_Init+0x98>)
 800127a:	2201      	movs	r2, #1
 800127c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <MX_ADC1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <MX_ADC1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_ADC1_Init+0x98>)
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <MX_ADC1_Init+0xa0>)
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_ADC1_Init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_ADC1_Init+0x98>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_ADC1_Init+0x98>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <MX_ADC1_Init+0x98>)
 80012ae:	f000 ffa7 	bl	8002200 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012b8:	f000 f8da 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012c4:	2307      	movs	r3, #7
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_ADC1_Init+0x98>)
 80012ce:	f001 f9a7 	bl	8002620 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012d8:	f000 f8ca 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000bc 	.word	0x200000bc
 80012e8:	40012000 	.word	0x40012000
 80012ec:	0f000001 	.word	0x0f000001

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_TIM2_Init+0x98>)
 800130e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1249;
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_TIM2_Init+0x98>)
 8001316:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800131a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_TIM2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_TIM2_Init+0x98>)
 8001324:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8001328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_TIM2_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_TIM2_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001336:	4814      	ldr	r0, [pc, #80]	@ (8001388 <MX_TIM2_Init+0x98>)
 8001338:	f002 fec0 	bl	80040bc <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001342:	f000 f895 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_TIM2_Init+0x98>)
 8001354:	f003 f854 	bl	8004400 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800135e:	f000 f887 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	@ (8001388 <MX_TIM2_Init+0x98>)
 8001370:	f003 fa66 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800137a:	f000 f879 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000164 	.word	0x20000164

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_USART2_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f003 fabe 	bl	8004944 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 f84f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001ac 	.word	0x200001ac
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <MX_DMA_Init+0x3c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a0b      	ldr	r2, [pc, #44]	@ (800141c <MX_DMA_Init+0x3c>)
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <MX_DMA_Init+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2038      	movs	r0, #56	@ 0x38
 8001408:	f001 fc95 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800140c:	2038      	movs	r0, #56	@ 0x38
 800140e:	f001 fcae 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_GPIO_Init+0x4c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <MX_GPIO_Init+0x4c>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <MX_GPIO_Init+0x4c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_GPIO_Init+0x4c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <MX_GPIO_Init+0x4c>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_GPIO_Init+0x4c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <QRSDetector_Init>:
static void update_rr_intervals(QRSDetector* detector, uint32_t rr);
static int32_t calculate_slope(QRSDetector* detector);

/* Function definitions ----------------------------------------------- */
void QRSDetector_Init(QRSDetector* detector)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 16; i++) detector->bandpass_buffer[i] = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e007      	b.n	800149a <QRSDetector_Init+0x1e>
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2100      	movs	r1, #0
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	3301      	adds	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d9f4      	bls.n	800148a <QRSDetector_Init+0xe>
    for (uint8_t i = 0; i < 5; i++) detector->deriv_buffer[i] = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73bb      	strb	r3, [r7, #14]
 80014a4:	e008      	b.n	80014b8 <QRSDetector_Init+0x3c>
 80014a6:	7bba      	ldrb	r2, [r7, #14]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3210      	adds	r2, #16
 80014ac:	2100      	movs	r1, #0
 80014ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73bb      	strb	r3, [r7, #14]
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d9f3      	bls.n	80014a6 <QRSDetector_Init+0x2a>
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) detector->integ_buffer[i] = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	737b      	strb	r3, [r7, #13]
 80014c2:	e009      	b.n	80014d8 <QRSDetector_Init+0x5c>
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	3314      	adds	r3, #20
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	3301      	adds	r3, #1
 80014d6:	737b      	strb	r3, [r7, #13]
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	2b0d      	cmp	r3, #13
 80014dc:	d9f2      	bls.n	80014c4 <QRSDetector_Init+0x48>

    detector->integ_index = 0;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    detector->signal_level = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    detector->noise_level = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    detector->threshold_i1 = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    detector->threshold_i2 = 0;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    detector->last_peak_time = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    detector->sample_count = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    detector->learning_phase = 1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

    for (uint8_t i = 0; i < 8; i++) detector->rr_intervals[i] = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	733b      	strb	r3, [r7, #12]
 8001522:	e009      	b.n	8001538 <QRSDetector_Init+0xbc>
 8001524:	7b3b      	ldrb	r3, [r7, #12]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	332a      	adds	r3, #42	@ 0x2a
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	7b3b      	ldrb	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	733b      	strb	r3, [r7, #12]
 8001538:	7b3b      	ldrb	r3, [r7, #12]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9f2      	bls.n	8001524 <QRSDetector_Init+0xa8>
    detector->rr_index = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
    detector->rr_average1 = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    detector->rr_average2 = 0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    detector->rr_count = 0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8

    detector->last_qrs_slope = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	0000      	movs	r0, r0
 8001574:	0000      	movs	r0, r0
	...

08001578 <QRSDetector_Process>:

uint8_t QRSDetector_Process(QRSDetector* detector, uint16_t new_sample)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b0a6      	sub	sp, #152	@ 0x98
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
    // Step 1: Preprocessing
    int32_t bandpass = bandpass_filter(detector, new_sample);
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f981 	bl	8001890 <bandpass_filter>
 800158e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    int32_t deriv = derivative(detector, bandpass);
 8001592:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f9b4 	bl	8001904 <derivative>
 800159c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    int32_t squared = squaring(deriv);
 80015a0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80015a4:	f000 f9e3 	bl	800196e <squaring>
 80015a8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    int32_t integrated = moving_window_integration(detector, squared);
 80015ac:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f9e9 	bl	8001988 <moving_window_integration>
 80015b6:	67f8      	str	r0, [r7, #124]	@ 0x7c

    // Debug: Gửi giá trị sau từng bước xử lý
    char debug_msg[100];
    sprintf(debug_msg, "BP:%ld,Deriv:%ld,Sq:%ld,Integ:%ld\n", bandpass, deriv, squared, integrated);
 80015b8:	f107 0008 	add.w	r0, r7, #8
 80015bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80015ce:	49ac      	ldr	r1, [pc, #688]	@ (8001880 <QRSDetector_Process+0x308>)
 80015d0:	f003 fdc4 	bl	800515c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 200);
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe fe01 	bl	80001e0 <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	f107 0108 	add.w	r1, r7, #8
 80015e6:	23c8      	movs	r3, #200	@ 0xc8
 80015e8:	48a6      	ldr	r0, [pc, #664]	@ (8001884 <QRSDetector_Process+0x30c>)
 80015ea:	f003 f9fb 	bl	80049e4 <HAL_UART_Transmit>

    // Step 2: Learning phase (first 2 seconds)
    if (detector->learning_phase) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 8091 	beq.w	800171c <QRSDetector_Process+0x1a4>
        detector->sample_count++;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        if (detector->sample_count < QRS_LEARNING_SAMPLES) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800160e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001610:	d813      	bhi.n	800163a <QRSDetector_Process+0xc2>
            if (integrated > detector->signal_level) detector->signal_level = integrated;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001618:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800161a:	429a      	cmp	r2, r3
 800161c:	dd03      	ble.n	8001626 <QRSDetector_Process+0xae>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            detector->noise_level += integrated;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800162c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800162e:	441a      	add	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            return 0;
 8001636:	2300      	movs	r3, #0
 8001638:	e114      	b.n	8001864 <QRSDetector_Process+0x2ec>
        } else {
            detector->noise_level /= QRS_LEARNING_SAMPLES;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001640:	2b00      	cmp	r3, #0
 8001642:	da00      	bge.n	8001646 <QRSDetector_Process+0xce>
 8001644:	337f      	adds	r3, #127	@ 0x7f
 8001646:	11db      	asrs	r3, r3, #7
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            detector->signal_level /= 2;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001656:	0fda      	lsrs	r2, r3, #31
 8001658:	4413      	add	r3, r2
 800165a:	105b      	asrs	r3, r3, #1
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f88c 	bl	8000788 <__aeabi_i2d>
 8001670:	4604      	mov	r4, r0
 8001672:	460d      	mov	r5, r1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f880 	bl	8000788 <__aeabi_i2d>
 8001688:	a379      	add	r3, pc, #484	@ (adr r3, 8001870 <QRSDetector_Process+0x2f8>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe fdff 	bl	8000290 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe ff29 	bl	80004f0 <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff f8d9 	bl	800085c <__aeabi_d2iz>
 80016aa:	4602      	mov	r2, r0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f865 	bl	8000788 <__aeabi_i2d>
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b71      	ldr	r3, [pc, #452]	@ (8001888 <QRSDetector_Process+0x310>)
 80016c4:	f7fe fde4 	bl	8000290 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f8c4 	bl	800085c <__aeabi_d2iz>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
            detector->learning_phase = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            detector->sample_count = 0;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

            // Debug: Gửi ngưỡng sau giai đoạn học
            sprintf(debug_msg, "ThreshI1:%ld,ThreshI2:%ld\n", detector->threshold_i1, detector->threshold_i2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016f8:	f107 0008 	add.w	r0, r7, #8
 80016fc:	4963      	ldr	r1, [pc, #396]	@ (800188c <QRSDetector_Process+0x314>)
 80016fe:	f003 fd2d 	bl	800515c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), 200);
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fd6a 	bl	80001e0 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f107 0108 	add.w	r1, r7, #8
 8001714:	23c8      	movs	r3, #200	@ 0xc8
 8001716:	485b      	ldr	r0, [pc, #364]	@ (8001884 <QRSDetector_Process+0x30c>)
 8001718:	f003 f964 	bl	80049e4 <HAL_UART_Transmit>
        }
    }

    // Step 3: Peak detection
    uint8_t is_qrs = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    if (integrated > detector->threshold_i1) {
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001728:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800172a:	429a      	cmp	r2, r3
 800172c:	dd4a      	ble.n	80017c4 <QRSDetector_Process+0x24c>
        uint32_t time_since_last = detector->sample_count - detector->last_peak_time;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	677b      	str	r3, [r7, #116]	@ 0x74

        // Check refractory period
        if (time_since_last < QRS_REFRACTORY_PERIOD) {
 800173e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001740:	2b09      	cmp	r3, #9
 8001742:	d806      	bhi.n	8001752 <QRSDetector_Process+0x1da>
            update_thresholds(detector, integrated, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f965 	bl	8001a18 <update_thresholds>
            return 0;
 800174e:	2300      	movs	r3, #0
 8001750:	e088      	b.n	8001864 <QRSDetector_Process+0x2ec>
        }

        // T-wave discrimination
        if (time_since_last < QRS_TWAVE_PERIOD && detector->last_qrs_slope > 0) {
 8001752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001754:	2b16      	cmp	r3, #22
 8001756:	d819      	bhi.n	800178c <QRSDetector_Process+0x214>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800175e:	2b00      	cmp	r3, #0
 8001760:	dd14      	ble.n	800178c <QRSDetector_Process+0x214>
            int32_t current_slope = calculate_slope(detector);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fab4 	bl	8001cd0 <calculate_slope>
 8001768:	6738      	str	r0, [r7, #112]	@ 0x70
            if (current_slope < detector->last_qrs_slope / 2) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001770:	0fda      	lsrs	r2, r3, #31
 8001772:	4413      	add	r3, r2
 8001774:	105b      	asrs	r3, r3, #1
 8001776:	461a      	mov	r2, r3
 8001778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800177a:	4293      	cmp	r3, r2
 800177c:	da06      	bge.n	800178c <QRSDetector_Process+0x214>
                update_thresholds(detector, integrated, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f948 	bl	8001a18 <update_thresholds>
                return 0;
 8001788:	2300      	movs	r3, #0
 800178a:	e06b      	b.n	8001864 <QRSDetector_Process+0x2ec>
            }
        }

        // Valid QRS peak
        is_qrs = 1;
 800178c:	2301      	movs	r3, #1
 800178e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        detector->last_qrs_slope = calculate_slope(detector);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fa9c 	bl	8001cd0 <calculate_slope>
 8001798:	4602      	mov	r2, r0
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        update_thresholds(detector, integrated, 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f937 	bl	8001a18 <update_thresholds>
        uint32_t rr = time_since_last;
 80017aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
        update_rr_intervals(detector, rr);
 80017ae:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f9d5 	bl	8001b60 <update_rr_intervals>
        detector->last_peak_time = detector->sample_count;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80017c2:	e046      	b.n	8001852 <QRSDetector_Process+0x2da>
    } else if (detector->rr_average1 > 0 &&
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d041      	beq.n	8001852 <QRSDetector_Process+0x2da>
               (detector->sample_count - detector->last_peak_time) > (uint32_t)(QRS_SEARCHBACK_FACTOR * detector->rr_average1)) {
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80017da:	1ad4      	subs	r4, r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe ffc0 	bl	8000768 <__aeabi_ui2d>
 80017e8:	a323      	add	r3, pc, #140	@ (adr r3, 8001878 <QRSDetector_Process+0x300>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fd4f 	bl	8000290 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff f857 	bl	80008ac <__aeabi_d2uiz>
 80017fe:	4603      	mov	r3, r0
    } else if (detector->rr_average1 > 0 &&
 8001800:	429c      	cmp	r4, r3
 8001802:	d926      	bls.n	8001852 <QRSDetector_Process+0x2da>
        if (integrated > detector->threshold_i2) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800180a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800180c:	429a      	cmp	r2, r3
 800180e:	dd20      	ble.n	8001852 <QRSDetector_Process+0x2da>
            is_qrs = 1;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            detector->last_qrs_slope = calculate_slope(detector);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fa5a 	bl	8001cd0 <calculate_slope>
 800181c:	4602      	mov	r2, r0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
            update_thresholds(detector, integrated, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f8f5 	bl	8001a18 <update_thresholds>
            uint32_t rr = detector->sample_count - detector->last_peak_time;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	67bb      	str	r3, [r7, #120]	@ 0x78
            update_rr_intervals(detector, rr);
 800183e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f98d 	bl	8001b60 <update_rr_intervals>
            detector->last_peak_time = detector->sample_count;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        }
    }

    detector->sample_count++;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    return is_qrs;
 8001860:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8001864:	4618      	mov	r0, r3
 8001866:	3790      	adds	r7, #144	@ 0x90
 8001868:	46bd      	mov	sp, r7
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	f3af 8000 	nop.w
 8001870:	9999999a 	.word	0x9999999a
 8001874:	3fb99999 	.word	0x3fb99999
 8001878:	28f5c28f 	.word	0x28f5c28f
 800187c:	3ffa8f5c 	.word	0x3ffa8f5c
 8001880:	08005ae0 	.word	0x08005ae0
 8001884:	200001ac 	.word	0x200001ac
 8001888:	3fe00000 	.word	0x3fe00000
 800188c:	08005b04 	.word	0x08005b04

08001890 <bandpass_filter>:

/* Private definitions ----------------------------------------------- */
static int32_t bandpass_filter(QRSDetector* detector, int32_t new_sample)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 15; i > 0; i--) detector->bandpass_buffer[i] = detector->bandpass_buffer[i - 1];
 800189a:	230f      	movs	r3, #15
 800189c:	75fb      	strb	r3, [r7, #23]
 800189e:	e00b      	b.n	80018b8 <bandpass_filter+0x28>
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	1e59      	subs	r1, r3, #1
 80018a4:	7dfa      	ldrb	r2, [r7, #23]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	75fb      	strb	r3, [r7, #23]
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <bandpass_filter+0x10>
    detector->bandpass_buffer[0] = new_sample;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	601a      	str	r2, [r3, #0]

    // Low-pass filter (cutoff ~11 Hz)
    int32_t lowpass = 2 * detector->bandpass_buffer[0] - detector->bandpass_buffer[12] +
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	005a      	lsls	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	1ad2      	subs	r2, r2, r3
                      detector->bandpass_buffer[0] - 2 * detector->bandpass_buffer[6] + detector->bandpass_buffer[12];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
    int32_t lowpass = 2 * detector->bandpass_buffer[0] - detector->bandpass_buffer[12] +
 80018d4:	441a      	add	r2, r3
                      detector->bandpass_buffer[0] - 2 * detector->bandpass_buffer[6] + detector->bandpass_buffer[12];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	1ad2      	subs	r2, r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    int32_t lowpass = 2 * detector->bandpass_buffer[0] - detector->bandpass_buffer[12] +
 80018e2:	4413      	add	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]

    // High-pass filter (cutoff ~5 Hz)
    int32_t highpass = detector->bandpass_buffer[0] - detector->bandpass_buffer[15] + lowpass;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

    return highpass;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <derivative>:

static int32_t derivative(QRSDetector* detector, int32_t filtered)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 4; i > 0; i--) detector->deriv_buffer[i] = detector->deriv_buffer[i - 1];
 800190e:	2304      	movs	r3, #4
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e00d      	b.n	8001930 <derivative+0x2c>
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	1e59      	subs	r1, r3, #1
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3110      	adds	r1, #16
 800191e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3210      	adds	r2, #16
 8001926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	3b01      	subs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ee      	bne.n	8001914 <derivative+0x10>
    detector->deriv_buffer[0] = filtered;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40

    int32_t deriv = (1 * detector->deriv_buffer[0] + 2 * detector->deriv_buffer[1] -
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	441a      	add	r2, r3
                     2 * detector->deriv_buffer[3] - 1 * detector->deriv_buffer[4]) / 8;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	005b      	lsls	r3, r3, #1
    int32_t deriv = (1 * detector->deriv_buffer[0] + 2 * detector->deriv_buffer[1] -
 800194e:	1ad2      	subs	r2, r2, r3
                     2 * detector->deriv_buffer[3] - 1 * detector->deriv_buffer[4]) / 8;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001954:	1ad3      	subs	r3, r2, r3
    int32_t deriv = (1 * detector->deriv_buffer[0] + 2 * detector->deriv_buffer[1] -
 8001956:	2b00      	cmp	r3, #0
 8001958:	da00      	bge.n	800195c <derivative+0x58>
 800195a:	3307      	adds	r3, #7
 800195c:	10db      	asrs	r3, r3, #3
 800195e:	60bb      	str	r3, [r7, #8]
    return deriv;
 8001960:	68bb      	ldr	r3, [r7, #8]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <squaring>:

static int32_t squaring(int32_t deriv)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
    return deriv * deriv;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	fb03 f303 	mul.w	r3, r3, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <moving_window_integration>:

static int32_t moving_window_integration(QRSDetector* detector, int32_t squared)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    detector->integ_buffer[detector->integ_index] = squared;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	3314      	adds	r3, #20
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	605a      	str	r2, [r3, #4]
    detector->integ_index = (detector->integ_index + 1) % QRS_WINDOW_SIZE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <moving_window_integration+0x88>)
 80019ae:	fb83 1302 	smull	r1, r3, r3, r2
 80019b2:	4413      	add	r3, r2
 80019b4:	10d9      	asrs	r1, r3, #3
 80019b6:	17d3      	asrs	r3, r2, #31
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	460b      	mov	r3, r1
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	1ad1      	subs	r1, r2, r3
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    int32_t sum = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < QRS_WINDOW_SIZE; i++) sum += detector->integ_buffer[i];
 80019d0:	2300      	movs	r3, #0
 80019d2:	72fb      	strb	r3, [r7, #11]
 80019d4:	e00b      	b.n	80019ee <moving_window_integration+0x66>
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	3314      	adds	r3, #20
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	3301      	adds	r3, #1
 80019ec:	72fb      	strb	r3, [r7, #11]
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	2b0d      	cmp	r3, #13
 80019f2:	d9f0      	bls.n	80019d6 <moving_window_integration+0x4e>
    return sum / QRS_WINDOW_SIZE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a06      	ldr	r2, [pc, #24]	@ (8001a10 <moving_window_integration+0x88>)
 80019f8:	fb82 1203 	smull	r1, r2, r2, r3
 80019fc:	441a      	add	r2, r3
 80019fe:	10d2      	asrs	r2, r2, #3
 8001a00:	17db      	asrs	r3, r3, #31
 8001a02:	1ad3      	subs	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	92492493 	.word	0x92492493
 8001a14:	00000000 	.word	0x00000000

08001a18 <update_thresholds>:

static void update_thresholds(QRSDetector* detector, int32_t peak, uint8_t is_qrs)
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	71fb      	strb	r3, [r7, #7]
    if (is_qrs) {
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d028      	beq.n	8001a7e <update_thresholds+0x66>
        detector->signal_level = 0.125 * peak + 0.875 * detector->signal_level;
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f7fe feab 	bl	8000788 <__aeabi_i2d>
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001a3a:	f7fe fc29 	bl	8000290 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fe9b 	bl	8000788 <__aeabi_i2d>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b40      	ldr	r3, [pc, #256]	@ (8001b58 <update_thresholds+0x140>)
 8001a58:	f7fe fc1a 	bl	8000290 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fd44 	bl	80004f0 <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7fe fef4 	bl	800085c <__aeabi_d2iz>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001a7c:	e027      	b.n	8001ace <update_thresholds+0xb6>
    } else {
        detector->noise_level = 0.125 * peak + 0.875 * detector->noise_level;
 8001a7e:	68b8      	ldr	r0, [r7, #8]
 8001a80:	f7fe fe82 	bl	8000788 <__aeabi_i2d>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001a8c:	f7fe fc00 	bl	8000290 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fe72 	bl	8000788 <__aeabi_i2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <update_thresholds+0x140>)
 8001aaa:	f7fe fbf1 	bl	8000290 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd1b 	bl	80004f0 <__adddf3>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7fe fecb 	bl	800085c <__aeabi_d2iz>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    detector->threshold_i1 = detector->noise_level + QRS_SIGNAL_FACTOR * (detector->signal_level - detector->noise_level);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fe57 	bl	8000788 <__aeabi_i2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fe4b 	bl	8000788 <__aeabi_i2d>
 8001af2:	a317      	add	r3, pc, #92	@ (adr r3, 8001b50 <update_thresholds+0x138>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fbca 	bl	8000290 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fcf4 	bl	80004f0 <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7fe fea4 	bl	800085c <__aeabi_d2iz>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    detector->threshold_i2 = QRS_NOISE_FACTOR * detector->threshold_i1;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fe30 	bl	8000788 <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <update_thresholds+0x144>)
 8001b2e:	f7fe fbaf 	bl	8000290 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe fe8f 	bl	800085c <__aeabi_d2iz>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	9999999a 	.word	0x9999999a
 8001b54:	3fb99999 	.word	0x3fb99999
 8001b58:	3fec0000 	.word	0x3fec0000
 8001b5c:	3fe00000 	.word	0x3fe00000

08001b60 <update_rr_intervals>:

static void update_rr_intervals(QRSDetector* detector, uint32_t rr)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
    detector->rr_intervals[detector->rr_index] = rr;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	332a      	adds	r3, #42	@ 0x2a
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
    detector->rr_index = (detector->rr_index + 1) % 8;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8001b82:	3301      	adds	r3, #1
 8001b84:	425a      	negs	r2, r3
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	f002 0207 	and.w	r2, r2, #7
 8001b8e:	bf58      	it	pl
 8001b90:	4253      	negpl	r3, r2
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
    if (detector->rr_count < 8) detector->rr_count++;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d807      	bhi.n	8001bb4 <update_rr_intervals+0x54>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001baa:	3301      	adds	r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8

    uint32_t sum1 = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < detector->rr_count; i++) sum1 += detector->rr_intervals[i];
 8001bb8:	2300      	movs	r3, #0
 8001bba:	74fb      	strb	r3, [r7, #19]
 8001bbc:	e00b      	b.n	8001bd6 <update_rr_intervals+0x76>
 8001bbe:	7cfb      	ldrb	r3, [r7, #19]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	332a      	adds	r3, #42	@ 0x2a
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4413      	add	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	7cfb      	ldrb	r3, [r7, #19]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	74fb      	strb	r3, [r7, #19]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001bdc:	7cfa      	ldrb	r2, [r7, #19]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3ed      	bcc.n	8001bbe <update_rr_intervals+0x5e>
    detector->rr_average1 = sum1 / detector->rr_count;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001be8:	461a      	mov	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    uint32_t sum2 = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
    uint8_t count2 = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	72bb      	strb	r3, [r7, #10]
 8001c02:	e042      	b.n	8001c8a <update_rr_intervals+0x12a>
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 8001c04:	7abb      	ldrb	r3, [r7, #10]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	332a      	adds	r3, #42	@ 0x2a
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	685c      	ldr	r4, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fda6 	bl	8000768 <__aeabi_ui2d>
 8001c1c:	a328      	add	r3, pc, #160	@ (adr r3, 8001cc0 <update_rr_intervals+0x160>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fb35 	bl	8000290 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe fe3d 	bl	80008ac <__aeabi_d2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	429c      	cmp	r4, r3
 8001c36:	d325      	bcc.n	8001c84 <update_rr_intervals+0x124>
            detector->rr_intervals[i] <= (uint32_t)(QRS_RR_LIMIT_HIGH * detector->rr_average1)) {
 8001c38:	7abb      	ldrb	r3, [r7, #10]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	332a      	adds	r3, #42	@ 0x2a
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	685c      	ldr	r4, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fd8c 	bl	8000768 <__aeabi_ui2d>
 8001c50:	a31d      	add	r3, pc, #116	@ (adr r3, 8001cc8 <update_rr_intervals+0x168>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fb1b 	bl	8000290 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe fe23 	bl	80008ac <__aeabi_d2uiz>
 8001c66:	4603      	mov	r3, r0
        if (detector->rr_intervals[i] >= (uint32_t)(QRS_RR_LIMIT_LOW * detector->rr_average1) &&
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	d80b      	bhi.n	8001c84 <update_rr_intervals+0x124>
            sum2 += detector->rr_intervals[i];
 8001c6c:	7abb      	ldrb	r3, [r7, #10]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	332a      	adds	r3, #42	@ 0x2a
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
            count2++;
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	3301      	adds	r3, #1
 8001c82:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < detector->rr_count; i++) {
 8001c84:	7abb      	ldrb	r3, [r7, #10]
 8001c86:	3301      	adds	r3, #1
 8001c88:	72bb      	strb	r3, [r7, #10]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8001c90:	7aba      	ldrb	r2, [r7, #10]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b6      	bcc.n	8001c04 <update_rr_intervals+0xa4>
        }
    }
    detector->rr_average2 = (count2 > 0) ? (sum2 / count2) : detector->rr_average1;
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <update_rr_intervals+0x146>
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	e002      	b.n	8001cac <update_rr_intervals+0x14c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	d70a3d71 	.word	0xd70a3d71
 8001cc4:	3fed70a3 	.word	0x3fed70a3
 8001cc8:	28f5c28f 	.word	0x28f5c28f
 8001ccc:	3ff28f5c 	.word	0x3ff28f5c

08001cd0 <calculate_slope>:

static int32_t calculate_slope(QRSDetector* detector)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    int32_t slope = detector->deriv_buffer[0] - detector->deriv_buffer[2];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	60fb      	str	r3, [r7, #12]
    return (slope > 0) ? slope : -slope;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bfb8      	it	lt
 8001cea:	425b      	neglt	r3, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	4a0f      	ldr	r2, [pc, #60]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d36:	2007      	movs	r0, #7
 8001d38:	f000 fff2 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2f      	ldr	r2, [pc, #188]	@ (8001e24 <HAL_ADC_MspInit+0xdc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d157      	bne.n	8001e1a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <HAL_ADC_MspInit+0xe0>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a2d      	ldr	r2, [pc, #180]	@ (8001e28 <HAL_ADC_MspInit+0xe0>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <HAL_ADC_MspInit+0xe0>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_ADC_MspInit+0xe0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a26      	ldr	r2, [pc, #152]	@ (8001e28 <HAL_ADC_MspInit+0xe0>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_ADC_MspInit+0xe0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001da2:	2301      	movs	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da6:	2303      	movs	r3, #3
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	481d      	ldr	r0, [pc, #116]	@ (8001e2c <HAL_ADC_MspInit+0xe4>)
 8001db6:	f001 fb65 	bl	8003484 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dba:	4b1d      	ldr	r3, [pc, #116]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e34 <HAL_ADC_MspInit+0xec>)
 8001dbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dcc:	4b18      	ldr	r3, [pc, #96]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001dd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001ddc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001de0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001de2:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001de4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dfe:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001e00:	f000 ffd0 	bl	8002da4 <HAL_DMA_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e0a:	f7ff fb31 	bl	8001470 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a07      	ldr	r2, [pc, #28]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001e12:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e14:	4a06      	ldr	r2, [pc, #24]	@ (8001e30 <HAL_ADC_MspInit+0xe8>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	@ 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40012000 	.word	0x40012000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	20000104 	.word	0x20000104
 8001e34:	40026410 	.word	0x40026410

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e48:	d115      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	201c      	movs	r0, #28
 8001e6c:	f000 ff63 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e70:	201c      	movs	r0, #28
 8001e72:	f000 ff7c 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	@ (8001f08 <HAL_UART_MspInit+0x84>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <HAL_UART_MspInit+0x88>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <HAL_UART_MspInit+0x88>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_UART_MspInit+0x88>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_UART_MspInit+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <HAL_UART_MspInit+0x88>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_UART_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ede:	230c      	movs	r3, #12
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eee:	2307      	movs	r3, #7
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <HAL_UART_MspInit+0x8c>)
 8001efa:	f001 fac3 	bl	8003484 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	@ 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40004400 	.word	0x40004400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <NMI_Handler+0x4>

08001f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6a:	f000 f929 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  * Interrupt 64 times per second
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  // Lọc giá trị ADC
  uint16_t filtered_value = MovingAverageFilter_Apply(&adc_filter, (uint16_t)ADC_value);
 8001f7a:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <TIM2_IRQHandler+0x90>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4619      	mov	r1, r3
 8001f82:	4821      	ldr	r0, [pc, #132]	@ (8002008 <TIM2_IRQHandler+0x94>)
 8001f84:	f7fe ffbc 	bl	8000f00 <MovingAverageFilter_Apply>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	80fb      	strh	r3, [r7, #6]

  // Phát hiện QRS
  uint8_t is_qrs = QRSDetector_Process(&qrs_detector, filtered_value); // Xóa tham số qrs_flags
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481e      	ldr	r0, [pc, #120]	@ (800200c <TIM2_IRQHandler+0x98>)
 8001f92:	f7ff faf1 	bl	8001578 <QRSDetector_Process>
 8001f96:	4603      	mov	r3, r0
 8001f98:	717b      	strb	r3, [r7, #5]

  // Lưu cờ QRS vào mảng
  if (qrs_flag_index < 64) {
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <TIM2_IRQHandler+0x9c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fa0:	d80b      	bhi.n	8001fba <TIM2_IRQHandler+0x46>
    qrs_flags[qrs_flag_index] = is_qrs;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <TIM2_IRQHandler+0x9c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <TIM2_IRQHandler+0xa0>)
 8001faa:	797b      	ldrb	r3, [r7, #5]
 8001fac:	5453      	strb	r3, [r2, r1]
    qrs_flag_index++;
 8001fae:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <TIM2_IRQHandler+0x9c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <TIM2_IRQHandler+0x9c>)
 8001fb8:	701a      	strb	r2, [r3, #0]
  }

  // Ghi giá trị đã lọc vào Circular Buffer (giá trị 16-bit, chia thành 2 byte)
  uint8_t high_byte = (filtered_value >> 8) & 0xFF; // Byte cao
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	713b      	strb	r3, [r7, #4]
  uint8_t low_byte = filtered_value & 0xFF;         // Byte thấp
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	70fb      	strb	r3, [r7, #3]
  cb_write(&adc_buffer, &high_byte, 1);
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4811      	ldr	r0, [pc, #68]	@ (8002018 <TIM2_IRQHandler+0xa4>)
 8001fd2:	f7fe fe74 	bl	8000cbe <cb_write>
  cb_write(&adc_buffer, &low_byte, 1);
 8001fd6:	1cfb      	adds	r3, r7, #3
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480e      	ldr	r0, [pc, #56]	@ (8002018 <TIM2_IRQHandler+0xa4>)
 8001fde:	f7fe fe6e 	bl	8000cbe <cb_write>

  // Kiểm tra số lượng dữ liệu trong bộ đệm
  if (cb_data_count(&adc_buffer) >= 128) // 128 byte = 64 mẫu (mỗi mẫu 2 byte)
 8001fe2:	480d      	ldr	r0, [pc, #52]	@ (8002018 <TIM2_IRQHandler+0xa4>)
 8001fe4:	f7fe feb9 	bl	8000d5a <cb_data_count>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fec:	d902      	bls.n	8001ff4 <TIM2_IRQHandler+0x80>
  {
    send_flag = 1; // Đặt cờ để gửi dữ liệu trong main
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <TIM2_IRQHandler+0xa8>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ff4:	480a      	ldr	r0, [pc, #40]	@ (8002020 <TIM2_IRQHandler+0xac>)
 8001ff6:	f002 f913 	bl	8004220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000450 	.word	0x20000450
 8002008:	20000454 	.word	0x20000454
 800200c:	20000674 	.word	0x20000674
 8002010:	200000b8 	.word	0x200000b8
 8002014:	20000078 	.word	0x20000078
 8002018:	2000045c 	.word	0x2000045c
 800201c:	2000044c 	.word	0x2000044c
 8002020:	20000164 	.word	0x20000164

08002024 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <DMA2_Stream0_IRQHandler+0x10>)
 800202a:	f000 ffc1 	bl	8002fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000104 	.word	0x20000104

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f003 f8a0 	bl	80051ac <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20020000 	.word	0x20020000
 8002098:	00000400 	.word	0x00000400
 800209c:	20000754 	.word	0x20000754
 80020a0:	200008a8 	.word	0x200008a8

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002100 <LoopFillZerobss+0xe>
 80020cc:	f7ff ffea 	bl	80020a4 <SystemInit>
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <LoopFillZerobss+0x12>)
 80020d2:	490d      	ldr	r1, [pc, #52]	@ (8002108 <LoopFillZerobss+0x16>)
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <LoopFillZerobss+0x1a>)
 80020d6:	2300      	movs	r3, #0
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:
 80020da:	58d4      	ldr	r4, [r2, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:
 80020e0:	18c4      	adds	r4, r0, r3
 80020e2:	428c      	cmp	r4, r1
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <LoopFillZerobss+0x1e>)
 80020e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002114 <LoopFillZerobss+0x22>)
 80020ea:	2300      	movs	r3, #0
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:
 80020f2:	42a2      	cmp	r2, r4
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>
 80020f6:	f003 f85f 	bl	80051b8 <__libc_init_array>
 80020fa:	f7fe ff45 	bl	8000f88 <main>
 80020fe:	4770      	bx	lr
 8002100:	20020000 	.word	0x20020000
 8002104:	20000000 	.word	0x20000000
 8002108:	2000005c 	.word	0x2000005c
 800210c:	08005b84 	.word	0x08005b84
 8002110:	2000005c 	.word	0x2000005c
 8002114:	200008a4 	.word	0x200008a4

08002118 <ADC_IRQHandler>:
 8002118:	e7fe      	b.n	8002118 <ADC_IRQHandler>
	...

0800211c <HAL_Init>:
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
 8002120:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <HAL_Init+0x40>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_Init+0x40>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a07      	ldr	r2, [pc, #28]	@ (800215c <HAL_Init+0x40>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fdeb 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f808 	bl	8002160 <HAL_InitTick>
 8002150:	f7ff fdd2 	bl	8001cf8 <HAL_MspInit>
 8002154:	2300      	movs	r3, #0
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00

08002160 <HAL_InitTick>:
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_InitTick+0x54>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_InitTick+0x58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fe03 	bl	8002d8a <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_InitTick+0x2e>
 800218a:	2301      	movs	r3, #1
 800218c:	e00e      	b.n	80021ac <HAL_InitTick+0x4c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d80a      	bhi.n	80021aa <HAL_InitTick+0x4a>
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f000 fdcb 	bl	8002d36 <HAL_NVIC_SetPriority>
 80021a0:	4a06      	ldr	r2, [pc, #24]	@ (80021bc <HAL_InitTick+0x5c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_InitTick+0x4c>
 80021aa:	2301      	movs	r3, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_IncTick>:
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008
 80021e4:	20000758 	.word	0x20000758

080021e8 <HAL_GetTick>:
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000758 	.word	0x20000758

08002200 <HAL_ADC_Init>:
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Init+0x16>
 8002212:	2301      	movs	r3, #1
 8002214:	e033      	b.n	800227e <HAL_ADC_Init+0x7e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_ADC_Init+0x32>
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fd92 	bl	8001d48 <HAL_ADC_MspInit>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_ADC_Init+0x70>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002246:	f023 0302 	bic.w	r3, r3, #2
 800224a:	f043 0202 	orr.w	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	@ 0x40
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fb16 	bl	8002884 <ADC_Init>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40
 800226e:	e001      	b.n	8002274 <HAL_ADC_Init+0x74>
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_ADC_Start_IT>:
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Start_IT+0x1a>
 800229e:	2302      	movs	r3, #2
 80022a0:	e0a1      	b.n	80023e6 <HAL_ADC_Start_IT+0x15e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d018      	beq.n	80022ea <HAL_ADC_Start_IT+0x62>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_ADC_Start_IT+0x16c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4a      	ldr	r2, [pc, #296]	@ (80023f8 <HAL_ADC_Start_IT+0x170>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9a      	lsrs	r2, r3, #18
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_Start_IT+0x5c>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_Start_IT+0x56>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d169      	bne.n	80023cc <HAL_ADC_Start_IT+0x144>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_ADC_Start_IT+0xa2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002322:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002336:	d106      	bne.n	8002346 <HAL_ADC_Start_IT+0xbe>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233c:	f023 0206 	bic.w	r2, r3, #6
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	645a      	str	r2, [r3, #68]	@ 0x44
 8002344:	e002      	b.n	800234c <HAL_ADC_Start_IT+0xc4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002354:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <HAL_ADC_Start_IT+0x174>)
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002370:	f043 0320 	orr.w	r3, r3, #32
 8002374:	6053      	str	r3, [r2, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10f      	bne.n	80023a2 <HAL_ADC_Start_IT+0x11a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d129      	bne.n	80023e4 <HAL_ADC_Start_IT+0x15c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	e020      	b.n	80023e4 <HAL_ADC_Start_IT+0x15c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a16      	ldr	r2, [pc, #88]	@ (8002400 <HAL_ADC_Start_IT+0x178>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d11b      	bne.n	80023e4 <HAL_ADC_Start_IT+0x15c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d114      	bne.n	80023e4 <HAL_ADC_Start_IT+0x15c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e00b      	b.n	80023e4 <HAL_ADC_Start_IT+0x15c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f043 0210 	orr.w	r2, r3, #16
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80023e4:	2300      	movs	r3, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000
 80023f8:	431bde83 	.word	0x431bde83
 80023fc:	40012300 	.word	0x40012300
 8002400:	40012000 	.word	0x40012000

08002404 <HAL_ADC_Start_DMA>:
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Start_DMA+0x1e>
 800241e:	2302      	movs	r3, #2
 8002420:	e0ce      	b.n	80025c0 <HAL_ADC_Start_DMA+0x1bc>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d018      	beq.n	800246a <HAL_ADC_Start_DMA+0x66>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	4b5f      	ldr	r3, [pc, #380]	@ (80025c8 <HAL_ADC_Start_DMA+0x1c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5f      	ldr	r2, [pc, #380]	@ (80025cc <HAL_ADC_Start_DMA+0x1c8>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9a      	lsrs	r2, r3, #18
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	e002      	b.n	8002464 <HAL_ADC_Start_DMA+0x60>
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	3b01      	subs	r3, #1
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_Start_DMA+0x5a>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002478:	d107      	bne.n	800248a <HAL_ADC_Start_DMA+0x86>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 8086 	bne.w	80025a6 <HAL_ADC_Start_DMA+0x1a2>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_ADC_Start_DMA+0xc8>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d8:	d106      	bne.n	80024e8 <HAL_ADC_Start_DMA+0xe4>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f023 0206 	bic.w	r2, r3, #6
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80024e6:	e002      	b.n	80024ee <HAL_ADC_Start_DMA+0xea>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024f6:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <HAL_ADC_Start_DMA+0x1cc>)
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fe:	4a35      	ldr	r2, [pc, #212]	@ (80025d4 <HAL_ADC_Start_DMA+0x1d0>)
 8002500:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	4a34      	ldr	r2, [pc, #208]	@ (80025d8 <HAL_ADC_Start_DMA+0x1d4>)
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250e:	4a33      	ldr	r2, [pc, #204]	@ (80025dc <HAL_ADC_Start_DMA+0x1d8>)
 8002510:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	334c      	adds	r3, #76	@ 0x4c
 8002546:	4619      	mov	r1, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f000 fcd8 	bl	8002f00 <HAL_DMA_Start_IT>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <HAL_ADC_Start_DMA+0x178>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d129      	bne.n	80025be <HAL_ADC_Start_DMA+0x1ba>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	e020      	b.n	80025be <HAL_ADC_Start_DMA+0x1ba>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_ADC_Start_DMA+0x1dc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d11b      	bne.n	80025be <HAL_ADC_Start_DMA+0x1ba>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d114      	bne.n	80025be <HAL_ADC_Start_DMA+0x1ba>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e00b      	b.n	80025be <HAL_ADC_Start_DMA+0x1ba>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80025be:	2300      	movs	r3, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000000 	.word	0x20000000
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	40012300 	.word	0x40012300
 80025d4:	08002a7d 	.word	0x08002a7d
 80025d8:	08002b37 	.word	0x08002b37
 80025dc:	08002b53 	.word	0x08002b53
 80025e0:	40012000 	.word	0x40012000

080025e4 <HAL_ADC_ConvCpltCallback>:
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ConvHalfCpltCallback>:
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ErrorCallback>:
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ConfigChannel>:
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1c>
 8002638:	2302      	movs	r3, #2
 800263a:	e113      	b.n	8002864 <HAL_ADC_ConfigChannel+0x244>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b09      	cmp	r3, #9
 800264a:	d925      	bls.n	8002698 <HAL_ADC_ConfigChannel+0x78>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68d9      	ldr	r1, [r3, #12]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	3b1e      	subs	r3, #30
 8002662:	2207      	movs	r2, #7
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43da      	mvns	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	400a      	ands	r2, r1
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68d9      	ldr	r1, [r3, #12]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	4618      	mov	r0, r3
 8002684:	4603      	mov	r3, r0
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4403      	add	r3, r0
 800268a:	3b1e      	subs	r3, #30
 800268c:	409a      	lsls	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	e022      	b.n	80026de <HAL_ADC_ConfigChannel+0xbe>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	2207      	movs	r2, #7
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	400a      	ands	r2, r1
 80026ba:	611a      	str	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4403      	add	r3, r0
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d824      	bhi.n	8002730 <HAL_ADC_ConfigChannel+0x110>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b05      	subs	r3, #5
 80026f8:	221f      	movs	r2, #31
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	400a      	ands	r2, r1
 8002706:	635a      	str	r2, [r3, #52]	@ 0x34
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b05      	subs	r3, #5
 8002722:	fa00 f203 	lsl.w	r2, r0, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	@ 0x34
 800272e:	e04c      	b.n	80027ca <HAL_ADC_ConfigChannel+0x1aa>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d824      	bhi.n	8002782 <HAL_ADC_ConfigChannel+0x162>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b23      	subs	r3, #35	@ 0x23
 800274a:	221f      	movs	r2, #31
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	400a      	ands	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b23      	subs	r3, #35	@ 0x23
 8002774:	fa00 f203 	lsl.w	r2, r0, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002780:	e023      	b.n	80027ca <HAL_ADC_ConfigChannel+0x1aa>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b41      	subs	r3, #65	@ 0x41
 8002794:	221f      	movs	r2, #31
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	400a      	ands	r2, r1
 80027a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b41      	subs	r3, #65	@ 0x41
 80027be:	fa00 f203 	lsl.w	r2, r0, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027ca:	4b29      	ldr	r3, [pc, #164]	@ (8002870 <HAL_ADC_ConfigChannel+0x250>)
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <HAL_ADC_ConfigChannel+0x254>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10f      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1d8>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b12      	cmp	r3, #18
 80027de:	d10b      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1d8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_ADC_ConfigChannel+0x254>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d12b      	bne.n	800285a <HAL_ADC_ConfigChannel+0x23a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1c      	ldr	r2, [pc, #112]	@ (8002878 <HAL_ADC_ConfigChannel+0x258>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d003      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x1f4>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b11      	cmp	r3, #17
 8002812:	d122      	bne.n	800285a <HAL_ADC_ConfigChannel+0x23a>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_ADC_ConfigChannel+0x258>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d111      	bne.n	800285a <HAL_ADC_ConfigChannel+0x23a>
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_ADC_ConfigChannel+0x25c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a11      	ldr	r2, [pc, #68]	@ (8002880 <HAL_ADC_ConfigChannel+0x260>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0c9a      	lsrs	r2, r3, #18
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e002      	b.n	8002854 <HAL_ADC_ConfigChannel+0x234>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3b01      	subs	r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f9      	bne.n	800284e <HAL_ADC_ConfigChannel+0x22e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002862:	2300      	movs	r3, #0
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012300 	.word	0x40012300
 8002874:	40012000 	.word	0x40012000
 8002878:	10000012 	.word	0x10000012
 800287c:	20000000 	.word	0x20000000
 8002880:	431bde83 	.word	0x431bde83

08002884 <ADC_Init>:
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	4b79      	ldr	r3, [pc, #484]	@ (8002a74 <ADC_Init+0x1f0>)
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	4a58      	ldr	r2, [pc, #352]	@ (8002a78 <ADC_Init+0x1f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <ADC_Init+0xde>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e00f      	b.n	8002982 <ADC_Init+0xfe>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0202 	bic.w	r2, r2, #2
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e1b      	ldrb	r3, [r3, #24]
 800299c:	005a      	lsls	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <ADC_Init+0x164>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	3b01      	subs	r3, #1
 80029dc:	035a      	lsls	r2, r3, #13
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e007      	b.n	80029f8 <ADC_Init+0x174>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	051a      	lsls	r2, r3, #20
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a3a:	025a      	lsls	r2, r3, #9
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	029a      	lsls	r2, r3, #10
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40012300 	.word	0x40012300
 8002a78:	0f000001 	.word	0x0f000001

08002a7c <ADC_DMAConvCplt>:
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d13c      	bne.n	8002b10 <ADC_DMAConvCplt+0x94>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d12b      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	7e1b      	ldrb	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d127      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <ADC_DMAConvCplt+0x58>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d119      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff fd6b 	bl	80025e4 <HAL_ADC_ConvCpltCallback>
 8002b0e:	e00e      	b.n	8002b2e <ADC_DMAConvCplt+0xb2>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <ADC_DMAConvCplt+0xa8>
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fd75 	bl	800260c <HAL_ADC_ErrorCallback>
 8002b22:	e004      	b.n	8002b2e <ADC_DMAConvCplt+0xb2>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <ADC_DMAHalfConvCplt>:
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fd57 	bl	80025f8 <HAL_ADC_ConvHalfCpltCallback>
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <ADC_DMAError>:
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff fd4a 	bl	800260c <HAL_ADC_ErrorCallback>
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <__NVIC_SetPriorityGrouping>:
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	@ (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	@ (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	@ (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	@ 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	@ 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <SysTick_Config>:
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff8e 	bl	8002c20 <__NVIC_SetPriority>
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	2300      	movs	r3, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff29 	bl	8002b80 <__NVIC_SetPriorityGrouping>
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	f7ff ff3e 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff8e 	bl	8002c74 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff31 	bl	8002be4 <__NVIC_EnableIRQ>
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_DMA_Init>:
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f7ff fa1a 	bl	80021e8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Init+0x1c>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e099      	b.n	8002ef4 <HAL_DMA_Init+0x150>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e00f      	b.n	8002e02 <HAL_DMA_Init+0x5e>
 8002de2:	f7ff fa01 	bl	80021e8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d908      	bls.n	8002e02 <HAL_DMA_Init+0x5e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e078      	b.n	8002ef4 <HAL_DMA_Init+0x150>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e8      	bne.n	8002de2 <HAL_DMA_Init+0x3e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <HAL_DMA_Init+0x158>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d107      	bne.n	8002e6c <HAL_DMA_Init+0xc8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	4313      	orrs	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0307 	bic.w	r3, r3, #7
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d117      	bne.n	8002ec6 <HAL_DMA_Init+0x122>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_DMA_Init+0x122>
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fa6f 	bl	800338c <DMA_CheckFifoParam>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Init+0x122>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2240      	movs	r2, #64	@ 0x40
 8002eb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e016      	b.n	8002ef4 <HAL_DMA_Init+0x150>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	615a      	str	r2, [r3, #20]
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fa26 	bl	8003320 <DMA_CalcBaseAndBitshift>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	223f      	movs	r2, #63	@ 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	f010803f 	.word	0xf010803f

08002f00 <HAL_DMA_Start_IT>:
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_DMA_Start_IT+0x26>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e040      	b.n	8002fa8 <HAL_DMA_Start_IT+0xa8>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d12f      	bne.n	8002f9a <HAL_DMA_Start_IT+0x9a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f9b8 	bl	80032c4 <DMA_SetConfig>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f58:	223f      	movs	r2, #63	@ 0x3f
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0216 	orr.w	r2, r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_DMA_Start_IT+0x88>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e005      	b.n	8002fa6 <HAL_DMA_Start_IT+0xa6>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	75fb      	strb	r3, [r7, #23]
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_DMA_IRQHandler>:
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	4b8e      	ldr	r3, [pc, #568]	@ (80031f8 <HAL_DMA_IRQHandler+0x248>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a8e      	ldr	r2, [pc, #568]	@ (80031fc <HAL_DMA_IRQHandler+0x24c>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	2208      	movs	r2, #8
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01a      	beq.n	800301c <HAL_DMA_IRQHandler+0x6c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_DMA_IRQHandler+0x6c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	2208      	movs	r2, #8
 800300a:	409a      	lsls	r2, r3
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	@ 0x54
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	2201      	movs	r2, #1
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_DMA_IRQHandler+0xa2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_DMA_IRQHandler+0xa2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	2201      	movs	r2, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	f043 0202 	orr.w	r2, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	2204      	movs	r2, #4
 8003058:	409a      	lsls	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <HAL_DMA_IRQHandler+0xd8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_DMA_IRQHandler+0xd8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2204      	movs	r2, #4
 8003076:	409a      	lsls	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	f043 0204 	orr.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	2210      	movs	r2, #16
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d043      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03c      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	2210      	movs	r2, #16
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x142>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x130>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d024      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	e01f      	b.n	8003120 <HAL_DMA_IRQHandler+0x170>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e016      	b.n	8003120 <HAL_DMA_IRQHandler+0x170>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <HAL_DMA_IRQHandler+0x160>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0208 	bic.w	r2, r2, #8
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	2220      	movs	r2, #32
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 808f 	beq.w	8003250 <HAL_DMA_IRQHandler+0x2a0>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8087 	beq.w	8003250 <HAL_DMA_IRQHandler+0x2a0>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003146:	2220      	movs	r2, #32
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b05      	cmp	r3, #5
 8003158:	d136      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x218>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0216 	bic.w	r2, r2, #22
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003178:	615a      	str	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_DMA_IRQHandler+0x1da>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_DMA_IRQHandler+0x1ea>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0208 	bic.w	r2, r2, #8
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319e:	223f      	movs	r2, #63	@ 0x3f
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d07e      	beq.n	80032bc <HAL_DMA_IRQHandler+0x30c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
 80031c6:	e079      	b.n	80032bc <HAL_DMA_IRQHandler+0x30c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01d      	beq.n	8003212 <HAL_DMA_IRQHandler+0x262>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_DMA_IRQHandler+0x250>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
 80031f4:	e02c      	b.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000
 80031fc:	1b4e81b5 	.word	0x1b4e81b5
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
 8003210:	e01e      	b.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10f      	bne.n	8003240 <HAL_DMA_IRQHandler+0x290>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0210 	bic.w	r2, r2, #16
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	2b00      	cmp	r3, #0
 8003256:	d032      	beq.n	80032be <HAL_DMA_IRQHandler+0x30e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2fa>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2205      	movs	r2, #5
 8003268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	3301      	adds	r3, #1
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	d307      	bcc.n	8003298 <HAL_DMA_IRQHandler+0x2e8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f2      	bne.n	800327c <HAL_DMA_IRQHandler+0x2cc>
 8003296:	e000      	b.n	800329a <HAL_DMA_IRQHandler+0x2ea>
 8003298:	bf00      	nop
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_DMA_IRQHandler+0x30e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
 80032ba:	e000      	b.n	80032be <HAL_DMA_IRQHandler+0x30e>
 80032bc:	bf00      	nop
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <DMA_SetConfig>:
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b40      	cmp	r3, #64	@ 0x40
 80032f0:	d108      	bne.n	8003304 <DMA_SetConfig+0x40>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	e007      	b.n	8003314 <DMA_SetConfig+0x50>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <DMA_CalcBaseAndBitshift>:
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3b10      	subs	r3, #16
 8003330:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <DMA_CalcBaseAndBitshift+0x64>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4a13      	ldr	r2, [pc, #76]	@ (8003388 <DMA_CalcBaseAndBitshift+0x68>)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d909      	bls.n	8003362 <DMA_CalcBaseAndBitshift+0x42>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003360:	e007      	b.n	8003372 <DMA_CalcBaseAndBitshift+0x52>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6593      	str	r3, [r2, #88]	@ 0x58
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	aaaaaaab 	.word	0xaaaaaaab
 8003388:	08005b38 	.word	0x08005b38

0800338c <DMA_CheckFifoParam>:
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11f      	bne.n	80033e6 <DMA_CheckFifoParam+0x5a>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d856      	bhi.n	800345a <DMA_CheckFifoParam+0xce>
 80033ac:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <DMA_CheckFifoParam+0x28>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033d7 	.word	0x080033d7
 80033bc:	080033c5 	.word	0x080033c5
 80033c0:	0800345b 	.word	0x0800345b
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d046      	beq.n	800345e <DMA_CheckFifoParam+0xd2>
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e043      	b.n	800345e <DMA_CheckFifoParam+0xd2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033de:	d140      	bne.n	8003462 <DMA_CheckFifoParam+0xd6>
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e03d      	b.n	8003462 <DMA_CheckFifoParam+0xd6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ee:	d121      	bne.n	8003434 <DMA_CheckFifoParam+0xa8>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d837      	bhi.n	8003466 <DMA_CheckFifoParam+0xda>
 80033f6:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <DMA_CheckFifoParam+0x70>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003413 	.word	0x08003413
 8003404:	0800340d 	.word	0x0800340d
 8003408:	08003425 	.word	0x08003425
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e030      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d025      	beq.n	800346a <DMA_CheckFifoParam+0xde>
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	e022      	b.n	800346a <DMA_CheckFifoParam+0xde>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800342c:	d11f      	bne.n	800346e <DMA_CheckFifoParam+0xe2>
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e01c      	b.n	800346e <DMA_CheckFifoParam+0xe2>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d903      	bls.n	8003442 <DMA_CheckFifoParam+0xb6>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d003      	beq.n	8003448 <DMA_CheckFifoParam+0xbc>
 8003440:	e018      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e015      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <DMA_CheckFifoParam+0xe6>
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e00b      	b.n	8003472 <DMA_CheckFifoParam+0xe6>
 800345a:	bf00      	nop
 800345c:	e00a      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 800345e:	bf00      	nop
 8003460:	e008      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 8003462:	bf00      	nop
 8003464:	e006      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 8003466:	bf00      	nop
 8003468:	e004      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
 8003472:	bf00      	nop
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop

08003484 <HAL_GPIO_Init>:
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	@ 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	e159      	b.n	8003754 <HAL_GPIO_Init+0x2d0>
 80034a0:	2201      	movs	r2, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	f040 8148 	bne.w	800374e <HAL_GPIO_Init+0x2ca>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d005      	beq.n	80034d6 <HAL_GPIO_Init+0x52>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d130      	bne.n	8003538 <HAL_GPIO_Init+0xb4>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	2203      	movs	r2, #3
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	2201      	movs	r2, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 0201 	and.w	r2, r3, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b03      	cmp	r3, #3
 8003542:	d017      	beq.n	8003574 <HAL_GPIO_Init+0xf0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d123      	bne.n	80035c8 <HAL_GPIO_Init+0x144>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	08da      	lsrs	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3208      	adds	r2, #8
 8003588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	08da      	lsrs	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3208      	adds	r2, #8
 80035c2:	69b9      	ldr	r1, [r7, #24]
 80035c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0203 	and.w	r2, r3, #3
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a2 	beq.w	800374e <HAL_GPIO_Init+0x2ca>
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	4b57      	ldr	r3, [pc, #348]	@ (800376c <HAL_GPIO_Init+0x2e8>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	4a56      	ldr	r2, [pc, #344]	@ (800376c <HAL_GPIO_Init+0x2e8>)
 8003614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003618:	6453      	str	r3, [r2, #68]	@ 0x44
 800361a:	4b54      	ldr	r3, [pc, #336]	@ (800376c <HAL_GPIO_Init+0x2e8>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a52      	ldr	r2, [pc, #328]	@ (8003770 <HAL_GPIO_Init+0x2ec>)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a49      	ldr	r2, [pc, #292]	@ (8003774 <HAL_GPIO_Init+0x2f0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_Init+0x202>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a48      	ldr	r2, [pc, #288]	@ (8003778 <HAL_GPIO_Init+0x2f4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0x1fe>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a47      	ldr	r2, [pc, #284]	@ (800377c <HAL_GPIO_Init+0x2f8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_Init+0x1fa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a46      	ldr	r2, [pc, #280]	@ (8003780 <HAL_GPIO_Init+0x2fc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x1f6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a45      	ldr	r2, [pc, #276]	@ (8003784 <HAL_GPIO_Init+0x300>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_Init+0x1f2>
 8003672:	2304      	movs	r3, #4
 8003674:	e008      	b.n	8003688 <HAL_GPIO_Init+0x204>
 8003676:	2307      	movs	r3, #7
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x204>
 800367a:	2303      	movs	r3, #3
 800367c:	e004      	b.n	8003688 <HAL_GPIO_Init+0x204>
 800367e:	2302      	movs	r3, #2
 8003680:	e002      	b.n	8003688 <HAL_GPIO_Init+0x204>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_GPIO_Init+0x204>
 8003686:	2300      	movs	r3, #0
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f002 0203 	and.w	r2, r2, #3
 800368e:	0092      	lsls	r2, r2, #2
 8003690:	4093      	lsls	r3, r2
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	4935      	ldr	r1, [pc, #212]	@ (8003770 <HAL_GPIO_Init+0x2ec>)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80036a6:	4b38      	ldr	r3, [pc, #224]	@ (8003788 <HAL_GPIO_Init+0x304>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x246>
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003788 <HAL_GPIO_Init+0x304>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6093      	str	r3, [r2, #8]
 80036d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <HAL_GPIO_Init+0x304>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x270>
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	4a24      	ldr	r2, [pc, #144]	@ (8003788 <HAL_GPIO_Init+0x304>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	60d3      	str	r3, [r2, #12]
 80036fa:	4b23      	ldr	r3, [pc, #140]	@ (8003788 <HAL_GPIO_Init+0x304>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x29a>
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <HAL_GPIO_Init+0x304>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6053      	str	r3, [r2, #4]
 8003724:	4b18      	ldr	r3, [pc, #96]	@ (8003788 <HAL_GPIO_Init+0x304>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x2c4>
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	4a0f      	ldr	r2, [pc, #60]	@ (8003788 <HAL_GPIO_Init+0x304>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3301      	adds	r3, #1
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	f67f aea2 	bls.w	80034a0 <HAL_GPIO_Init+0x1c>
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3724      	adds	r7, #36	@ 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	40013800 	.word	0x40013800
 8003774:	40020000 	.word	0x40020000
 8003778:	40020400 	.word	0x40020400
 800377c:	40020800 	.word	0x40020800
 8003780:	40020c00 	.word	0x40020c00
 8003784:	40021000 	.word	0x40021000
 8003788:	40013c00 	.word	0x40013c00

0800378c <HAL_RCC_OscConfig>:
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
 800379a:	2301      	movs	r3, #1
 800379c:	e267      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d075      	beq.n	8003896 <HAL_RCC_OscConfig+0x10a>
 80037aa:	4b88      	ldr	r3, [pc, #544]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d00c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x44>
 80037b6:	4b85      	ldr	r3, [pc, #532]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d112      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
 80037c2:	4b82      	ldr	r3, [pc, #520]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
 80037d0:	4b7e      	ldr	r3, [pc, #504]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d05b      	beq.n	8003894 <HAL_RCC_OscConfig+0x108>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d157      	bne.n	8003894 <HAL_RCC_OscConfig+0x108>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e242      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f0:	d106      	bne.n	8003800 <HAL_RCC_OscConfig+0x74>
 80037f2:	4b76      	ldr	r3, [pc, #472]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a75      	ldr	r2, [pc, #468]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e01d      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 800380a:	4b70      	ldr	r3, [pc, #448]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6f      	ldr	r2, [pc, #444]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6d      	ldr	r3, [pc, #436]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6c      	ldr	r2, [pc, #432]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003824:	4b69      	ldr	r3, [pc, #420]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a65      	ldr	r2, [pc, #404]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0xe0>
 8003844:	f7fe fcd0 	bl	80021e8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xd2>
 800384c:	f7fe fccc 	bl	80021e8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xd2>
 800385a:	2303      	movs	r3, #3
 800385c:	e207      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 800385e:	4b5b      	ldr	r3, [pc, #364]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xc0>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
 800386c:	f7fe fcbc 	bl	80021e8 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xfa>
 8003874:	f7fe fcb8 	bl	80021e8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	@ 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xfa>
 8003882:	2303      	movs	r3, #3
 8003884:	e1f3      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003886:	4b51      	ldr	r3, [pc, #324]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0xe8>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
 8003894:	bf00      	nop
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x1de>
 80038a2:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x13a>
 80038ae:	4b47      	ldr	r3, [pc, #284]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
 80038ba:	4b44      	ldr	r3, [pc, #272]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
 80038c6:	4b41      	ldr	r3, [pc, #260]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
 80038da:	2301      	movs	r3, #1
 80038dc:	e1c7      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 80038de:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4937      	ldr	r1, [pc, #220]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_OscConfig+0x1b2>
 80038fc:	4b34      	ldr	r3, [pc, #208]	@ (80039d0 <HAL_RCC_OscConfig+0x244>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f7fe fc71 	bl	80021e8 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x190>
 800390a:	f7fe fc6d 	bl	80021e8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x190>
 8003918:	2303      	movs	r3, #3
 800391a:	e1a8      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 800391c:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x17e>
 8003928:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4925      	ldr	r1, [pc, #148]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
 800393e:	4b24      	ldr	r3, [pc, #144]	@ (80039d0 <HAL_RCC_OscConfig+0x244>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f7fe fc50 	bl	80021e8 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1d2>
 800394c:	f7fe fc4c 	bl	80021e8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1d2>
 800395a:	2303      	movs	r3, #3
 800395c:	e187      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 800395e:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1c0>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d036      	beq.n	80039e4 <HAL_RCC_OscConfig+0x258>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_RCC_OscConfig+0x220>
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <HAL_RCC_OscConfig+0x248>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f7fe fc30 	bl	80021e8 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x212>
 800398c:	f7fe fc2c 	bl	80021e8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x212>
 800399a:	2303      	movs	r3, #3
 800399c:	e167      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_RCC_OscConfig+0x240>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x200>
 80039aa:	e01b      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
 80039ac:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <HAL_RCC_OscConfig+0x248>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f7fe fc19 	bl	80021e8 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]
 80039b8:	e00e      	b.n	80039d8 <HAL_RCC_OscConfig+0x24c>
 80039ba:	f7fe fc15 	bl	80021e8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d907      	bls.n	80039d8 <HAL_RCC_OscConfig+0x24c>
 80039c8:	2303      	movs	r3, #3
 80039ca:	e150      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470000 	.word	0x42470000
 80039d4:	42470e80 	.word	0x42470e80
 80039d8:	4b88      	ldr	r3, [pc, #544]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ea      	bne.n	80039ba <HAL_RCC_OscConfig+0x22e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8097 	beq.w	8003b20 <HAL_RCC_OscConfig+0x394>
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
 80039f6:	4b81      	ldr	r3, [pc, #516]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x296>
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b7d      	ldr	r3, [pc, #500]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a12:	4b7a      	ldr	r3, [pc, #488]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
 8003a22:	4b77      	ldr	r3, [pc, #476]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2d4>
 8003a2e:	4b74      	ldr	r3, [pc, #464]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	f7fe fbd5 	bl	80021e8 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
 8003a42:	f7fe fbd1 	bl	80021e8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
 8003a50:	2303      	movs	r3, #3
 8003a52:	e10c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003a54:	4b6a      	ldr	r3, [pc, #424]	@ (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2b6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2ea>
 8003a68:	4b64      	ldr	r3, [pc, #400]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	4a63      	ldr	r2, [pc, #396]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x30c>
 8003a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a5e      	ldr	r2, [pc, #376]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a98:	4b58      	ldr	r3, [pc, #352]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a57      	ldr	r2, [pc, #348]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa4:	4b55      	ldr	r3, [pc, #340]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a54      	ldr	r2, [pc, #336]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x358>
 8003ab8:	f7fe fb96 	bl	80021e8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
 8003ac0:	f7fe fb92 	bl	80021e8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0cb      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003ad6:	4b49      	ldr	r3, [pc, #292]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x334>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x382>
 8003ae4:	f7fe fb80 	bl	80021e8 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x376>
 8003aec:	f7fe fb7c 	bl	80021e8 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x376>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0b5      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003b02:	4b3e      	ldr	r3, [pc, #248]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ee      	bne.n	8003aec <HAL_RCC_OscConfig+0x360>
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x394>
 8003b14:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	4a38      	ldr	r2, [pc, #224]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a1 	beq.w	8003c6c <HAL_RCC_OscConfig+0x4e0>
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d05c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x464>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d141      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x436>
 8003b3e:	4b31      	ldr	r3, [pc, #196]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f7fe fb50 	bl	80021e8 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
 8003b4c:	f7fe fb4c 	bl	80021e8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e087      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003b5e:	4b27      	ldr	r3, [pc, #156]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	491b      	ldr	r1, [pc, #108]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f7fe fb25 	bl	80021e8 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x428>
 8003ba2:	f7fe fb21 	bl	80021e8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x428>
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e05c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003bb4:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x416>
 8003bc0:	e054      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f7fe fb0e 	bl	80021e8 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x456>
 8003bd0:	f7fe fb0a 	bl	80021e8 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x456>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x444>
 8003bee:	e03d      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x47c>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e038      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42470060 	.word	0x42470060
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d028      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d121      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c3e:	0192      	lsls	r2, r2, #6
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0cc      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
 8003c90:	4b68      	ldr	r3, [pc, #416]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
 8003c9e:	4b65      	ldr	r3, [pc, #404]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	4b63      	ldr	r3, [pc, #396]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x8a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x60>
 8003cd0:	4b59      	ldr	r3, [pc, #356]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x78>
 8003ce8:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a52      	ldr	r2, [pc, #328]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cf2:	6093      	str	r3, [r2, #8]
 8003cf4:	4b50      	ldr	r3, [pc, #320]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d044      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x120>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xae>
 8003d1a:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d119      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xbe>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xce>
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e067      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
 8003d5a:	4b37      	ldr	r3, [pc, #220]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4934      	ldr	r1, [pc, #208]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]
 8003d6c:	f7fe fa3c 	bl	80021e8 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
 8003d74:	f7fe fa38 	bl	80021e8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xf8>
 8003d9c:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d20c      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
 8003daa:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x166>
 8003dd0:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x186>
 8003dee:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	@ (8003e3c <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe f99c 	bl	8002160 <HAL_InitTick>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08005b20 	.word	0x08005b20
 8003e40:	20000000 	.word	0x20000000
 8003e44:	20000004 	.word	0x20000004

08003e48 <HAL_RCC_GetSysClockFreq>:
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b094      	sub	sp, #80	@ 0x50
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	2300      	movs	r3, #0
 8003e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e54:	2300      	movs	r3, #0
 8003e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e58:	2300      	movs	r3, #0
 8003e5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e60:	4b79      	ldr	r3, [pc, #484]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00d      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x40>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	f200 80e1 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x34>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7a:	e0db      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e7c:	4b73      	ldr	r3, [pc, #460]	@ (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e80:	e0db      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
 8003e82:	4b73      	ldr	r3, [pc, #460]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e86:	e0d8      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
 8003e88:	4b6f      	ldr	r3, [pc, #444]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e92:	4b6d      	ldr	r3, [pc, #436]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x11e>
 8003e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ea8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	f04f 0000 	mov.w	r0, #0
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	0159      	lsls	r1, r3, #5
 8003ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ecc:	0150      	lsls	r0, r2, #5
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	1a51      	subs	r1, r2, r1
 8003ed6:	6139      	str	r1, [r7, #16]
 8003ed8:	4629      	mov	r1, r5
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eec:	4659      	mov	r1, fp
 8003eee:	018b      	lsls	r3, r1, #6
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	018a      	lsls	r2, r1, #6
 8003efa:	4651      	mov	r1, sl
 8003efc:	ebb2 0801 	subs.w	r8, r2, r1
 8003f00:	4659      	mov	r1, fp
 8003f02:	eb63 0901 	sbc.w	r9, r3, r1
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1a:	4690      	mov	r8, r2
 8003f1c:	4699      	mov	r9, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	eb18 0303 	adds.w	r3, r8, r3
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	462b      	mov	r3, r5
 8003f28:	eb49 0303 	adc.w	r3, r9, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	024b      	lsls	r3, r1, #9
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f44:	4621      	mov	r1, r4
 8003f46:	024a      	lsls	r2, r1, #9
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4e:	2200      	movs	r2, #0
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f58:	f7fc fcc8 	bl	80008ec <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f64:	e058      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x1d0>
 8003f66:	4b38      	ldr	r3, [pc, #224]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	4611      	mov	r1, r2
 8003f72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	0159      	lsls	r1, r3, #5
 8003f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f92:	0150      	lsls	r0, r2, #5
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4641      	mov	r1, r8
 8003f9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	00eb      	lsls	r3, r5, #3
 8003fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fce:	00e2      	lsls	r2, r4, #3
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	461d      	mov	r5, r3
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	18e3      	adds	r3, r4, r3
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	464b      	mov	r3, r9
 8003fdc:	eb45 0303 	adc.w	r3, r5, r3
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	028b      	lsls	r3, r1, #10
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	028a      	lsls	r2, r1, #10
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	61fa      	str	r2, [r7, #28]
 8004008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400c:	f7fc fc6e 	bl	80008ec <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	643b      	str	r3, [r7, #64]	@ 0x40
 8004028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004032:	e002      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
 8004034:	4b05      	ldr	r3, [pc, #20]	@ (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004038:	bf00      	nop
 800403a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403c:	4618      	mov	r0, r3
 800403e:	3750      	adds	r7, #80	@ 0x50
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	00f42400 	.word	0x00f42400
 8004050:	007a1200 	.word	0x007a1200

08004054 <HAL_RCC_GetHCLKFreq>:
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
 8004058:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <HAL_RCC_GetHCLKFreq+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000000 	.word	0x20000000

0800406c <HAL_RCC_GetPCLK1Freq>:
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
 8004070:	f7ff fff0 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0a9b      	lsrs	r3, r3, #10
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	@ (8004090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	08005b30 	.word	0x08005b30

08004094 <HAL_RCC_GetPCLK2Freq>:
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
 8004098:	f7ff ffdc 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0b5b      	lsrs	r3, r3, #13
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	@ (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	08005b30 	.word	0x08005b30

080040bc <HAL_TIM_Base_Init>:
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_Base_Init+0x12>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e041      	b.n	8004152 <HAL_TIM_Base_Init+0x96>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_TIM_Base_Init+0x2c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd fea8 	bl	8001e38 <HAL_TIM_Base_MspInit>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f000 fa7a 	bl	80045f4 <TIM_Base_SetConfig>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004150:	2300      	movs	r3, #0
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_TIM_Base_Start_IT>:
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d001      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x18>
 8004170:	2301      	movs	r3, #1
 8004172:	e044      	b.n	80041fe <HAL_TIM_Base_Start_IT+0xa2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1e      	ldr	r2, [pc, #120]	@ (800420c <HAL_TIM_Base_Start_IT+0xb0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	d013      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004210 <HAL_TIM_Base_Start_IT+0xb4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_TIM_Base_Start_IT+0xb8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	@ (8004218 <HAL_TIM_Base_Start_IT+0xbc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_TIM_Base_Start_IT+0xc0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d111      	bne.n	80041ec <HAL_TIM_Base_Start_IT+0x90>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d010      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0xa0>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e007      	b.n	80041fc <HAL_TIM_Base_Start_IT+0xa0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	2300      	movs	r3, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40014000 	.word	0x40014000

08004220 <HAL_TIM_IRQHandler>:
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d020      	beq.n	8004284 <HAL_TIM_IRQHandler+0x64>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <HAL_TIM_IRQHandler+0x64>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0202 	mvn.w	r2, #2
 8004254:	611a      	str	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	771a      	strb	r2, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x52>
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9a3 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x5e>
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f995 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f9a6 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d020      	beq.n	80042d0 <HAL_TIM_IRQHandler+0xb0>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01b      	beq.n	80042d0 <HAL_TIM_IRQHandler+0xb0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0204 	mvn.w	r2, #4
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	771a      	strb	r2, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0x9e>
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f97d 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0xaa>
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f96f 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f980 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d020      	beq.n	800431c <HAL_TIM_IRQHandler+0xfc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <HAL_TIM_IRQHandler+0xfc>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0208 	mvn.w	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0xea>
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f957 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xf6>
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f949 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f95a 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	d020      	beq.n	8004368 <HAL_TIM_IRQHandler+0x148>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01b      	beq.n	8004368 <HAL_TIM_IRQHandler+0x148>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0210 	mvn.w	r2, #16
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2208      	movs	r2, #8
 800433e:	771a      	strb	r2, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x136>
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f931 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0x142>
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f923 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f934 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_TIM_IRQHandler+0x16c>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HAL_TIM_IRQHandler+0x16c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0201 	mvn.w	r2, #1
 8004384:	611a      	str	r2, [r3, #16]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f901 	bl	800458e <HAL_TIM_PeriodElapsedCallback>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x190>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x190>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043a8:	611a      	str	r2, [r3, #16]
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fac0 	bl	8004930 <HAL_TIMEx_BreakCallback>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x1b4>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x1b4>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043cc:	611a      	str	r2, [r3, #16]
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f905 	bl	80045de <HAL_TIM_TriggerCallback>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x1d8>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x1d8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0220 	mvn.w	r2, #32
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa92 	bl	800491c <HAL_TIMEx_CommutCallback>
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_ConfigClockSource>:
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIM_ConfigClockSource+0x1c>
 8004418:	2302      	movs	r3, #2
 800441a:	e0b4      	b.n	8004586 <HAL_TIM_ConfigClockSource+0x186>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004454:	d03e      	beq.n	80044d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800445a:	f200 8087 	bhi.w	800456c <HAL_TIM_ConfigClockSource+0x16c>
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	f000 8086 	beq.w	8004572 <HAL_TIM_ConfigClockSource+0x172>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446a:	d87f      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b70      	cmp	r3, #112	@ 0x70
 800446e:	d01a      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004470:	2b70      	cmp	r3, #112	@ 0x70
 8004472:	d87b      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b60      	cmp	r3, #96	@ 0x60
 8004476:	d050      	beq.n	800451a <HAL_TIM_ConfigClockSource+0x11a>
 8004478:	2b60      	cmp	r3, #96	@ 0x60
 800447a:	d877      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b50      	cmp	r3, #80	@ 0x50
 800447e:	d03c      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0xfa>
 8004480:	2b50      	cmp	r3, #80	@ 0x50
 8004482:	d873      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b40      	cmp	r3, #64	@ 0x40
 8004486:	d058      	beq.n	800453a <HAL_TIM_ConfigClockSource+0x13a>
 8004488:	2b40      	cmp	r3, #64	@ 0x40
 800448a:	d86f      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b30      	cmp	r3, #48	@ 0x30
 800448e:	d064      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x15a>
 8004490:	2b30      	cmp	r3, #48	@ 0x30
 8004492:	d86b      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b20      	cmp	r3, #32
 8004496:	d060      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x15a>
 8004498:	2b20      	cmp	r3, #32
 800449a:	d867      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d05c      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x15a>
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d05a      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x15a>
 80044a4:	e062      	b.n	800456c <HAL_TIM_ConfigClockSource+0x16c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6899      	ldr	r1, [r3, #8]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f000 f9a3 	bl	8004800 <TIM_ETR_SetConfig>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	e04f      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x174>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	6899      	ldr	r1, [r3, #8]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f000 f98c 	bl	8004800 <TIM_ETR_SetConfig>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	e03c      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x174>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6859      	ldr	r1, [r3, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	461a      	mov	r2, r3
 8004508:	f000 f900 	bl	800470c <TIM_TI1_ConfigInputStage>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2150      	movs	r1, #80	@ 0x50
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f959 	bl	80047ca <TIM_ITRx_SetConfig>
 8004518:	e02c      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x174>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6859      	ldr	r1, [r3, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	461a      	mov	r2, r3
 8004528:	f000 f91f 	bl	800476a <TIM_TI2_ConfigInputStage>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2160      	movs	r1, #96	@ 0x60
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f949 	bl	80047ca <TIM_ITRx_SetConfig>
 8004538:	e01c      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x174>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6859      	ldr	r1, [r3, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	461a      	mov	r2, r3
 8004548:	f000 f8e0 	bl	800470c <TIM_TI1_ConfigInputStage>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2140      	movs	r1, #64	@ 0x40
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f939 	bl	80047ca <TIM_ITRx_SetConfig>
 8004558:	e00c      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x174>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f000 f930 	bl	80047ca <TIM_ITRx_SetConfig>
 800456a:	e003      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x174>
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	e000      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x174>
 8004572:	bf00      	nop
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_TIM_PeriodElapsedCallback>:
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIM_OC_DelayElapsedCallback>:
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_TIM_IC_CaptureCallback>:
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_PWM_PulseFinishedCallback>:
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_TriggerCallback>:
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <TIM_Base_SetConfig>:
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3a      	ldr	r2, [pc, #232]	@ (80046f0 <TIM_Base_SetConfig+0xfc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00f      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004612:	d00b      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a37      	ldr	r2, [pc, #220]	@ (80046f4 <TIM_Base_SetConfig+0x100>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a36      	ldr	r2, [pc, #216]	@ (80046f8 <TIM_Base_SetConfig+0x104>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a35      	ldr	r2, [pc, #212]	@ (80046fc <TIM_Base_SetConfig+0x108>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <TIM_Base_SetConfig+0x4a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2b      	ldr	r2, [pc, #172]	@ (80046f0 <TIM_Base_SetConfig+0xfc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01b      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464c:	d017      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a28      	ldr	r2, [pc, #160]	@ (80046f4 <TIM_Base_SetConfig+0x100>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a27      	ldr	r2, [pc, #156]	@ (80046f8 <TIM_Base_SetConfig+0x104>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00f      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a26      	ldr	r2, [pc, #152]	@ (80046fc <TIM_Base_SetConfig+0x108>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a25      	ldr	r2, [pc, #148]	@ (8004700 <TIM_Base_SetConfig+0x10c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a24      	ldr	r2, [pc, #144]	@ (8004704 <TIM_Base_SetConfig+0x110>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a23      	ldr	r2, [pc, #140]	@ (8004708 <TIM_Base_SetConfig+0x114>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0x9c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0e      	ldr	r2, [pc, #56]	@ (80046f0 <TIM_Base_SetConfig+0xfc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d103      	bne.n	80046c4 <TIM_Base_SetConfig+0xd0>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	615a      	str	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <TIM_Base_SetConfig+0xee>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f023 0201 	bic.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800

0800470c <TIM_TI1_ConfigInputStage>:
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	621a      	str	r2, [r3, #32]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 030a 	bic.w	r3, r3, #10
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	619a      	str	r2, [r3, #24]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <TIM_TI2_ConfigInputStage>:
 800476a:	b480      	push	{r7}
 800476c:	b087      	sub	sp, #28
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f023 0210 	bic.w	r2, r3, #16
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	621a      	str	r2, [r3, #32]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	031b      	lsls	r3, r3, #12
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	619a      	str	r2, [r3, #24]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <TIM_ITRx_SetConfig>:
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f043 0307 	orr.w	r3, r3, #7
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <TIM_ETR_SetConfig>:
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	431a      	orrs	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e050      	b.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1c      	ldr	r2, [pc, #112]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a4:	d013      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a18      	ldr	r2, [pc, #96]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a16      	ldr	r2, [pc, #88]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a13      	ldr	r2, [pc, #76]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10c      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80048f8:	2300      	movs	r3, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40014000 	.word	0x40014000

0800491c <HAL_TIMEx_CommutCallback>:
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIMEx_BreakCallback>:
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_UART_Init>:
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Init+0x12>
 8004952:	2301      	movs	r3, #1
 8004954:	e042      	b.n	80049dc <HAL_UART_Init+0x98>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_UART_Init+0x2c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd fa8a 	bl	8001e84 <HAL_UART_MspInit>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2224      	movs	r2, #36	@ 0x24
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f973 	bl	8004c74 <UART_SetConfig>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800499c:	611a      	str	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049ac:	615a      	str	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80049da:	2300      	movs	r3, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_UART_Transmit>:
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	@ 0x28
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d175      	bne.n	8004af0 <HAL_UART_Transmit+0x10c>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_UART_Transmit+0x2c>
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Transmit+0x30>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e06e      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2221      	movs	r2, #33	@ 0x21
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a22:	f7fd fbe1 	bl	80021e8 <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3c:	d108      	bne.n	8004a50 <HAL_UART_Transmit+0x6c>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_UART_Transmit+0x6c>
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e003      	b.n	8004a58 <HAL_UART_Transmit+0x74>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e02e      	b.n	8004ab8 <HAL_UART_Transmit+0xd4>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2200      	movs	r2, #0
 8004a62:	2180      	movs	r1, #128	@ 0x80
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f848 	bl	8004afa <UART_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_UART_Transmit+0x98>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e03a      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <HAL_UART_Transmit+0xb6>
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	3302      	adds	r3, #2
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	e007      	b.n	8004aaa <HAL_UART_Transmit+0xc6>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1cb      	bne.n	8004a5a <HAL_UART_Transmit+0x76>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2140      	movs	r1, #64	@ 0x40
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f814 	bl	8004afa <UART_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_UART_Transmit+0x100>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e006      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_UART_Transmit+0x10e>
 8004af0:	2302      	movs	r3, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <UART_WaitOnFlagUntilTimeout>:
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	71fb      	strb	r3, [r7, #7]
 8004b0a:	e03b      	b.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d037      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b14:	f7fd fb68 	bl	80021e8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	6a3a      	ldr	r2, [r7, #32]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d302      	bcc.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x34>
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e03a      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xaa>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d023      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b80      	cmp	r3, #128	@ 0x80
 8004b40:	d020      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b40      	cmp	r3, #64	@ 0x40
 8004b46:	d01d      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d116      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f81d 	bl	8004bac <UART_EndRxTransfer>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2208      	movs	r2, #8
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b80:	2301      	movs	r3, #1
 8004b82:	e00f      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xaa>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d0b4      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x12>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <UART_EndRxTransfer>:
 8004bac:	b480      	push	{r7}
 8004bae:	b095      	sub	sp, #84	@ 0x54
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bd4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_EndRxTransfer+0x8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	623b      	str	r3, [r7, #32]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_EndRxTransfer+0x3c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d119      	bne.n	8004c58 <UART_EndRxTransfer+0xac>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f023 0310 	bic.w	r3, r3, #16
 8004c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c44:	61ba      	str	r2, [r7, #24]
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	6979      	ldr	r1, [r7, #20]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_EndRxTransfer+0x78>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c66:	bf00      	nop
 8004c68:	3754      	adds	r7, #84	@ 0x54
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <UART_SetConfig>:
 8004c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c78:	b0c0      	sub	sp, #256	@ 0x100
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	68d9      	ldr	r1, [r3, #12]
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	ea40 0301 	orr.w	r3, r0, r1
 8004c9c:	6113      	str	r3, [r2, #16]
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ccc:	f021 010c 	bic.w	r1, r1, #12
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	60d3      	str	r3, [r2, #12]
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	6999      	ldr	r1, [r3, #24]
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	ea40 0301 	orr.w	r3, r0, r1
 8004cfa:	6153      	str	r3, [r2, #20]
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b8f      	ldr	r3, [pc, #572]	@ (8004f40 <UART_SetConfig+0x2cc>)
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d005      	beq.n	8004d14 <UART_SetConfig+0xa0>
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f44 <UART_SetConfig+0x2d0>)
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d104      	bne.n	8004d1e <UART_SetConfig+0xaa>
 8004d14:	f7ff f9be 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8004d18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d1c:	e003      	b.n	8004d26 <UART_SetConfig+0xb2>
 8004d1e:	f7ff f9a5 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8004d22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d30:	f040 810c 	bne.w	8004f4c <UART_SetConfig+0x2d8>
 8004d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d46:	4622      	mov	r2, r4
 8004d48:	462b      	mov	r3, r5
 8004d4a:	1891      	adds	r1, r2, r2
 8004d4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d4e:	415b      	adcs	r3, r3
 8004d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d56:	4621      	mov	r1, r4
 8004d58:	eb12 0801 	adds.w	r8, r2, r1
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	eb43 0901 	adc.w	r9, r3, r1
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d76:	4690      	mov	r8, r2
 8004d78:	4699      	mov	r9, r3
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	eb18 0303 	adds.w	r3, r8, r3
 8004d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d84:	462b      	mov	r3, r5
 8004d86:	eb49 0303 	adc.w	r3, r9, r3
 8004d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004da2:	460b      	mov	r3, r1
 8004da4:	18db      	adds	r3, r3, r3
 8004da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004da8:	4613      	mov	r3, r2
 8004daa:	eb42 0303 	adc.w	r3, r2, r3
 8004dae:	657b      	str	r3, [r7, #84]	@ 0x54
 8004db0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004db4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004db8:	f7fb fd98 	bl	80008ec <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4b61      	ldr	r3, [pc, #388]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	011c      	lsls	r4, r3, #4
 8004dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004dd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	464b      	mov	r3, r9
 8004de0:	1891      	adds	r1, r2, r2
 8004de2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004de4:	415b      	adcs	r3, r3
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dec:	4641      	mov	r1, r8
 8004dee:	eb12 0a01 	adds.w	sl, r2, r1
 8004df2:	4649      	mov	r1, r9
 8004df4:	eb43 0b01 	adc.w	fp, r3, r1
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e0c:	4692      	mov	sl, r2
 8004e0e:	469b      	mov	fp, r3
 8004e10:	4643      	mov	r3, r8
 8004e12:	eb1a 0303 	adds.w	r3, sl, r3
 8004e16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	18db      	adds	r3, r3, r3
 8004e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e3e:	4613      	mov	r3, r2
 8004e40:	eb42 0303 	adc.w	r3, r2, r3
 8004e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e4e:	f7fb fd4d 	bl	80008ec <__aeabi_uldivmod>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	4b3b      	ldr	r3, [pc, #236]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	2264      	movs	r2, #100	@ 0x64
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	1acb      	subs	r3, r1, r3
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e6e:	4b36      	ldr	r3, [pc, #216]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004e70:	fba3 2302 	umull	r2, r3, r3, r2
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e7c:	441c      	add	r4, r3
 8004e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	1891      	adds	r1, r2, r2
 8004e96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e98:	415b      	adcs	r3, r3
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	1851      	adds	r1, r2, r1
 8004ea4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	414b      	adcs	r3, r1
 8004eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004eb8:	4659      	mov	r1, fp
 8004eba:	00cb      	lsls	r3, r1, #3
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec2:	4651      	mov	r1, sl
 8004ec4:	00ca      	lsls	r2, r1, #3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4642      	mov	r2, r8
 8004ece:	189b      	adds	r3, r3, r2
 8004ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	460a      	mov	r2, r1
 8004ed8:	eb42 0303 	adc.w	r3, r2, r3
 8004edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004eec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	18db      	adds	r3, r3, r3
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004efa:	4613      	mov	r3, r2
 8004efc:	eb42 0303 	adc.w	r3, r2, r3
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f0a:	f7fb fcef 	bl	80008ec <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004f14:	fba3 1302 	umull	r1, r3, r3, r2
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	2164      	movs	r1, #100	@ 0x64
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	3332      	adds	r3, #50	@ 0x32
 8004f26:	4a08      	ldr	r2, [pc, #32]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	f003 0207 	and.w	r2, r3, #7
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4422      	add	r2, r4
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	e106      	b.n	800514c <UART_SetConfig+0x4d8>
 8004f3e:	bf00      	nop
 8004f40:	40011000 	.word	0x40011000
 8004f44:	40011400 	.word	0x40011400
 8004f48:	51eb851f 	.word	0x51eb851f
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f5e:	4642      	mov	r2, r8
 8004f60:	464b      	mov	r3, r9
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	6239      	str	r1, [r7, #32]
 8004f66:	415b      	adcs	r3, r3
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f6e:	4641      	mov	r1, r8
 8004f70:	1854      	adds	r4, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb43 0501 	adc.w	r5, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	00eb      	lsls	r3, r5, #3
 8004f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f86:	00e2      	lsls	r2, r4, #3
 8004f88:	4614      	mov	r4, r2
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	4643      	mov	r3, r8
 8004f8e:	18e3      	adds	r3, r4, r3
 8004f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f94:	464b      	mov	r3, r9
 8004f96:	eb45 0303 	adc.w	r3, r5, r3
 8004f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004faa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fba:	4629      	mov	r1, r5
 8004fbc:	008b      	lsls	r3, r1, #2
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	008a      	lsls	r2, r1, #2
 8004fc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fcc:	f7fb fc8e 	bl	80008ec <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b60      	ldr	r3, [pc, #384]	@ (8005158 <UART_SetConfig+0x4e4>)
 8004fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	011c      	lsls	r4, r3, #4
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fe8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	61b9      	str	r1, [r7, #24]
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005000:	4641      	mov	r1, r8
 8005002:	1851      	adds	r1, r2, r1
 8005004:	6139      	str	r1, [r7, #16]
 8005006:	4649      	mov	r1, r9
 8005008:	414b      	adcs	r3, r1
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005018:	4659      	mov	r1, fp
 800501a:	00cb      	lsls	r3, r1, #3
 800501c:	4651      	mov	r1, sl
 800501e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005022:	4651      	mov	r1, sl
 8005024:	00ca      	lsls	r2, r1, #3
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	4603      	mov	r3, r0
 800502c:	4642      	mov	r2, r8
 800502e:	189b      	adds	r3, r3, r2
 8005030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005034:	464b      	mov	r3, r9
 8005036:	460a      	mov	r2, r1
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800504a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005058:	4649      	mov	r1, r9
 800505a:	008b      	lsls	r3, r1, #2
 800505c:	4641      	mov	r1, r8
 800505e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005062:	4641      	mov	r1, r8
 8005064:	008a      	lsls	r2, r1, #2
 8005066:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800506a:	f7fb fc3f 	bl	80008ec <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4611      	mov	r1, r2
 8005074:	4b38      	ldr	r3, [pc, #224]	@ (8005158 <UART_SetConfig+0x4e4>)
 8005076:	fba3 2301 	umull	r2, r3, r3, r1
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2264      	movs	r2, #100	@ 0x64
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	1acb      	subs	r3, r1, r3
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	3332      	adds	r3, #50	@ 0x32
 8005088:	4a33      	ldr	r2, [pc, #204]	@ (8005158 <UART_SetConfig+0x4e4>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005094:	441c      	add	r4, r3
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509a:	2200      	movs	r2, #0
 800509c:	673b      	str	r3, [r7, #112]	@ 0x70
 800509e:	677a      	str	r2, [r7, #116]	@ 0x74
 80050a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	415b      	adcs	r3, r3
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6039      	str	r1, [r7, #0]
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050e6:	464b      	mov	r3, r9
 80050e8:	460a      	mov	r2, r1
 80050ea:	eb42 0303 	adc.w	r3, r2, r3
 80050ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80050fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005108:	4649      	mov	r1, r9
 800510a:	008b      	lsls	r3, r1, #2
 800510c:	4641      	mov	r1, r8
 800510e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005112:	4641      	mov	r1, r8
 8005114:	008a      	lsls	r2, r1, #2
 8005116:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800511a:	f7fb fbe7 	bl	80008ec <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <UART_SetConfig+0x4e4>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	@ 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	3332      	adds	r3, #50	@ 0x32
 8005136:	4a08      	ldr	r2, [pc, #32]	@ (8005158 <UART_SetConfig+0x4e4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 020f 	and.w	r2, r3, #15
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4422      	add	r2, r4
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	bf00      	nop
 800514e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005152:	46bd      	mov	sp, r7
 8005154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005158:	51eb851f 	.word	0x51eb851f

0800515c <siprintf>:
 800515c:	b40e      	push	{r1, r2, r3}
 800515e:	b500      	push	{lr}
 8005160:	b09c      	sub	sp, #112	@ 0x70
 8005162:	ab1d      	add	r3, sp, #116	@ 0x74
 8005164:	9002      	str	r0, [sp, #8]
 8005166:	9006      	str	r0, [sp, #24]
 8005168:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800516c:	4809      	ldr	r0, [pc, #36]	@ (8005194 <siprintf+0x38>)
 800516e:	9107      	str	r1, [sp, #28]
 8005170:	9104      	str	r1, [sp, #16]
 8005172:	4909      	ldr	r1, [pc, #36]	@ (8005198 <siprintf+0x3c>)
 8005174:	f853 2b04 	ldr.w	r2, [r3], #4
 8005178:	9105      	str	r1, [sp, #20]
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	a902      	add	r1, sp, #8
 8005180:	f000 f994 	bl	80054ac <_svfiprintf_r>
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	b01c      	add	sp, #112	@ 0x70
 800518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005190:	b003      	add	sp, #12
 8005192:	4770      	bx	lr
 8005194:	2000000c 	.word	0x2000000c
 8005198:	ffff0208 	.word	0xffff0208

0800519c <memset>:
 800519c:	4402      	add	r2, r0
 800519e:	4603      	mov	r3, r0
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d100      	bne.n	80051a6 <memset+0xa>
 80051a4:	4770      	bx	lr
 80051a6:	f803 1b01 	strb.w	r1, [r3], #1
 80051aa:	e7f9      	b.n	80051a0 <memset+0x4>

080051ac <__errno>:
 80051ac:	4b01      	ldr	r3, [pc, #4]	@ (80051b4 <__errno+0x8>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	2000000c 	.word	0x2000000c

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	@ (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	@ (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	@ (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	@ (80051fc <__libc_init_array+0x44>)
 80051cc:	f000 fc66 	bl	8005a9c <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	08005b7c 	.word	0x08005b7c
 80051f4:	08005b7c 	.word	0x08005b7c
 80051f8:	08005b7c 	.word	0x08005b7c
 80051fc:	08005b80 	.word	0x08005b80

08005200 <__retarget_lock_acquire_recursive>:
 8005200:	4770      	bx	lr

08005202 <__retarget_lock_release_recursive>:
 8005202:	4770      	bx	lr

08005204 <_free_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4605      	mov	r5, r0
 8005208:	2900      	cmp	r1, #0
 800520a:	d041      	beq.n	8005290 <_free_r+0x8c>
 800520c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005210:	1f0c      	subs	r4, r1, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	bfb8      	it	lt
 8005216:	18e4      	addlt	r4, r4, r3
 8005218:	f000 f8e0 	bl	80053dc <__malloc_lock>
 800521c:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <_free_r+0x90>)
 800521e:	6813      	ldr	r3, [r2, #0]
 8005220:	b933      	cbnz	r3, 8005230 <_free_r+0x2c>
 8005222:	6063      	str	r3, [r4, #4]
 8005224:	6014      	str	r4, [r2, #0]
 8005226:	4628      	mov	r0, r5
 8005228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800522c:	f000 b8dc 	b.w	80053e8 <__malloc_unlock>
 8005230:	42a3      	cmp	r3, r4
 8005232:	d908      	bls.n	8005246 <_free_r+0x42>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	1821      	adds	r1, r4, r0
 8005238:	428b      	cmp	r3, r1
 800523a:	bf01      	itttt	eq
 800523c:	6819      	ldreq	r1, [r3, #0]
 800523e:	685b      	ldreq	r3, [r3, #4]
 8005240:	1809      	addeq	r1, r1, r0
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	e7ed      	b.n	8005222 <_free_r+0x1e>
 8005246:	461a      	mov	r2, r3
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b10b      	cbz	r3, 8005250 <_free_r+0x4c>
 800524c:	42a3      	cmp	r3, r4
 800524e:	d9fa      	bls.n	8005246 <_free_r+0x42>
 8005250:	6811      	ldr	r1, [r2, #0]
 8005252:	1850      	adds	r0, r2, r1
 8005254:	42a0      	cmp	r0, r4
 8005256:	d10b      	bne.n	8005270 <_free_r+0x6c>
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	4401      	add	r1, r0
 800525c:	1850      	adds	r0, r2, r1
 800525e:	4283      	cmp	r3, r0
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	d1e0      	bne.n	8005226 <_free_r+0x22>
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	6053      	str	r3, [r2, #4]
 800526a:	4408      	add	r0, r1
 800526c:	6010      	str	r0, [r2, #0]
 800526e:	e7da      	b.n	8005226 <_free_r+0x22>
 8005270:	d902      	bls.n	8005278 <_free_r+0x74>
 8005272:	230c      	movs	r3, #12
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	e7d6      	b.n	8005226 <_free_r+0x22>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	1821      	adds	r1, r4, r0
 800527c:	428b      	cmp	r3, r1
 800527e:	bf04      	itt	eq
 8005280:	6819      	ldreq	r1, [r3, #0]
 8005282:	685b      	ldreq	r3, [r3, #4]
 8005284:	6063      	str	r3, [r4, #4]
 8005286:	bf04      	itt	eq
 8005288:	1809      	addeq	r1, r1, r0
 800528a:	6021      	streq	r1, [r4, #0]
 800528c:	6054      	str	r4, [r2, #4]
 800528e:	e7ca      	b.n	8005226 <_free_r+0x22>
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	200008a0 	.word	0x200008a0

08005298 <sbrk_aligned>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4e0f      	ldr	r6, [pc, #60]	@ (80052d8 <sbrk_aligned+0x40>)
 800529c:	460c      	mov	r4, r1
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	4605      	mov	r5, r0
 80052a2:	b911      	cbnz	r1, 80052aa <sbrk_aligned+0x12>
 80052a4:	f000 fba6 	bl	80059f4 <_sbrk_r>
 80052a8:	6030      	str	r0, [r6, #0]
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fba1 	bl	80059f4 <_sbrk_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d103      	bne.n	80052be <sbrk_aligned+0x26>
 80052b6:	f04f 34ff 	mov.w	r4, #4294967295
 80052ba:	4620      	mov	r0, r4
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d0f8      	beq.n	80052ba <sbrk_aligned+0x22>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 fb92 	bl	80059f4 <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d1f2      	bne.n	80052ba <sbrk_aligned+0x22>
 80052d4:	e7ef      	b.n	80052b6 <sbrk_aligned+0x1e>
 80052d6:	bf00      	nop
 80052d8:	2000089c 	.word	0x2000089c

080052dc <_malloc_r>:
 80052dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e0:	1ccd      	adds	r5, r1, #3
 80052e2:	f025 0503 	bic.w	r5, r5, #3
 80052e6:	3508      	adds	r5, #8
 80052e8:	2d0c      	cmp	r5, #12
 80052ea:	bf38      	it	cc
 80052ec:	250c      	movcc	r5, #12
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	4606      	mov	r6, r0
 80052f2:	db01      	blt.n	80052f8 <_malloc_r+0x1c>
 80052f4:	42a9      	cmp	r1, r5
 80052f6:	d904      	bls.n	8005302 <_malloc_r+0x26>
 80052f8:	230c      	movs	r3, #12
 80052fa:	6033      	str	r3, [r6, #0]
 80052fc:	2000      	movs	r0, #0
 80052fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053d8 <_malloc_r+0xfc>
 8005306:	f000 f869 	bl	80053dc <__malloc_lock>
 800530a:	f8d8 3000 	ldr.w	r3, [r8]
 800530e:	461c      	mov	r4, r3
 8005310:	bb44      	cbnz	r4, 8005364 <_malloc_r+0x88>
 8005312:	4629      	mov	r1, r5
 8005314:	4630      	mov	r0, r6
 8005316:	f7ff ffbf 	bl	8005298 <sbrk_aligned>
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	4604      	mov	r4, r0
 800531e:	d158      	bne.n	80053d2 <_malloc_r+0xf6>
 8005320:	f8d8 4000 	ldr.w	r4, [r8]
 8005324:	4627      	mov	r7, r4
 8005326:	2f00      	cmp	r7, #0
 8005328:	d143      	bne.n	80053b2 <_malloc_r+0xd6>
 800532a:	2c00      	cmp	r4, #0
 800532c:	d04b      	beq.n	80053c6 <_malloc_r+0xea>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	4639      	mov	r1, r7
 8005332:	4630      	mov	r0, r6
 8005334:	eb04 0903 	add.w	r9, r4, r3
 8005338:	f000 fb5c 	bl	80059f4 <_sbrk_r>
 800533c:	4581      	cmp	r9, r0
 800533e:	d142      	bne.n	80053c6 <_malloc_r+0xea>
 8005340:	6821      	ldr	r1, [r4, #0]
 8005342:	1a6d      	subs	r5, r5, r1
 8005344:	4629      	mov	r1, r5
 8005346:	4630      	mov	r0, r6
 8005348:	f7ff ffa6 	bl	8005298 <sbrk_aligned>
 800534c:	3001      	adds	r0, #1
 800534e:	d03a      	beq.n	80053c6 <_malloc_r+0xea>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	442b      	add	r3, r5
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	f8d8 3000 	ldr.w	r3, [r8]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	bb62      	cbnz	r2, 80053b8 <_malloc_r+0xdc>
 800535e:	f8c8 7000 	str.w	r7, [r8]
 8005362:	e00f      	b.n	8005384 <_malloc_r+0xa8>
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	1b52      	subs	r2, r2, r5
 8005368:	d420      	bmi.n	80053ac <_malloc_r+0xd0>
 800536a:	2a0b      	cmp	r2, #11
 800536c:	d917      	bls.n	800539e <_malloc_r+0xc2>
 800536e:	1961      	adds	r1, r4, r5
 8005370:	42a3      	cmp	r3, r4
 8005372:	6025      	str	r5, [r4, #0]
 8005374:	bf18      	it	ne
 8005376:	6059      	strne	r1, [r3, #4]
 8005378:	6863      	ldr	r3, [r4, #4]
 800537a:	bf08      	it	eq
 800537c:	f8c8 1000 	streq.w	r1, [r8]
 8005380:	5162      	str	r2, [r4, r5]
 8005382:	604b      	str	r3, [r1, #4]
 8005384:	4630      	mov	r0, r6
 8005386:	f000 f82f 	bl	80053e8 <__malloc_unlock>
 800538a:	f104 000b 	add.w	r0, r4, #11
 800538e:	1d23      	adds	r3, r4, #4
 8005390:	f020 0007 	bic.w	r0, r0, #7
 8005394:	1ac2      	subs	r2, r0, r3
 8005396:	bf1c      	itt	ne
 8005398:	1a1b      	subne	r3, r3, r0
 800539a:	50a3      	strne	r3, [r4, r2]
 800539c:	e7af      	b.n	80052fe <_malloc_r+0x22>
 800539e:	6862      	ldr	r2, [r4, #4]
 80053a0:	42a3      	cmp	r3, r4
 80053a2:	bf0c      	ite	eq
 80053a4:	f8c8 2000 	streq.w	r2, [r8]
 80053a8:	605a      	strne	r2, [r3, #4]
 80053aa:	e7eb      	b.n	8005384 <_malloc_r+0xa8>
 80053ac:	4623      	mov	r3, r4
 80053ae:	6864      	ldr	r4, [r4, #4]
 80053b0:	e7ae      	b.n	8005310 <_malloc_r+0x34>
 80053b2:	463c      	mov	r4, r7
 80053b4:	687f      	ldr	r7, [r7, #4]
 80053b6:	e7b6      	b.n	8005326 <_malloc_r+0x4a>
 80053b8:	461a      	mov	r2, r3
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	42a3      	cmp	r3, r4
 80053be:	d1fb      	bne.n	80053b8 <_malloc_r+0xdc>
 80053c0:	2300      	movs	r3, #0
 80053c2:	6053      	str	r3, [r2, #4]
 80053c4:	e7de      	b.n	8005384 <_malloc_r+0xa8>
 80053c6:	230c      	movs	r3, #12
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	4630      	mov	r0, r6
 80053cc:	f000 f80c 	bl	80053e8 <__malloc_unlock>
 80053d0:	e794      	b.n	80052fc <_malloc_r+0x20>
 80053d2:	6005      	str	r5, [r0, #0]
 80053d4:	e7d6      	b.n	8005384 <_malloc_r+0xa8>
 80053d6:	bf00      	nop
 80053d8:	200008a0 	.word	0x200008a0

080053dc <__malloc_lock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	@ (80053e4 <__malloc_lock+0x8>)
 80053de:	f7ff bf0f 	b.w	8005200 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	20000898 	.word	0x20000898

080053e8 <__malloc_unlock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__malloc_unlock+0x8>)
 80053ea:	f7ff bf0a 	b.w	8005202 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	20000898 	.word	0x20000898

080053f4 <__ssputs_r>:
 80053f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	688e      	ldr	r6, [r1, #8]
 80053fa:	461f      	mov	r7, r3
 80053fc:	42be      	cmp	r6, r7
 80053fe:	680b      	ldr	r3, [r1, #0]
 8005400:	4682      	mov	sl, r0
 8005402:	460c      	mov	r4, r1
 8005404:	4690      	mov	r8, r2
 8005406:	d82d      	bhi.n	8005464 <__ssputs_r+0x70>
 8005408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800540c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005410:	d026      	beq.n	8005460 <__ssputs_r+0x6c>
 8005412:	6965      	ldr	r5, [r4, #20]
 8005414:	6909      	ldr	r1, [r1, #16]
 8005416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800541a:	eba3 0901 	sub.w	r9, r3, r1
 800541e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005422:	1c7b      	adds	r3, r7, #1
 8005424:	444b      	add	r3, r9
 8005426:	106d      	asrs	r5, r5, #1
 8005428:	429d      	cmp	r5, r3
 800542a:	bf38      	it	cc
 800542c:	461d      	movcc	r5, r3
 800542e:	0553      	lsls	r3, r2, #21
 8005430:	d527      	bpl.n	8005482 <__ssputs_r+0x8e>
 8005432:	4629      	mov	r1, r5
 8005434:	f7ff ff52 	bl	80052dc <_malloc_r>
 8005438:	4606      	mov	r6, r0
 800543a:	b360      	cbz	r0, 8005496 <__ssputs_r+0xa2>
 800543c:	6921      	ldr	r1, [r4, #16]
 800543e:	464a      	mov	r2, r9
 8005440:	f000 fae8 	bl	8005a14 <memcpy>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800544a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	6126      	str	r6, [r4, #16]
 8005452:	6165      	str	r5, [r4, #20]
 8005454:	444e      	add	r6, r9
 8005456:	eba5 0509 	sub.w	r5, r5, r9
 800545a:	6026      	str	r6, [r4, #0]
 800545c:	60a5      	str	r5, [r4, #8]
 800545e:	463e      	mov	r6, r7
 8005460:	42be      	cmp	r6, r7
 8005462:	d900      	bls.n	8005466 <__ssputs_r+0x72>
 8005464:	463e      	mov	r6, r7
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	4632      	mov	r2, r6
 800546a:	4641      	mov	r1, r8
 800546c:	f000 faa8 	bl	80059c0 <memmove>
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	1b9b      	subs	r3, r3, r6
 8005474:	60a3      	str	r3, [r4, #8]
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	4433      	add	r3, r6
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	2000      	movs	r0, #0
 800547e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005482:	462a      	mov	r2, r5
 8005484:	f000 fad4 	bl	8005a30 <_realloc_r>
 8005488:	4606      	mov	r6, r0
 800548a:	2800      	cmp	r0, #0
 800548c:	d1e0      	bne.n	8005450 <__ssputs_r+0x5c>
 800548e:	6921      	ldr	r1, [r4, #16]
 8005490:	4650      	mov	r0, sl
 8005492:	f7ff feb7 	bl	8005204 <_free_r>
 8005496:	230c      	movs	r3, #12
 8005498:	f8ca 3000 	str.w	r3, [sl]
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e7e9      	b.n	800547e <__ssputs_r+0x8a>
	...

080054ac <_svfiprintf_r>:
 80054ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	4698      	mov	r8, r3
 80054b2:	898b      	ldrh	r3, [r1, #12]
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	b09d      	sub	sp, #116	@ 0x74
 80054b8:	4607      	mov	r7, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	4614      	mov	r4, r2
 80054be:	d510      	bpl.n	80054e2 <_svfiprintf_r+0x36>
 80054c0:	690b      	ldr	r3, [r1, #16]
 80054c2:	b973      	cbnz	r3, 80054e2 <_svfiprintf_r+0x36>
 80054c4:	2140      	movs	r1, #64	@ 0x40
 80054c6:	f7ff ff09 	bl	80052dc <_malloc_r>
 80054ca:	6028      	str	r0, [r5, #0]
 80054cc:	6128      	str	r0, [r5, #16]
 80054ce:	b930      	cbnz	r0, 80054de <_svfiprintf_r+0x32>
 80054d0:	230c      	movs	r3, #12
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	b01d      	add	sp, #116	@ 0x74
 80054da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054de:	2340      	movs	r3, #64	@ 0x40
 80054e0:	616b      	str	r3, [r5, #20]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054e6:	2320      	movs	r3, #32
 80054e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f0:	2330      	movs	r3, #48	@ 0x30
 80054f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005690 <_svfiprintf_r+0x1e4>
 80054f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054fa:	f04f 0901 	mov.w	r9, #1
 80054fe:	4623      	mov	r3, r4
 8005500:	469a      	mov	sl, r3
 8005502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005506:	b10a      	cbz	r2, 800550c <_svfiprintf_r+0x60>
 8005508:	2a25      	cmp	r2, #37	@ 0x25
 800550a:	d1f9      	bne.n	8005500 <_svfiprintf_r+0x54>
 800550c:	ebba 0b04 	subs.w	fp, sl, r4
 8005510:	d00b      	beq.n	800552a <_svfiprintf_r+0x7e>
 8005512:	465b      	mov	r3, fp
 8005514:	4622      	mov	r2, r4
 8005516:	4629      	mov	r1, r5
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff ff6b 	bl	80053f4 <__ssputs_r>
 800551e:	3001      	adds	r0, #1
 8005520:	f000 80a7 	beq.w	8005672 <_svfiprintf_r+0x1c6>
 8005524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005526:	445a      	add	r2, fp
 8005528:	9209      	str	r2, [sp, #36]	@ 0x24
 800552a:	f89a 3000 	ldrb.w	r3, [sl]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 809f 	beq.w	8005672 <_svfiprintf_r+0x1c6>
 8005534:	2300      	movs	r3, #0
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800553e:	f10a 0a01 	add.w	sl, sl, #1
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	9307      	str	r3, [sp, #28]
 8005546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800554a:	931a      	str	r3, [sp, #104]	@ 0x68
 800554c:	4654      	mov	r4, sl
 800554e:	2205      	movs	r2, #5
 8005550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005554:	484e      	ldr	r0, [pc, #312]	@ (8005690 <_svfiprintf_r+0x1e4>)
 8005556:	f7fa fe4b 	bl	80001f0 <memchr>
 800555a:	9a04      	ldr	r2, [sp, #16]
 800555c:	b9d8      	cbnz	r0, 8005596 <_svfiprintf_r+0xea>
 800555e:	06d0      	lsls	r0, r2, #27
 8005560:	bf44      	itt	mi
 8005562:	2320      	movmi	r3, #32
 8005564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005568:	0711      	lsls	r1, r2, #28
 800556a:	bf44      	itt	mi
 800556c:	232b      	movmi	r3, #43	@ 0x2b
 800556e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005572:	f89a 3000 	ldrb.w	r3, [sl]
 8005576:	2b2a      	cmp	r3, #42	@ 0x2a
 8005578:	d015      	beq.n	80055a6 <_svfiprintf_r+0xfa>
 800557a:	9a07      	ldr	r2, [sp, #28]
 800557c:	4654      	mov	r4, sl
 800557e:	2000      	movs	r0, #0
 8005580:	f04f 0c0a 	mov.w	ip, #10
 8005584:	4621      	mov	r1, r4
 8005586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558a:	3b30      	subs	r3, #48	@ 0x30
 800558c:	2b09      	cmp	r3, #9
 800558e:	d94b      	bls.n	8005628 <_svfiprintf_r+0x17c>
 8005590:	b1b0      	cbz	r0, 80055c0 <_svfiprintf_r+0x114>
 8005592:	9207      	str	r2, [sp, #28]
 8005594:	e014      	b.n	80055c0 <_svfiprintf_r+0x114>
 8005596:	eba0 0308 	sub.w	r3, r0, r8
 800559a:	fa09 f303 	lsl.w	r3, r9, r3
 800559e:	4313      	orrs	r3, r2
 80055a0:	9304      	str	r3, [sp, #16]
 80055a2:	46a2      	mov	sl, r4
 80055a4:	e7d2      	b.n	800554c <_svfiprintf_r+0xa0>
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	1d19      	adds	r1, r3, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	9103      	str	r1, [sp, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bfbb      	ittet	lt
 80055b2:	425b      	neglt	r3, r3
 80055b4:	f042 0202 	orrlt.w	r2, r2, #2
 80055b8:	9307      	strge	r3, [sp, #28]
 80055ba:	9307      	strlt	r3, [sp, #28]
 80055bc:	bfb8      	it	lt
 80055be:	9204      	strlt	r2, [sp, #16]
 80055c0:	7823      	ldrb	r3, [r4, #0]
 80055c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80055c4:	d10a      	bne.n	80055dc <_svfiprintf_r+0x130>
 80055c6:	7863      	ldrb	r3, [r4, #1]
 80055c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ca:	d132      	bne.n	8005632 <_svfiprintf_r+0x186>
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	9203      	str	r2, [sp, #12]
 80055d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055d8:	3402      	adds	r4, #2
 80055da:	9305      	str	r3, [sp, #20]
 80055dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056a0 <_svfiprintf_r+0x1f4>
 80055e0:	7821      	ldrb	r1, [r4, #0]
 80055e2:	2203      	movs	r2, #3
 80055e4:	4650      	mov	r0, sl
 80055e6:	f7fa fe03 	bl	80001f0 <memchr>
 80055ea:	b138      	cbz	r0, 80055fc <_svfiprintf_r+0x150>
 80055ec:	9b04      	ldr	r3, [sp, #16]
 80055ee:	eba0 000a 	sub.w	r0, r0, sl
 80055f2:	2240      	movs	r2, #64	@ 0x40
 80055f4:	4082      	lsls	r2, r0
 80055f6:	4313      	orrs	r3, r2
 80055f8:	3401      	adds	r4, #1
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005600:	4824      	ldr	r0, [pc, #144]	@ (8005694 <_svfiprintf_r+0x1e8>)
 8005602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005606:	2206      	movs	r2, #6
 8005608:	f7fa fdf2 	bl	80001f0 <memchr>
 800560c:	2800      	cmp	r0, #0
 800560e:	d036      	beq.n	800567e <_svfiprintf_r+0x1d2>
 8005610:	4b21      	ldr	r3, [pc, #132]	@ (8005698 <_svfiprintf_r+0x1ec>)
 8005612:	bb1b      	cbnz	r3, 800565c <_svfiprintf_r+0x1b0>
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	3307      	adds	r3, #7
 8005618:	f023 0307 	bic.w	r3, r3, #7
 800561c:	3308      	adds	r3, #8
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005622:	4433      	add	r3, r6
 8005624:	9309      	str	r3, [sp, #36]	@ 0x24
 8005626:	e76a      	b.n	80054fe <_svfiprintf_r+0x52>
 8005628:	fb0c 3202 	mla	r2, ip, r2, r3
 800562c:	460c      	mov	r4, r1
 800562e:	2001      	movs	r0, #1
 8005630:	e7a8      	b.n	8005584 <_svfiprintf_r+0xd8>
 8005632:	2300      	movs	r3, #0
 8005634:	3401      	adds	r4, #1
 8005636:	9305      	str	r3, [sp, #20]
 8005638:	4619      	mov	r1, r3
 800563a:	f04f 0c0a 	mov.w	ip, #10
 800563e:	4620      	mov	r0, r4
 8005640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005644:	3a30      	subs	r2, #48	@ 0x30
 8005646:	2a09      	cmp	r2, #9
 8005648:	d903      	bls.n	8005652 <_svfiprintf_r+0x1a6>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0c6      	beq.n	80055dc <_svfiprintf_r+0x130>
 800564e:	9105      	str	r1, [sp, #20]
 8005650:	e7c4      	b.n	80055dc <_svfiprintf_r+0x130>
 8005652:	fb0c 2101 	mla	r1, ip, r1, r2
 8005656:	4604      	mov	r4, r0
 8005658:	2301      	movs	r3, #1
 800565a:	e7f0      	b.n	800563e <_svfiprintf_r+0x192>
 800565c:	ab03      	add	r3, sp, #12
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	462a      	mov	r2, r5
 8005662:	4b0e      	ldr	r3, [pc, #56]	@ (800569c <_svfiprintf_r+0x1f0>)
 8005664:	a904      	add	r1, sp, #16
 8005666:	4638      	mov	r0, r7
 8005668:	f3af 8000 	nop.w
 800566c:	1c42      	adds	r2, r0, #1
 800566e:	4606      	mov	r6, r0
 8005670:	d1d6      	bne.n	8005620 <_svfiprintf_r+0x174>
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	065b      	lsls	r3, r3, #25
 8005676:	f53f af2d 	bmi.w	80054d4 <_svfiprintf_r+0x28>
 800567a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800567c:	e72c      	b.n	80054d8 <_svfiprintf_r+0x2c>
 800567e:	ab03      	add	r3, sp, #12
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	462a      	mov	r2, r5
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <_svfiprintf_r+0x1f0>)
 8005686:	a904      	add	r1, sp, #16
 8005688:	4638      	mov	r0, r7
 800568a:	f000 f879 	bl	8005780 <_printf_i>
 800568e:	e7ed      	b.n	800566c <_svfiprintf_r+0x1c0>
 8005690:	08005b40 	.word	0x08005b40
 8005694:	08005b4a 	.word	0x08005b4a
 8005698:	00000000 	.word	0x00000000
 800569c:	080053f5 	.word	0x080053f5
 80056a0:	08005b46 	.word	0x08005b46

080056a4 <_printf_common>:
 80056a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	4616      	mov	r6, r2
 80056aa:	4698      	mov	r8, r3
 80056ac:	688a      	ldr	r2, [r1, #8]
 80056ae:	690b      	ldr	r3, [r1, #16]
 80056b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056b4:	4293      	cmp	r3, r2
 80056b6:	bfb8      	it	lt
 80056b8:	4613      	movlt	r3, r2
 80056ba:	6033      	str	r3, [r6, #0]
 80056bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056c0:	4607      	mov	r7, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	b10a      	cbz	r2, 80056ca <_printf_common+0x26>
 80056c6:	3301      	adds	r3, #1
 80056c8:	6033      	str	r3, [r6, #0]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	0699      	lsls	r1, r3, #26
 80056ce:	bf42      	ittt	mi
 80056d0:	6833      	ldrmi	r3, [r6, #0]
 80056d2:	3302      	addmi	r3, #2
 80056d4:	6033      	strmi	r3, [r6, #0]
 80056d6:	6825      	ldr	r5, [r4, #0]
 80056d8:	f015 0506 	ands.w	r5, r5, #6
 80056dc:	d106      	bne.n	80056ec <_printf_common+0x48>
 80056de:	f104 0a19 	add.w	sl, r4, #25
 80056e2:	68e3      	ldr	r3, [r4, #12]
 80056e4:	6832      	ldr	r2, [r6, #0]
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	42ab      	cmp	r3, r5
 80056ea:	dc26      	bgt.n	800573a <_printf_common+0x96>
 80056ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	3b00      	subs	r3, #0
 80056f4:	bf18      	it	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	0692      	lsls	r2, r2, #26
 80056fa:	d42b      	bmi.n	8005754 <_printf_common+0xb0>
 80056fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005700:	4641      	mov	r1, r8
 8005702:	4638      	mov	r0, r7
 8005704:	47c8      	blx	r9
 8005706:	3001      	adds	r0, #1
 8005708:	d01e      	beq.n	8005748 <_printf_common+0xa4>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	6922      	ldr	r2, [r4, #16]
 800570e:	f003 0306 	and.w	r3, r3, #6
 8005712:	2b04      	cmp	r3, #4
 8005714:	bf02      	ittt	eq
 8005716:	68e5      	ldreq	r5, [r4, #12]
 8005718:	6833      	ldreq	r3, [r6, #0]
 800571a:	1aed      	subeq	r5, r5, r3
 800571c:	68a3      	ldr	r3, [r4, #8]
 800571e:	bf0c      	ite	eq
 8005720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005724:	2500      	movne	r5, #0
 8005726:	4293      	cmp	r3, r2
 8005728:	bfc4      	itt	gt
 800572a:	1a9b      	subgt	r3, r3, r2
 800572c:	18ed      	addgt	r5, r5, r3
 800572e:	2600      	movs	r6, #0
 8005730:	341a      	adds	r4, #26
 8005732:	42b5      	cmp	r5, r6
 8005734:	d11a      	bne.n	800576c <_printf_common+0xc8>
 8005736:	2000      	movs	r0, #0
 8005738:	e008      	b.n	800574c <_printf_common+0xa8>
 800573a:	2301      	movs	r3, #1
 800573c:	4652      	mov	r2, sl
 800573e:	4641      	mov	r1, r8
 8005740:	4638      	mov	r0, r7
 8005742:	47c8      	blx	r9
 8005744:	3001      	adds	r0, #1
 8005746:	d103      	bne.n	8005750 <_printf_common+0xac>
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005750:	3501      	adds	r5, #1
 8005752:	e7c6      	b.n	80056e2 <_printf_common+0x3e>
 8005754:	18e1      	adds	r1, r4, r3
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	2030      	movs	r0, #48	@ 0x30
 800575a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800575e:	4422      	add	r2, r4
 8005760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005768:	3302      	adds	r3, #2
 800576a:	e7c7      	b.n	80056fc <_printf_common+0x58>
 800576c:	2301      	movs	r3, #1
 800576e:	4622      	mov	r2, r4
 8005770:	4641      	mov	r1, r8
 8005772:	4638      	mov	r0, r7
 8005774:	47c8      	blx	r9
 8005776:	3001      	adds	r0, #1
 8005778:	d0e6      	beq.n	8005748 <_printf_common+0xa4>
 800577a:	3601      	adds	r6, #1
 800577c:	e7d9      	b.n	8005732 <_printf_common+0x8e>
	...

08005780 <_printf_i>:
 8005780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	7e0f      	ldrb	r7, [r1, #24]
 8005786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005788:	2f78      	cmp	r7, #120	@ 0x78
 800578a:	4691      	mov	r9, r2
 800578c:	4680      	mov	r8, r0
 800578e:	460c      	mov	r4, r1
 8005790:	469a      	mov	sl, r3
 8005792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005796:	d807      	bhi.n	80057a8 <_printf_i+0x28>
 8005798:	2f62      	cmp	r7, #98	@ 0x62
 800579a:	d80a      	bhi.n	80057b2 <_printf_i+0x32>
 800579c:	2f00      	cmp	r7, #0
 800579e:	f000 80d2 	beq.w	8005946 <_printf_i+0x1c6>
 80057a2:	2f58      	cmp	r7, #88	@ 0x58
 80057a4:	f000 80b9 	beq.w	800591a <_printf_i+0x19a>
 80057a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057b0:	e03a      	b.n	8005828 <_printf_i+0xa8>
 80057b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057b6:	2b15      	cmp	r3, #21
 80057b8:	d8f6      	bhi.n	80057a8 <_printf_i+0x28>
 80057ba:	a101      	add	r1, pc, #4	@ (adr r1, 80057c0 <_printf_i+0x40>)
 80057bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c0:	08005819 	.word	0x08005819
 80057c4:	0800582d 	.word	0x0800582d
 80057c8:	080057a9 	.word	0x080057a9
 80057cc:	080057a9 	.word	0x080057a9
 80057d0:	080057a9 	.word	0x080057a9
 80057d4:	080057a9 	.word	0x080057a9
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	080057a9 	.word	0x080057a9
 80057e0:	080057a9 	.word	0x080057a9
 80057e4:	080057a9 	.word	0x080057a9
 80057e8:	080057a9 	.word	0x080057a9
 80057ec:	0800592d 	.word	0x0800592d
 80057f0:	08005857 	.word	0x08005857
 80057f4:	080058e7 	.word	0x080058e7
 80057f8:	080057a9 	.word	0x080057a9
 80057fc:	080057a9 	.word	0x080057a9
 8005800:	0800594f 	.word	0x0800594f
 8005804:	080057a9 	.word	0x080057a9
 8005808:	08005857 	.word	0x08005857
 800580c:	080057a9 	.word	0x080057a9
 8005810:	080057a9 	.word	0x080057a9
 8005814:	080058ef 	.word	0x080058ef
 8005818:	6833      	ldr	r3, [r6, #0]
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6032      	str	r2, [r6, #0]
 8005820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005828:	2301      	movs	r3, #1
 800582a:	e09d      	b.n	8005968 <_printf_i+0x1e8>
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	1d19      	adds	r1, r3, #4
 8005832:	6031      	str	r1, [r6, #0]
 8005834:	0606      	lsls	r6, r0, #24
 8005836:	d501      	bpl.n	800583c <_printf_i+0xbc>
 8005838:	681d      	ldr	r5, [r3, #0]
 800583a:	e003      	b.n	8005844 <_printf_i+0xc4>
 800583c:	0645      	lsls	r5, r0, #25
 800583e:	d5fb      	bpl.n	8005838 <_printf_i+0xb8>
 8005840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005844:	2d00      	cmp	r5, #0
 8005846:	da03      	bge.n	8005850 <_printf_i+0xd0>
 8005848:	232d      	movs	r3, #45	@ 0x2d
 800584a:	426d      	negs	r5, r5
 800584c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005850:	4859      	ldr	r0, [pc, #356]	@ (80059b8 <_printf_i+0x238>)
 8005852:	230a      	movs	r3, #10
 8005854:	e011      	b.n	800587a <_printf_i+0xfa>
 8005856:	6821      	ldr	r1, [r4, #0]
 8005858:	6833      	ldr	r3, [r6, #0]
 800585a:	0608      	lsls	r0, r1, #24
 800585c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005860:	d402      	bmi.n	8005868 <_printf_i+0xe8>
 8005862:	0649      	lsls	r1, r1, #25
 8005864:	bf48      	it	mi
 8005866:	b2ad      	uxthmi	r5, r5
 8005868:	2f6f      	cmp	r7, #111	@ 0x6f
 800586a:	4853      	ldr	r0, [pc, #332]	@ (80059b8 <_printf_i+0x238>)
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	bf14      	ite	ne
 8005870:	230a      	movne	r3, #10
 8005872:	2308      	moveq	r3, #8
 8005874:	2100      	movs	r1, #0
 8005876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800587a:	6866      	ldr	r6, [r4, #4]
 800587c:	60a6      	str	r6, [r4, #8]
 800587e:	2e00      	cmp	r6, #0
 8005880:	bfa2      	ittt	ge
 8005882:	6821      	ldrge	r1, [r4, #0]
 8005884:	f021 0104 	bicge.w	r1, r1, #4
 8005888:	6021      	strge	r1, [r4, #0]
 800588a:	b90d      	cbnz	r5, 8005890 <_printf_i+0x110>
 800588c:	2e00      	cmp	r6, #0
 800588e:	d04b      	beq.n	8005928 <_printf_i+0x1a8>
 8005890:	4616      	mov	r6, r2
 8005892:	fbb5 f1f3 	udiv	r1, r5, r3
 8005896:	fb03 5711 	mls	r7, r3, r1, r5
 800589a:	5dc7      	ldrb	r7, [r0, r7]
 800589c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058a0:	462f      	mov	r7, r5
 80058a2:	42bb      	cmp	r3, r7
 80058a4:	460d      	mov	r5, r1
 80058a6:	d9f4      	bls.n	8005892 <_printf_i+0x112>
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d10b      	bne.n	80058c4 <_printf_i+0x144>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	07df      	lsls	r7, r3, #31
 80058b0:	d508      	bpl.n	80058c4 <_printf_i+0x144>
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	6861      	ldr	r1, [r4, #4]
 80058b6:	4299      	cmp	r1, r3
 80058b8:	bfde      	ittt	le
 80058ba:	2330      	movle	r3, #48	@ 0x30
 80058bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058c4:	1b92      	subs	r2, r2, r6
 80058c6:	6122      	str	r2, [r4, #16]
 80058c8:	f8cd a000 	str.w	sl, [sp]
 80058cc:	464b      	mov	r3, r9
 80058ce:	aa03      	add	r2, sp, #12
 80058d0:	4621      	mov	r1, r4
 80058d2:	4640      	mov	r0, r8
 80058d4:	f7ff fee6 	bl	80056a4 <_printf_common>
 80058d8:	3001      	adds	r0, #1
 80058da:	d14a      	bne.n	8005972 <_printf_i+0x1f2>
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	b004      	add	sp, #16
 80058e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	f043 0320 	orr.w	r3, r3, #32
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	4833      	ldr	r0, [pc, #204]	@ (80059bc <_printf_i+0x23c>)
 80058f0:	2778      	movs	r7, #120	@ 0x78
 80058f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	6831      	ldr	r1, [r6, #0]
 80058fa:	061f      	lsls	r7, r3, #24
 80058fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005900:	d402      	bmi.n	8005908 <_printf_i+0x188>
 8005902:	065f      	lsls	r7, r3, #25
 8005904:	bf48      	it	mi
 8005906:	b2ad      	uxthmi	r5, r5
 8005908:	6031      	str	r1, [r6, #0]
 800590a:	07d9      	lsls	r1, r3, #31
 800590c:	bf44      	itt	mi
 800590e:	f043 0320 	orrmi.w	r3, r3, #32
 8005912:	6023      	strmi	r3, [r4, #0]
 8005914:	b11d      	cbz	r5, 800591e <_printf_i+0x19e>
 8005916:	2310      	movs	r3, #16
 8005918:	e7ac      	b.n	8005874 <_printf_i+0xf4>
 800591a:	4827      	ldr	r0, [pc, #156]	@ (80059b8 <_printf_i+0x238>)
 800591c:	e7e9      	b.n	80058f2 <_printf_i+0x172>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	f023 0320 	bic.w	r3, r3, #32
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	e7f6      	b.n	8005916 <_printf_i+0x196>
 8005928:	4616      	mov	r6, r2
 800592a:	e7bd      	b.n	80058a8 <_printf_i+0x128>
 800592c:	6833      	ldr	r3, [r6, #0]
 800592e:	6825      	ldr	r5, [r4, #0]
 8005930:	6961      	ldr	r1, [r4, #20]
 8005932:	1d18      	adds	r0, r3, #4
 8005934:	6030      	str	r0, [r6, #0]
 8005936:	062e      	lsls	r6, r5, #24
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	d501      	bpl.n	8005940 <_printf_i+0x1c0>
 800593c:	6019      	str	r1, [r3, #0]
 800593e:	e002      	b.n	8005946 <_printf_i+0x1c6>
 8005940:	0668      	lsls	r0, r5, #25
 8005942:	d5fb      	bpl.n	800593c <_printf_i+0x1bc>
 8005944:	8019      	strh	r1, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	4616      	mov	r6, r2
 800594c:	e7bc      	b.n	80058c8 <_printf_i+0x148>
 800594e:	6833      	ldr	r3, [r6, #0]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	6032      	str	r2, [r6, #0]
 8005954:	681e      	ldr	r6, [r3, #0]
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	2100      	movs	r1, #0
 800595a:	4630      	mov	r0, r6
 800595c:	f7fa fc48 	bl	80001f0 <memchr>
 8005960:	b108      	cbz	r0, 8005966 <_printf_i+0x1e6>
 8005962:	1b80      	subs	r0, r0, r6
 8005964:	6060      	str	r0, [r4, #4]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	2300      	movs	r3, #0
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005970:	e7aa      	b.n	80058c8 <_printf_i+0x148>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	4632      	mov	r2, r6
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	47d0      	blx	sl
 800597c:	3001      	adds	r0, #1
 800597e:	d0ad      	beq.n	80058dc <_printf_i+0x15c>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	079b      	lsls	r3, r3, #30
 8005984:	d413      	bmi.n	80059ae <_printf_i+0x22e>
 8005986:	68e0      	ldr	r0, [r4, #12]
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	4298      	cmp	r0, r3
 800598c:	bfb8      	it	lt
 800598e:	4618      	movlt	r0, r3
 8005990:	e7a6      	b.n	80058e0 <_printf_i+0x160>
 8005992:	2301      	movs	r3, #1
 8005994:	4632      	mov	r2, r6
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	47d0      	blx	sl
 800599c:	3001      	adds	r0, #1
 800599e:	d09d      	beq.n	80058dc <_printf_i+0x15c>
 80059a0:	3501      	adds	r5, #1
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	9903      	ldr	r1, [sp, #12]
 80059a6:	1a5b      	subs	r3, r3, r1
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dcf2      	bgt.n	8005992 <_printf_i+0x212>
 80059ac:	e7eb      	b.n	8005986 <_printf_i+0x206>
 80059ae:	2500      	movs	r5, #0
 80059b0:	f104 0619 	add.w	r6, r4, #25
 80059b4:	e7f5      	b.n	80059a2 <_printf_i+0x222>
 80059b6:	bf00      	nop
 80059b8:	08005b51 	.word	0x08005b51
 80059bc:	08005b62 	.word	0x08005b62

080059c0 <memmove>:
 80059c0:	4288      	cmp	r0, r1
 80059c2:	b510      	push	{r4, lr}
 80059c4:	eb01 0402 	add.w	r4, r1, r2
 80059c8:	d902      	bls.n	80059d0 <memmove+0x10>
 80059ca:	4284      	cmp	r4, r0
 80059cc:	4623      	mov	r3, r4
 80059ce:	d807      	bhi.n	80059e0 <memmove+0x20>
 80059d0:	1e43      	subs	r3, r0, #1
 80059d2:	42a1      	cmp	r1, r4
 80059d4:	d008      	beq.n	80059e8 <memmove+0x28>
 80059d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059de:	e7f8      	b.n	80059d2 <memmove+0x12>
 80059e0:	4402      	add	r2, r0
 80059e2:	4601      	mov	r1, r0
 80059e4:	428a      	cmp	r2, r1
 80059e6:	d100      	bne.n	80059ea <memmove+0x2a>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f2:	e7f7      	b.n	80059e4 <memmove+0x24>

080059f4 <_sbrk_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d06      	ldr	r5, [pc, #24]	@ (8005a10 <_sbrk_r+0x1c>)
 80059f8:	2300      	movs	r3, #0
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	f7fc fb1a 	bl	8002038 <_sbrk>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_sbrk_r+0x1a>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_sbrk_r+0x1a>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20000894 	.word	0x20000894

08005a14 <memcpy>:
 8005a14:	440a      	add	r2, r1
 8005a16:	4291      	cmp	r1, r2
 8005a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a1c:	d100      	bne.n	8005a20 <memcpy+0xc>
 8005a1e:	4770      	bx	lr
 8005a20:	b510      	push	{r4, lr}
 8005a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2a:	4291      	cmp	r1, r2
 8005a2c:	d1f9      	bne.n	8005a22 <memcpy+0xe>
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <_realloc_r>:
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	4680      	mov	r8, r0
 8005a36:	4615      	mov	r5, r2
 8005a38:	460c      	mov	r4, r1
 8005a3a:	b921      	cbnz	r1, 8005a46 <_realloc_r+0x16>
 8005a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a40:	4611      	mov	r1, r2
 8005a42:	f7ff bc4b 	b.w	80052dc <_malloc_r>
 8005a46:	b92a      	cbnz	r2, 8005a54 <_realloc_r+0x24>
 8005a48:	f7ff fbdc 	bl	8005204 <_free_r>
 8005a4c:	2400      	movs	r4, #0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	f000 f81a 	bl	8005a8c <_malloc_usable_size_r>
 8005a58:	4285      	cmp	r5, r0
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	d802      	bhi.n	8005a64 <_realloc_r+0x34>
 8005a5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a62:	d8f4      	bhi.n	8005a4e <_realloc_r+0x1e>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff fc38 	bl	80052dc <_malloc_r>
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0ec      	beq.n	8005a4c <_realloc_r+0x1c>
 8005a72:	42b5      	cmp	r5, r6
 8005a74:	462a      	mov	r2, r5
 8005a76:	4621      	mov	r1, r4
 8005a78:	bf28      	it	cs
 8005a7a:	4632      	movcs	r2, r6
 8005a7c:	f7ff ffca 	bl	8005a14 <memcpy>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fbbe 	bl	8005204 <_free_r>
 8005a88:	463c      	mov	r4, r7
 8005a8a:	e7e0      	b.n	8005a4e <_realloc_r+0x1e>

08005a8c <_malloc_usable_size_r>:
 8005a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a90:	1f18      	subs	r0, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bfbc      	itt	lt
 8005a96:	580b      	ldrlt	r3, [r1, r0]
 8005a98:	18c0      	addlt	r0, r0, r3
 8005a9a:	4770      	bx	lr

08005a9c <_init>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr

08005aa8 <_fini>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr
